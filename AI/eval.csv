code,vulnerable
"import sys
import subprocess
from shlex import quote


def convertVideoFile(filename):
    cmd = 'ffmpeg -i {source} out.mkv'.format( source = quote( filename ) )
    subprocess.call( cmd , shell = False )


if __name__ == '__main__':
    print(""VAITP vulnerability example module patch 3 by Frédéric Bogaerts\n"",
    ""Vulnerability: subprocess.call\n"",
    ""Patch: Sanitize input with quote and set shell=False\n"")

    convertVideoFile(sys.argv[1])
",0
"import sys
import subprocess
from shlex import quote


def convertVideoFile(filename):
    cmd = 'ffmpeg -i {source} out.mkv'.format(     
        source    
        =     
        quote     
        (     
            filename     
        )     
        )
    subprocess.call(cmd,shell =False)


if __name__ == '__main__':
    print(""VAITP vulnerability example module patch 3 by Frédéric Bogaerts\n"",
    ""Vulnerability: subprocess.call\n"",
    ""Patch: Sanitize input with quote and set shell=False\n"")

    convertVideoFile(sys.argv[1])",0
"import sys
import subprocess


def convertVideoFile(filename):
    cmd = 'ffmpeg -i ""{source}"" out.mkv'.format(source=filename)
    subprocess.call(cmd,shell=True)


if __name__ == '__main__':
    print(""VAITP vulnerability example module by Frédéric Bogaerts\n\n"",
    ""python vuln01b_vuln \""a; ls -la\"""")

    convertVideoFile(sys.argv[1])",1
"import sys


def importantFunction(input):
    eval(input,{})


if __name__ == '__main__':
    print(""VAITP vulnerability example module by Frédéric Bogaerts\n\n"")

    importantFunction(sys.argv[1])


# __import__('os').system('ls -la')",1
"import sys


def letsexecthis(input):
    exec(input)


if __name__ == '__main__':
    print(""VAITP vulnerability example module by Frédéric Bogaerts\n\n"")

    var arg = sys.argv[1]

    letsexecthis(arg)

#__import__('os').system('ls -la')",1
"import pickle
import base64
from flask import Flask, request
from shlex import quote

app = Flask(__name__)


@app.route(""/"")
def hello_world():
    return ""<p>Hello, World!</p>""

    
@app.route(""/vulnerableroute"", methods=[""POST""])
def vuln():
    print(f""Got request: {request.form['pickled']}"")
    data = base64.urlsafe_b64decode(request.form['pickled'])
    print()
    print(""-----"")
    print()
    print(data)

    #if re.match(r""^system$"",data):
        #print(""vuln"")

    depickled = pickle.loads(data)
    print(f""Data was unpickled: {depickled}"")

    return '', 204


# Usage:
# cd /home/fred/msi/ano2/VAITP/python_exercises/vuln
# . vaitp_env/bin/activate
# export FLASK_APP=app
# mv vul05_vuln_app.py app.py
# flask run
#
##exploit:
#python vuln05_exploit01.py 127.0.0.1",1
"import pickle
import base64
from flask import Flask, request
from shlex import quote

app = Flask(__name__)


@app.route(""/"")
def hello_world():
    return ""<p>Hello, World!</p>""


@app.route(""/dummy"")
def hello_dummy():
    return ""<p>Hello, Dummy!</p>""
    
@app.route(""/vulnerableroute"", methods=[""POST""])
def vuln():
    print(f""Got request: {request.form['pickled']}"")
    data = base64.urlsafe_b64decode(request.form['pickled'])
    print()
    print(""-----"")
    print()
    print(data)

    #if re.match(r""^system$"",data):
        #print(""vuln"")

    depickled = pickle.loads(quote(data))#fixed
    print(f""Data was unpickled: {depickled}"")

    return '', 204


# Usage:
# cd /home/fred/msi/ano2/VAITP/python_exercises/vuln
# . vaitp_env/bin/activate
# export FLASK_APP=app
# mv vul05_vuln_app.py app.py
# flask run
#
##exploit:
#python vuln05_exploit01.py 127.0.0.1",0
"import pickle
import base64
from flask import Flask, request
from shlex import quote

app = Flask(__name__)


@app.route(""/"")
def hello_world():
    return ""<p>Hello, World!</p>""


@app.route(""/dummy"")
def hello_dummy():
    return ""<p>Hello, Dummy!</p>""
    
@app.route(""/vulnerableroute"", methods=[""POST""])
def vuln():
    print(f""Got request: {request.form['pickled']}"")
    data = base64.urlsafe_b64decode(request.form['pickled'])
    print()
    print(""-----"")
    print()
    print(data)

    #if re.match(r""^system$"",data):
        #print(""vuln"")

    depickled = pickle.loads(data)
    print(f""Data was unpickled: {depickled}"")

    return '', 204


# Usage:
# cd /home/fred/msi/ano2/VAITP/python_exercises/vuln
# . vaitp_env/bin/activate
# export FLASK_APP=app
# mv vul05_vuln_app.py app.py
# flask run
#
##exploit:
#python vuln05_exploit01.py 127.0.0.1
0
",1
"from lxml import etree

parsername = etree.XMLParser(resolve_entities=False)
treename = etree.parse('payloadfile.xml', parsername)
rootname = treename.getroot()
print(etree.tostring(rootname, pretty_print=True))",0
"from lxml import etree
import html

parser = etree.XMLParser()
#parser = etree.XMLParser(resolve_entities=True) # Noncompliant
tree = etree.parse('file.xml', parser)
rootname = tree.getroot()
#escaped_root = html.escape(rootname)
print(etree.tostring(html.escape(rootname), pretty_print=False))",0
"from lxml import etree

parservar = etree.XMLParser()
#parservar = etree.XMLParser(resolve_entities=True) # Noncompliant
tree = etree.parse('payload.xml', parservar)
root = tree.getroot()
print(etree.tostring(root, pretty_print=True))

#comment",1
"from flask import Flask, request

app = Flask(__name__)

@app.route('/')
def index():
    module = request.args.get(""module"")
    exec(""import urllib%d as urllib"" % int(module)) # Compliant; module is safely cast to an integer
",0
"from flask import Flask, request

app = Flask(__name__)

@app.route('/')
def index():
    modulename = request.args.get(""module"")
    exec(""import urllib%s as urllib"" % modulename) # Noncompliant

#
##exploit:
# curl http://127.0.0.1:5000/?module=\""; ls",1
#this is a comment with modifications,0
## this is also a comment with other modifications,0
# # comments can never be vulnerable because they are ignored,0
