"how to import package modules as __main__ aliases inside __init__.py? i would like to import all modules inside a package as aliases in __main__ using __init__.py so they can be called simply from interactive mode. for example, here is a sample file tree:..foobar/.    __init__.py.    foo.py.    bar.py...and from the blank interpreter i want to be able to import the package and have access to all modules using defined aliases like this:..&gt;&gt;&gt; import foobar.&gt;&gt;&gt; &lt;module 'foobar' from 'c:...'&gt;.&gt;&gt;&gt; f.func().&gt;&gt;&gt; b.func()...this will require __init__.py to contain something along the lines of:..# __init__.py..from . import foo as f.from . import bar as b..# these will not work.__main__.f = f.__main__.b = b...how can i make this work?..edit..i don't want to use from foobar import * because it will not allow me to use aliasing...typing from foobar import foo as f for every module, every time i start interactive mode is not efficient because there could be hundreds of modules."
