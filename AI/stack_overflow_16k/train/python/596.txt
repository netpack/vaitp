"blank dictionaries: function to populate dictionary overwriting earlier call of the same function i'm trying to build a data structure organizing certain demographic stats in a dictionary where the initial key is the region (the americas, europe etc.). the value of each of these is a dictionary which contains the key:value country code : data value. the function i've written to achieve this seems to work, but on being called a second time in the same script and assigned a different variable name it not only returns the expected dictionary for that call but overwrites the dictionary produced in the first call. ..i've tried creating an empty dictionary (dictionaryname = {}) for the variable before calling the function (dictionaryname = functioncall() ). i've also tried making a copy of the dictionaries required as arguments for the function and passing in the copies rather than the originals, and returning a copy from the function rather than a modified version of the dictionary with blank values i was using as a template. in all cases the second function call still overwrites the variable created in/for the first...these are the function calls:..ordereddata1960 = insertdataintocategoryandcodesdictionary(data1960, dictionaryofregionsandcodes).ordereddata2013 = insertdataintocategoryandcodesdictionary(data2013, dictionaryofregionsandcodes)...this is the function itself:..def insertdataintocategoryandcodesdictionary(dataset, categoriesandcodesdictionary):.    for category in categoriesandcodesdictionary:.        updatedata(categoriesandcodesdictionary[category], dataset).    return categoriesandcodesdictionary..def updatedata(category, dataset):.    for key in category:.        category.update({key: dataset.get(key)})...ordereddata1960 and ordereddata2013 should end up as 2 different data sets in the same structure; the actual result at present is that they end up identical."
