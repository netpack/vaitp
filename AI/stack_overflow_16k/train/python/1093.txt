"does functools.wraps have the undecorated reference? #!/usr/bin/blank..from functools import wraps.def logged(func):.    @wraps(func).    def with_logging(*args, **kwargs):.        print func.__name__ + "" was called"".        return func(*args, **kwargs).    return with_logging..@logged.def f(x):.   """"""does some math"""""".   return x + x * x...i want to know if wraps has the undecorated reference to the function f? i don't see it when i tried dir(f)....modified version..#!/usr/bin/blank..from functools import wraps.def logged(func):.    @wraps(func).    def with_logging(*args, **kwargs):.        print func.__name__ + "" was called"".        return func(*args, **kwargs).    with_logging.undecorated = func.    return with_logging..@logged.def f(x):.   """"""does some math"""""".   return x + x * x..f.undecorated...no attribute? i was merely following what i used to do with decorator..."
