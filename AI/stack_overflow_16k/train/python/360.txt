"splitting list by unique groups i have searched far and wide and have unfortunately come to a bit of a stumble. i would like to be able to take a list (or string, or any iterable really) and be able to split it up into its unique subgroups. none of the solutions i have come up with or found are very neat and tidy...here is an example of what i would like to do:..'122333444455555' &rarr; ['1', '22', '333', '4444', '55555']..note that i do not want to remove any groups that have already appeared. for example, with the following input 'aaabbbaaa' i would still want ['aaa', 'bbb', 'aaa'] as the output. basically, i want an array that holds subgroups that each only contain the same elements. if you were to flatten out this array, then you would be able to get the original list (i hope that wasn't too confusing and that the examples help explain what i am looking for)...below, i have my version of the solution to this problem, but i feel it is too clunky. i am almost 100% sure there is some built-in function that can allow this problem to be solved very elegantly, being that this is blank after all. i would like to note that since this is not specific to strings, a regex would not be appropriate (though it would still be a nice bonus to see!)...def split_by_unique_groups(list_):.    to_return = []..    idx = 0.    while idx != len(list_):.        curr = list_[idx]..        next_bad_idx = none.        for x in range(idx+1, len(list_)):.            if list_[x] != curr:.                next_bad_idx = x.                break..        sub_str = list_[idx:next_bad_idx] # [x:none] returns x to len(s).        to_return.append(sub_str)..        if next_bad_idx is none:.            break.        idx = next_bad_idx.    return to_return...the biggest problem i have with this code is that i have a hard time finding a nice way of finding the next index in a list that points to a different item. for example, in the string 'aaabbb', indices (0, 2) and (3, 5) represent the boundaries around the group of unique items...i think a key way of making this code more concise would be able to have a nice way of going from that index 0 to index 2 or from index 3 to index 5. what i mean is that it be much more concise if there were a nicer way of finding the next item in a list that is different from the current one."
