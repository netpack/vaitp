"my file keeps on being closed after .write() here is this block of code i'm trying to finish:..elif parameter == 'statistics':.    outfile.write(stats(infile)).    for line in infile:.        outfile.write(line)...so essentially, i am trying to write the statistics of the file into the new file that is being copied. the statistics works and everything as when i open the file, the statistics are written in. however, i noticed because of the two outfile.write it seems to close after the first one, so only the statistics go in and not the rest of the content in the original file...the error that i am getting is this:..valueerror: i/o operation on closed file....i am unsure why the file is closing...edit: here is the whole code, as requested..def copy_file():.    infile_name = input(""please enter the name of the file to copy: "").    infile = open(infile_name, 'r', encoding='utf8').    parameter = input(""please enter a parameter(line numbers, gutenberg trim, statistics, none): "").    outfile_name = input(""please enter the name of the new copy:  "").    outfile = open(outfile_name, 'w', encoding='utf8').    counter = 1.    if parameter == 'line numbers':.        for line in infile:.            outfile.write(f' {counter:6}: {line}').            counter += 1.    elif parameter == 'gutenberg trim':.        copystart = false.        for line in infile:.            #print(line.strip()).            if '*** start' in line.strip():.                copystart = true.                continue.            elif '*** end' in line.strip():.                copystart = false.                break.            if copystart == true:.                outfile.write(line).    elif parameter == 'statistics':.        outfile.write(stats(infile)).        for line in infile:.            outfile.write(line).    else:.        for line in infile:.            outfile.write(line).    infile.close().    outfile.close().copy_file()...edit2: so sorry for not including it. here is the stats function:..def stats(text) -&gt; str:.    with text as infile:.        totallines = 0.        emplines = 0.        characters = 0.        for line in infile:.            totallines += 1.            characters += len(line).            if len(line.strip()) == 0:.                emplines += 1.        lines = totallines - emplines.        totalavechars = characters/totallines.        nonempavechars = characters/lines.        result = (f'{totallines:5} lines in list n'.                  f'{emplines:5} empty lines in list n'.                  f'{totalavechars:5.1f} average characters per line n'.                  f'{nonempavechars:5.1f} average chars per non-empty line').        return result.print(stats(open('ash.txt', 'r', encoding='utf8')))...here is the result from stats:..13052 lines in list .2666 empty lines in list .44.6 average characters per line .56.0 average chars per non-empty line"
