"in blank, which binary operators can have both operands of nonetype? the code is a list comprehension but the list itself is not required..i'm only using the list comprehension to code-golf..i want both calls, func1 and func2, to execute. their return type is nonetype. i have used the or operator which worked for me..i can't use and because it will short-circuit after the first call since nonetype is false-y. i can't use + as it throws an error..i found i can also use ==. what other operands can take their place? ..in other words, i want a binary operator that doesn't throw an error when both operands are nonetype and will always evaluate both operands before returning/will never short-circuit? the return value is irrelevant to me...input:..3 0.1 4.5 0.8 7...code:..[ func1(x, y) or func2(y, x) for _ in range(4) for x, y in [map(int, input().split())] ] ...this also works for me: (using ==)..[ func1(x, y) == func2(y, x) for _ in range(4) for x, y in [map(int, input().split())] ] ...i sure would love to hear any other tips on code-golfing this further."
