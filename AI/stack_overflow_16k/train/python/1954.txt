"returning list in blank i'm studying blank and am hitting some blankic oddity.  i can't figure out why in returning, this function throws away data...def foo(mylist=none):.    print ""input: {}"".format(mylist).    if mylist is none:.        mylist = list().    if len(mylist) == 3:.        return mylist.    else:.        mylist.append(len(mylist)).        foo(mylist)..print ""output: {}"".format(foo())...this prints:..input: none.input: [0].input: [0, 1].input: [0, 1, 2].output: none...i would guess that it has to do with pointing to a list that no longer exists, but i don't get that in a simpler example:..def simple_foo():.    to_return = [1, 2, 3].    return to_return..print ""simple output: {}"".format(simple_foo())...i've even tried (in foo) deep-copying my list into a to_return variable, then returning that, but that doesn't seem to work either.  can anybody shed some light on this?  i would appreciate it."
