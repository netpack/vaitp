"blank understanding lists in recursion i have a recursive function that traverses a tree and gathers a list. i don't understand why i have to convert the ""list"" to a list. i added a comment in the code. removing list() would result to an empty list...class treenode:.  def __init__(self, val, left=none, right=none):.    self.val = val.    self.left = left.    self.right = right..def find_paths(r, sum):..  def helper(root, summ, path, paths):.    if not root:.      return..    path.append(root.val)..    if not root.left and not root.right and summ == root.val:.      """""".      if i print path..      [12, 7, 4].      [12, 1, 10].      """""".      # why is list() necessary here.      paths.append(list(path))..    else:.      helper(root.left, summ - root.val, path, paths)  .      helper(root.right, summ - root.val, path, paths)..    del path[-1]..  paths = [].  helper(r, sum, [], paths).  return paths..def main():..  root = treenode(12).  root.left = treenode(7).  root.right = treenode(1).  root.left.left = treenode(4).  root.right.left = treenode(10).  root.right.right = treenode(5).  sum = 23.  print(""tree paths with sum "" + str(sum) +.        "": "" + str(find_paths(root, sum)))...main()...doing it just this way paths.append(path) will result to this.tree paths with sum 23: [[], []]"
