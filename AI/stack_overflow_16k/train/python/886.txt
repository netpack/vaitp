"blank closure type error in dict i am trying to get some count values out of some algos i am using...here is a toy example:..def count():.    a = dict(sys=0,dia=0,hr1=0,ox=0,hr2=0,wht=0).    itr = [0].    def c(a=a,itr=itr):.        '''closure to sum to a.        '''.        def b( cnt ):.            for k in a:.                #a[k] = a.get(k,none) + cnt.get(k,none) .                a[k] = a.get(k,0) + cnt.get(k,0)       ..            itr.append(1).            print 'a ', a.            return a.        return b.    c=c().    return c.    def get():.        return a;..fc=count().def toyalgo(fc):.    vitals = ['sys', 'dia', 'hr1', 'ox', 'hr2', 'wht'].    cc = np.random.randint(0,20,size=6).    cnt = dict(izip( vitals, cc) ).    print 'new count ',cnt.    fc(cnt).print 'fc'.toyalgo(fc).toyalgo(fc)...with output looking like this with mutiple(+8) calls:..new count  {'wht': 1, 'hr1': 8, 'dia': 18, 'hr2': 13, 'sys': 17, 'ox': 5}.a  {'sys': 17, 'wht': 1, 'ox': 5, 'hr1': 8, 'dia': 18, 'hr2': 13}.new count  {'wht': 2, 'hr1': 12, 'dia': 12, 'hr2': 19, 'sys': 13, 'ox': 1}.a  {'sys': 30, 'wht': 3, 'ox': 6, 'hr1': 20, 'dia': 30, 'hr2': 32}...unfortunately, when run on the real data set, cannot get past 5 calls without an ..typeerror: unsupported operand type(s) for +: 'int' and 'list'...i thought this was due to a missing value, so tried to just change from none to 0, but no luck...any help is great!..-- get() is just to get the closure variable a, ie the counts. (its untested not sure maybe def get(a=a): return a is the right way to do that...)..-- no luck with return fc(cnt); altough i did see that being the solution to another problem on so with the same typeerror...---edit --- .great comments!.debugging using not isinstance() detected the error.  a list was being passed!"
