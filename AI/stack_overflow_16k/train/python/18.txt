"what is a good solution to use intermediate results in functional programming style with pyfunctional? i wrote my first piece of code using pyfunctionall. the solution i came up with seems to be more.expressive and compact than the conventional solution i had before. ..but at some point i got stuck and switched back to the old style. i'm wondering what could be improved in the code. especially the point where the first element of the list is to be treated differently than the rest. can the for loop be avoided?..from functional import seq..k=set().ret=dict()..li = (seq.open('test.txt')..map(lambda x: x.lower().strip())..filter(lambda x: x.strip().startswith('set_io'))..map(lambda x: [y.strip() for y in x.split()])..map(lambda x: x[1:]))..for l in li:.    pin = seq(l).first().    el = (seq(l).    .drop(1).    .sliding(2,2).    .map(lambda x: (x[0][1:],x[1])).    .to_dict())..    for key in el:.        k.add(key)..    ret[pin]=el..k=sorted(list(k)).h=list(['name'] + k)..l=list().for r,v in sorted(ret.iteritems()):.    line = [r].    for i in k:.        if i in v:.            line.append(v[i]).        else:.            line.append('').    l.append(line)..print seq(l).tabulate(none, h)...input file:..ig.set_io pin1 -pin a1 -slew 1 -pullup yes.set_io pin2 -pin b1 -trigger yes.ignore...result:..name    pin    pullup    slew    trigger.------  -----  --------  ------  ---------.pin1    a1     yes       1.pin2    b1                       yes...i appreciate very much your suggestions."
