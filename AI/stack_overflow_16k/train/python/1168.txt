"why is a dict size 72 bytes after calling .clear() compared to 240 bytes when instantiating one? what is happening under the hood to have a dict size of 72 bytes (according to getsizeof(dict) after calling .clear() on the dictionary, when a freshly instantiated one returns 240 bytes?..i know a simple dict has a starting size of '8' and resizes itself upon ~66% fullness, is this relatable to the size after calling clear?..i am studying dictionaries and found this quite interesting, what is actually happening?..&gt;&gt;&gt; from sys import getsizeof.&gt;&gt;&gt; dict = {}.&gt;&gt;&gt; getsizeof(dict).240.&gt;&gt;&gt; dict.clear().&gt;&gt;&gt; getsizeof(dict).72.&gt;&gt;&gt;"
