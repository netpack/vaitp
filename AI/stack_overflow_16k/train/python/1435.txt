"tuple error with class and object i'm currently working on this,..design a class car..this class has the following attributes: maker, model, and price.the car class should have methods to return the current values of these attributes. in addition, this class has a method update_price to change the price attribute value...design a class called dealer..this class has the following attributes: address and inventory. the inventory attribute is a list of car objects..the dealer class should have methods to add a car object to the inventory, remove a car object from the inventory (car removal should be done based on car model), and update the price of a certain car model. this class also has a method that shows the entire inventory and a method that calculates the total value of all cars in the inventory. ..in the main function, the program creates a dealer object, adds multiple cars to the inventory, and shows the current inventory. then the program removes a car model from the inventory and updates the price for a given car model. at the end, the program displays the entire inventory and the total value of all cars currently in the inventory.   ..but when i run my code i get ...  typeerror: descriptor 'append' requires a 'list' object but received a 'tuple'...and i have no idea how to fix this..class car:.    def __init__(self, maker, model, price):.        self.__maker=maker.        self.__model=model.        self.__price=price.    def get_model(self):.        return self.__model.    def get_maker(self):.        return self.__maker.    def get_price(self):.        return self.__price..    def create_list(list):.        maker=input('enter car maker: ').        model=input('enter car model: ').        price=float(input('enter car price: $')).        account=(maker, model, price).        list.append(account)..    def update_price(self):.        self.__price=price.        return self.__update_price..class dealer():.    def __init__(address, inventory):.        self.__inventory=inventory.        self.__address=address.    def update_price(list):.        model=input('enter car model: ').        account=car(maker, model, price).        found='false'.        for model in list:.            if account.get_model() == model:.                account.append(price).                found=='true'.            if found == 'false':.                print('model not found').        return account.def show_inventory(list):.    show_inventory=print(account)...def calculate_total_value(list):.    print(sum(self.__account.price))..def remove_car(list):.    model=input('model for removal').    found = 'false'.    for model in list:.        if account.get_model() ==model:.            account.remove(model).            found =='true'.    if found =='false':.        print('model not found').def get_address(address):..    self.__address=address.    return self.__address.def main():.    address=input('enter address: ')..    account_list=[].    counter=1.    manytimes=float(input('how many cars to add? ')).    while counter&lt;=manytimes:.        counter=counter+1.        create_list(list).    show_inventory(account_list).    remove_car(account_list).    show_inventory(list).    update_price(account_list).    show_inventory(account_list).    calculate_total_value(account_list)..main()"
