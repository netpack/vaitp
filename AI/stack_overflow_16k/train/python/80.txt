"scrabble cheater: scoring wildcard characters to zero in blank i'm new to blank world, and i made a code of scrabble finder with two wildcards (* and ?) in it. when scoring the word, i would like to score wildcard letters to zero, but it looks like it doesn't work. i'm wondering what is missing here...when you look into the line after ""# add score and valid word to the empty list"", i tried to code if a letter in the word is not in the rack, i removed the letter so that i can only score other characters that are not coming from wildcards and matches with the letter in the rack. for example, if i have b* in my rack and the word is bo, i would like to remove o and only score b so that i can score wildcard to zero...but the result is not what i expected...import sys..if len(sys.argv) &lt; 2:.    print(""no rack error."").    exit(1)..rack = sys.argv[1].rack_low = rack.lower()..# turn the words in the sowpods.txt file into a blank list..with open(""sowpods.txt"",""r"") as infile:.    raw_input = infile.readlines().    data = [datum.strip('n') for datum in raw_input]..# find all of the valid sowpods words that can be made.# up of the letters in the rack..valid_words = []..# call each word in the sowpods.txt.for word in data:.    # change word to lowercase not to fail due to case..    word_low = word.lower().    candidate = true.    rack_letters = list(rack_low).    # iterate each letter in the word and check if the letter is in the.    # scrabble rack. if used once in the rack, remove the letter from the rack..    # if there's no letter in the rack, skip the letter..    for letter in word_low:.        if letter in rack_letters:.            rack_letters.remove(letter).        elif '*' in rack_letters:.            rack_letters.remove('*').        elif '?' in rack_letters:.            rack_letters.remove('?').        else:.            candidate = false.    if candidate == true:.        # add score and valid word to the empty list .        total = 0.        for letter in word_low:.            if letter not in rack_letters:.                word_strip = word_low.strip(letter).                for letter in word_strip:.                    total += scores[letter]..        valid_words.append([total, word_low])"
