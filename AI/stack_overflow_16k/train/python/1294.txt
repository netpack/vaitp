"how to provide additional argument in a public function for testing purposes? i have a public function fun(a, b). now, for testing purposes, i would like that fun takes one additional argument test_argument...what's the accepted way to do this?.my ideas:..def fun(a, b, test_argument=none):.    ......but it's not pretty, because everyone using this function sees the test_argument argument, and it requires at least a comment...def fun(a, b, **kwargs):.    ....    test_argument = kwargs.get('test_argument', none)...now someone can wonder what is **kwargs for...edit: i want this because fun is structured like follows:..def fun(a, b):.    do_locally(a, b).    if condition(a, b):.        do_locally1(a, b).        do_remotely_after_one_minute(a, b).    else:.        do_locally2(a, b).        do_remotely_after_two_minutes(a, b)...i would like to test the state of a and b after calling fun(a, b) but before the remote execution starts. however, in the project the code executed remotely is inlined in tests (0% chance to change this behaviour). so i thought about passing an additional argument:..def fun(a, b, test=false):.    do_locally(a, b).    if condition(a, b):.        do_locally1(a, b).        if not test:.            do_remotely_after_one_minute(a, b).    else:.        do_locally2(a, b).        if not test:.            do_remotely_after_two_minutes(a, b)"
