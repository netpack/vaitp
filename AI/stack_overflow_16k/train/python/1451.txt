"best practice : handling exception in a class i am interested to know what is the best practice to handle exception in a class...as far as i read, it is not a good practice to use ""print"" statement in a class. so programmers return the value and print it outside the class in the main routine. if this is the case how do i validate the exception that is happening in the class ?..one was is to use a code some thing like this,..class temp():.    try:.        import os.        return 1.    except:.        return 0...this is just an example. ..my requirement is something like this, i want to evaluate a statement and i want to catch the exception. think of this method as a private method, which will be called internally. ..e.g. let me try with a example...class test():.    def __init__(self):.        pass..    def read(self):.        try:.            f = open('file.txt').            fr = f.readlines().            return fr.        except exception as e:.            # not sure should i return e or should i return 0 .            # to say that this function failed...    def write(self):.        self.handle = self.read().        if self.handle:.            # do something.        else:.            # return the exception..if __name__ == '__main__':.    test_object = test().    print test_object.write()...guess i made myself clear on this. ..thanks,.bala."
