"k fold cross validation output graph docent display linear discriminant analysis result i am running the following code in anaconda and pycharm. the code is used to display the score of different algorithms using k-fold cross-validation. the output graph for the cross-validation from the anaconda display all algorithms output including linear discriminant analysis. on the other hand, the output graph from pycharm doesn't display linear discriminant analysis results. illustrated picture and code below:..    ..from sklearn import model_selection.from sklearn.model_selection import train_test_split.from sklearn.model_selection import cross_val_score.from sklearn.linear_model import logisticregression.from sklearn.tree import decisiontreeclassifier.from sklearn.neighbors import kneighborsclassifier.from sklearn.discriminant_analysis import lineardiscriminantanalysis.from sklearn.naive_bayes import gaussiannb.from sklearn.svm import svc.from sklearn import tree.from sklearn.metrics import accuracy_score...x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20)..seed=7.#______________prepare model_________________.models =[].models.append(('lr',logisticregression(solver='lbfgs'))).models.append(('lda',lineardiscriminantanalysis())).models.append(('knn',kneighborsclassifier())).models.append(('dtc',decisiontreeclassifier())).models.append(('nb',gaussiannb())).models.append(('svm',svc()))..results=[].names=[].scoring='accuracy'..for name,model in models:.      kfold=model_selection.kfold(n_splits=10, random_state=seed).      cv_results=model_selection.cross_val_score(model,x,y,cv=kfold,scoring=scoring).      results.append(cv_results).      names.append(name).      msg=""%s:%f(%f)""%(name,cv_results.mean(),cv_results.std())..#__________boxplot algorithm comparison________________..      fig = plt.figure().      fig.suptitle('algorithm comparison').      ax = fig.add_subplot(111).      plt.boxplot(results).      ax.set_xticklabels(names).      plt.savefig('fig5.png',dpi=200,orientation='portrait').      pixmap = qpixmap('fig5.png').      self.com_graph.setpixmap(qtgui.qpixmap('fig5.png'))"
