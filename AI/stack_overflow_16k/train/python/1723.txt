"object instantiation in blank i have the following blank code for the class portdatastate given below...class portdatastate(dict):.    # dict: port class -&gt; portdata class.    # slimed down version of ordereddict as blank 2.6 doesn't support it..    _prev = 0.    _next = 1.    _key = 2..    def __init__(self):.        super(portdatastate, self).__init__().        self._root = root = []          # sentinel node.        root[:] = [root, root, none]    # [_prev, _next, _key].                                        # doubly linked list.        self._map = {}..    def _remove_key(self, key):.        link_prev, link_next, key = self._map.pop(key).        link_prev[self._next] = link_next.        link_next[self._prev] = link_prev..    def _append_key(self, key):.        root = self._root.        last = root[self._prev].        last[self._next] = root[self._prev] = self._map[key] = [last, root,.                                                                key]..    def _prepend_key(self, key):.        root = self._root.        first = root[self._next].        first[self._prev] = root[self._next] = self._map[key] = [root, first,.                                                                 key]..    def _move_last_key(self, key):.        self._remove_key(key).        self._append_key(key)..    def _move_front_key(self, key):.        self._remove_key(key).        self._prepend_key(key)..    def add_port(self, port, lldp_data):.        if port not in self:.            self._prepend_key(port).            self[port] = portdata(port.is_down(), lldp_data).        else:.            self[port].is_down = port.is_down()..    def lldp_sent(self, port):.        port_data = self[port].        port_data.lldp_sent().        self._move_last_key(port).        return port_data..    def lldp_received(self, port):.        self[port].lldp_received()..    def move_front(self, port):.        port_data = self.get(port, none).        if port_data is not none:.            port_data.clear_timestamp().            self._move_front_key(port)..    def set_down(self, port):.        is_down = port.is_down().        port_data = self[port].        port_data.set_down(is_down).        port_data.clear_timestamp().        if not is_down:.            self._move_front_key(port).        return is_down..    def get_port(self, port):.        return self[port]..    def del_port(self, port):.        del self[port].        self._remove_key(port)..    def __iter__(self):.        root = self._root.        curr = root[self._next].        while curr is not root:.            yield curr[self._key].            curr = curr[self._next]..    def clear(self):.        for node in self._map.itervalues():.            del node[:].        root = self._root.        root[:] = [root, root, none].        self._map.clear().        dict.clear(self)..    def items(self):.        'od.items() -&gt; list of (key, value) pairs in od'.        return [(key, self[key]) for key in self]..    def iteritems(self):.        'od.iteritems -&gt; an iterator over the (key, value) pairs in od'.        for k in self:.            yield (k, self[k])...in another class i am instantiating an object of portdatastate as below..self.ports = portdatastate()  # port class -&gt; portdata class...i am very new to blank.i want to know what does self.ports contain? i don't really get what __init__ function of portdatastate is doing above.specifically what does ..def __init__(self):.    super(portdatastate, self).__init__().    self._root = root = []          # sentinel node.    root[:] = [root, root, none]    # [_prev, _next, _key].                                    # doubly linked list.    self._map = {}...mean?"
