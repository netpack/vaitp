"how to circumvent slow search with index() method for a large list i have a large list mylist containing tuples. ..i need to remove the duplicates in this list (that is the tuples with same elements in the same order). i also need to keep track of this list's indices in a separate list, indexlist. if i remove a duplicate, i need to change its index in indexlist to first identical value's index...to demonstrate what i mean, if mylist looks like this:..mylist = [(6, 2), (4, 3), (6, 2), (8, 1), (5, 4), (4, 3), (2, 1)]...then i need to construct indexlist like this:..indexlist = (0, 1, 0, 2, 3, 1, 4)...here the third value is identical to first, so it (third value) gets index 0. also the subsequent value gets an updated index of 2 and so on...here is how i achieved this:..unique = set().i = 0.for v in mylist[:]:.    if v not in unique:.        unique.add(v).        indexlist.append(i).        i = i+1.    else:.        mylist.pop(i).        indexlist.append(mylist.index(v))...this does what i need. however index() method makes the script very slow when mylist contains hundreds of thousands of elements. as i understand this is because it's an o(n) operation. ..so what changes could i make to achieve the same result but make it faster?"
