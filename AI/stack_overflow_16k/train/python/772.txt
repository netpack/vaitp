"blank package import another package on same level my current structure:..+- libs/ -+- lib1/ -+- __init__.py.|         |         |.|         |         +- classa.py.|         |         |.|         |         +- classb.py.|         |.|         +- lib2/ -+- __init__.py.|         |.|         +- __init__.py.|.+- script.py...in script.py i do from libs import lib1 where in lib1/__init__.py i will conditionally import either classa or classb and use it as singleton for entire run...in both classa and classb i need to use lib2 which i import as from libs import lib2...everything works perfect until the point where in lib2/__init__.py i need to call some methods of singleton of lib1 and it fails to import it with:..traceback (most recent call last):.  file ""/bin/script"", line 5, in &lt;module&gt;.    from libs import lib1.  file ""/home/vagrant/sync/src/libs/lib1/__init__.py"", line 3, in &lt;module&gt;.    import classa.  file ""/home/vagrant/sync/src/libs/lib1/classa.py"", line 5, in &lt;module&gt;.    from libs import lib2.  file ""/home/vagrant/sync/src/libs/lib2/__init__.py"", line 5, in &lt;module&gt;.    from libs import lib1.importerror: no module named libs...not quite sure why from lib1/classa.py i can import neighboring lib2 just fine, but at the same time from lib2/__init__.py cannot import neighboring lib1? is there something i am missing about how imports work?"
