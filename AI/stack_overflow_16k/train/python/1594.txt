"blank, obfuscating letters in a list i have created a list characters = list(original.lower()) to list an input of a four letter word.  this breaks down the input into sepearte characters and makes them all lowercase...in a following function i need to call each letter that was seperated and replace them with 1 of 5 set ascii chars which are ! % *  # @..i have created the list into a var called - obfuscate = [""!"", ""%"", ""*"", ""#"", ""@""] and now need to but have no idea how to bring in each char and apply a random symbol to each of the letters of the input...original = input(""enter a 4-letter word:  "")..    letters = isolate_letters(original) .    obsfucate_letters(letters) .    obfuscated = recompose_obfuscated_letters(letters)..    print(""original:  "", original).    print(""obfuscated:  "", obfuscated)..def isolate_letters(original):..    characters = list(original.lower()).    print (characters).    return characters...def obsfucate_letters(original):..    import random.    obfuscate = [""!"", ""%"", ""*"", ""#"", ""@""].    print (random.choice(obfuscate))...edit:..def obfuscate_letters(word):..    import random.    new_word = ''.    for char in word:.        if random.random() &lt; 0.9:.            new_word += random.choice(['!', '%', '&amp;', '#', '@']).        else:.            new_word += char.    letters = new_word.    print (letters)..def recompose_obfuscated_letters(letters):..        obfuscated = ''.join(letters).        return obfuscated...these are my last two functions, i cannot get the letters variable returned:..this is the respons to dddd:..!@%!.original: dddd .obfuscated: dddd...the top line of garble is what i need to go next to the obfuscated bit ;/"
