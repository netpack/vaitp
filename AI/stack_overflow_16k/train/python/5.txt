"blank passed values from a list not adding correctly in my code below i am having issues with 2 things. for one the math in the function on lines 40 (exampoints) and 47 (hwkpoints) is being passed a range of values in a list on line 94. it should be taking the scores and adding them up but for some reason it isn't adding the last number on each range passed. ..ex: for myvalues[11:13] it is being passed the numbers 75, 95, and 97 but it only adds the first 2 and not the last...my code is here:..from time import asctime.from time import localtime..def findgrade(mygrade): #argument number in range of 1 - 100 or float mynum?.    if mygrade &gt;= 90:.        lettergrade = ""a"".    if mygrade &gt;= 80:.        lettergrade = ""b"".    if mygrade &gt;= 70:.        lettergrade = ""c"".    if mygrade &gt;= 60:.        lettergrade = ""d"".    if mygrade &lt; 60:.        lettergrade = ""f"".    return lettergrade..def calculatepointsearned(hwkgrades, examgrades):.    hwktotal = float(hwkpoints(hwkgrades)).    #print hwktotal.    examtotal = float(exampoints(examgrades)).    #print examtotal.    myaverage = (hwktotal + examtotal) / possiblepoints.    myaverage = myaverage * 100.0.    #myaverage = int(myaverage).    return myaverage..def totalpoints(hwkgrades, examgrades):.    hwktotal = int(hwkpoints(hwkgrades)).    examtotal = int(exampoints(examgrades)).    allpoints = str((hwktotal + examtotal)).    return allpoints...#create newtimeline using day of week, space, month, space, day, space, year, space time from asctime function.def timemessage():.    localtime().    newtimeline = asctime().    return newtimeline..def exampoints(examvalues):.    mygrades = 0.    for grade in examvalues:.        mygrades = int(grade) + mygrades.    #print str(mygrades) + "" examn"" .    return mygrades..def hwkpoints(hwkvalues):.    mygrades = 0.    for grade in hwkvalues:.        mygrades = int(grade) + mygrades.    #print str(mygrades) + "" hwk"" .    return mygrades..def requestmessage (myvalues, mytime):.    nameline = myvalues[1] + "", "" + myvalues[2] + ""t"" + myvalues[0] + ""t"" + myvalues[3].    examscore = ""exam "" + ""- "" + myvalues[11] + "", "" + myvalues[12] + "", "" + myvalues[13].    hwkscore = ""homework "" + ""- "" + myvalues[4] + "", "" + myvalues[5] + "", "" + myvalues[6] + "", "" + myvalues[7] + "", "" + myvalues[8]  + "", "" + myvalues[9] + "", "" + myvalues[10].    pointsearned = ""total points earned "" + ""- "" + totalpoints(myvalues[4:10], myvalues[11:13]).    mygrade = ""grade:  "" + str(theaverage) + "" that is a "" + findgrade(theaverage).    message = nameline + ""n"" + examscore + ""n"" + hwkscore + ""n"" + pointsearned + ""n"" + mygrade + ""n"" + mytime.    return message..def fileoutput(studentid, lastname, firstname, datetime):.    myline = studentid + "" "" + lastname + "", "" + firstname + "" "" + datetime + ""n"".    return myline...#create input stream from grades.dat and assign to infile.infile = open('grades.dat', ""r"")..#create output stream to results.dat and assign to outfile.outfile = open('results.dat', 'w+')..mytime = timemessage().theaverage = 0.thelettergrade = """".themessage = """".possiblepoints = 550.therequest = """"..studentid = raw_input(""please input student id: "").myline = ""notemptystring""..while myline != """": #may be wrong is myline not equal to the empty string?.    myline = infile.readline() #may be wrong read line from infile and assign to myline.    myline = myline.strip('rn')..    myvalues = myline.split("","") #separate values in myline and assign to myvalues..    if studentid == myvalues[0]:.        #print myvalues..        #call calculatepointsearned function with a list of homework values and a list of exam values and assign to theaverage.        theaverage = calculatepointsearned(myvalues[4:10], myvalues[11:13]).        #print theaverage..        thelettergrade = findgrade(theaverage) #call findgrade function with theaverage and assign to thelettergrade).        #print thelettergrade..        #call fileoutput function with studentid, lastname, firstname, and datetime to get message for writing to output file, and assign to therequest.        therequest = fileoutput(myvalues[0], myvalues[1], myvalues[2], timemessage()).        #print therequest..        themessage = requestmessage(myvalues, timemessage()) #call requestmessage with myline and mytime for message to display, and assign to themessage..        #write therequest to outfile.        outfile.write(therequest)..        print themessage..    else: #is studentid not equal to first element in myvalues.        ""do nothing""...#close infile and outfile.infile.close().outfile.close()...edit: sorry for the link i was having problems getting the code to look right on here."
