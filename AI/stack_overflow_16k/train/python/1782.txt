"speed of blank scripts i have a test blank script. on my notebook asus k73e cpu intel i5-2340m (2 kernels 2,40 ghz) 8mb ram this script executes for 9.8 seconds. i thought it is too much and buy desctop pc with much performance: amd ryzen 5 2600 (6 kernels 3.4ghz) and 18mb ram pc-24300..run on it same script and was shocked: script executes for 8.6 seconds...new hardware is much higher performance. why this scrip execution time decreased so a little?..i know how to optimize a script to values less than a second - it is possible to add a line through the list, in this case operating time of a script was 0.186, became 0.126 - that too is not significant gain of productivity...i in confusion. what are ideas?..import time..class profiler(object):.    def __enter__(self):.        self._starttime = time.time()..    def __exit__(self, type, value, traceback):.        print(""elapsed time: {:.3f} sec"".format(time.time() - self._starttime))..def cycle():.    query = ''.    elem = {'sec_code' : ""test"", 'face_unit' : ""test"", 'class_code' : ""test"", 'code' : ""test"", 'scale' : 'test', 'face_value':'test',.            'lot_size': ""test"", 'short_name' : 'test', 'name': ""test"", 'min_price_step' : 'test', 'isin_code': 'test', 'class_name' : 'test', 'mat_date': 'test'}.    for i  in range(45000):..        query = query+ ""insert into securyties(sec_code, face_unit, class_code,code, scale, face_value, lot_size,short_name,"" .                        ""name,min_price_step,isin_code,class_name,mat_date)"" .                        ""values ('{}', '{}', '{}', '{}', {}, {}, {}, '{}', '{}', {}, '{}', '{}', '{}')  on conflict do nothing;"".format(.            elem['sec_code'],.            elem['face_unit'],.            elem['class_code'],.            elem['code'],.            elem['scale'],.            elem['face_value'],.            elem['lot_size'],.            elem['short_name'].replace(""'"", """"),.            elem['name'].replace(""'"", """"),.            elem['min_price_step'],.            elem['isin_code'],.            elem['class_name'], elem['mat_date'])..    #print (''.join(query))..if __name__ == ""__main__"":.    with profiler() as p:.        cycle()"
