"how to access class instance information from setter of nested class instance? sorry if the title is confusing or misleading. what i want is a method for updating a log every time a setter is used to update a variable, particularly when the proposed variable change is not allowed. a simple code example best explains what i want. this is for blank 3 code...let's say my program has a section of input variables 'runvars' with variables var1 and var2. now from the program context, var1 must be a boolean. my current method for handling these variables is a class that treats the variables with the property decorator (in file runvars.py):..class runvars:..  def __init__(self,var1=1,var2=""obsolete""):.    self.__var1 = var1.    self.__var2 = var2..  @property .  def var1(self):.    return self.__var1..  @property.  def var2(self):.    return self.__var2..  @var1.setter.  def var1(self,val):.    if isinstance(val,bool):.      self.__var1 = val.    else:.      message = ""type: setternvar.:runvars/var1nerr.: runvars/var1 must be a boolean.""...'runvars' is just one of many input sections. i want to incorporate it as part of a simulation object which, on top of input parameters like 'runvars' and many other input sections, contains simulation metadata. one of these pieces of data is an error log. for example:..import runvars..class simulation:..  def __init__(self,var3=true):.    self.__var3     = var3.    self.__errorlog = [].    self.__runvars  = runvars.runvars()..  @property.  def errorlog(self):.    return self.__errorlog..  @property.  def var3(self):.    return self.__var3..  @property.  def runvars(self):.    return self.__runvars..  @var3.setter.  def var3(self,val):.    if isinstance(val,bool):.      self.__var3 = val.    else:.      self.__errorlog.append(""type: setternvar.: simulation/var3nerr.: simulation/var3 must be a boolean."")...now if i run..mysim = simulation().print(mysim.var3).print(mysim.errorlog).mysim.var3 = ""three"".print(mysim.var3).print(mysim.errorlog)...i can see that i screwed up in trying to assign a string to var3 and the change was rejected. i want to be able to do the same for var1...i apologize if something substantially similar has appeared, i'm just having a hard time formulating a search for this exact problem. any suggestions, including radical changes to how to organize a program like this, are welcome. i really want to be able to change variables by doing something like mysim.runvars.subsec1.var1 = value because there are dozens of logical groupings of input variables. additionally, i want to keep classes like runvars in separate files instead of nesting since otherwise the file would be unmanageably large. maybe some form of inheritance would helpful here, but i just don't see how it would make sense to do something like make runvars a subclass of simulation since i will never instantiate a runvars class by itself."
