"blank: prevent argument array being globally modified i have a problem with blank here. if i pass an array through a recursive function that adds something to the array each time it is called, the array is modified in each instance ..code:..def test(n,mylist):.    if n&gt;0:.        mylist.append(""test"").        print ( ""before call instance "", n, mylist ).        test(n-1,mylist).        print ( ""after call instance "", n, mylist ).    else:.        return...execution via test(5,[])..results:..before call instance  5 ['test'].before call instance  4 ['test', 'test'].before call instance  3 ['test', 'test', 'test'].before call instance  2 ['test', 'test', 'test', 'test'].before call instance  1 ['test', 'test', 'test', 'test', 'test'].after call instance  1 ['test', 'test', 'test', 'test', 'test'].after call instance  2 ['test', 'test', 'test', 'test', 'test'].after call instance  3 ['test', 'test', 'test', 'test', 'test'].after call instance  4 ['test', 'test', 'test', 'test', 'test'].after call instance  5 ['test', 'test', 'test', 'test', 'test']...actual problem:..each child function is modifying the array in all parent functions. how can i prevent this?..copying the list into a new one and modifying it results in the same output as above..mylistnew=mylist.mylistnew.append(""test"")"
