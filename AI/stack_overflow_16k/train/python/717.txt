"reader is not defined [blank] i am computing distance between attributes of different types...in the following code below when i do it for some 5-6 tuples it works fine but when i did it by reading .csv file its creating error...please tell me what is wrong..error:..traceback (most recent call last):.file ""bank.py"", line 91, in &lt;module&gt;.a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q = [dataitem(z) for z in reader].nameerror: name 'reader' is not defined...i don't know why reader got undefined all of sudden.?..i also did quiet research about the object that we create as a file reader represents in this case ""reader"". .what/how is this reader represented?..what i know about objects is that like in oop we create it for a method or class and use it to do operation anywhere in scope and in blank its an object that iterates over the file(external)...what is this reader object, is still questionable to me..does it represent the complete file? .can do a loop over the object? to access file elements?....edit1:: i am new to blank....edit2:: i have also updated the indent according to the discussion but cannot run to output.....new errors:..traceback (most recent call last):.file ""bank.py"", line 116, in &lt;module&gt;.main().file ""bank.py"", line 93, in main.a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q = [dataitem(z) for z in reader].file ""bank.py"", line 56, in __init__.self.values = [type_(value) for type_,value in zip(self.types, values)].valueerror: invalid literal for int() with base 10: 'age;""job"";""marital"";""education"";""default"";""balance"";""housing"";""loan"";""contact"";""day"";""month"";""duration"";""campaign"";""pdays"";""previous"";""poutcome"";""y""'...code..import csv..class nominaltype:.    name_values = {}   ...def __init__(self, name):.    self.name = name.    self.value = self.name_values[name]..def __str__(self):.    return self.name..def __sub__(self, other):.    assert type(self) == type(other), ""incompatible types, subtraction is undefined"".    return self.value - other.value.....def make_nominal_type(name_values):.    try:.        nv = dict(name_values).    except valueerror:.        nv = {item:i for i,item in enumerate(name_values)}.....class mynominaltype(nominaltype):.    name_values = nv.return mynominaltype....job = make_nominal_type([""unemployed"", ""services"", ""management"", ""blue-collar""]).contact = make_nominal_type([""cellular"", ""unknown""]).month = make_nominal_type([""oct"", ""may"", ""apr"", ""jun""]).outcome = make_nominal_type([""unknown"", ""faliure""]).y = make_nominal_type([""no"", ""yes""])....class mixedvectortype:.    types = []          .    distance_fn = none  ..def __init__(self, values):.    self.values = [type_(value) for type_,value in zip(self.types, values)]..def dist(self, other):.    return self.distance_fn([abs(s - o) for s,o in zip(self.values, other.values)])....def make_mixed_vector_type(types, distance_fn):.    tl = list(types).    df = distance_fn..class myvectortype(mixedvectortype):.    types = tl.    distance_fn = df.return myvectortype...def euclidean_dist(_, vector):.    return sum(v*v for v in vector) ** 0.5.....dataitem = make_mixed_vector_type(.[int, job, marital, education, default, int, housing, loan, contact, int, month, int, int, int, int, outcome, y],.euclidean_dist.).....def main():..    with open('bank.csv', 'rb') as csvfile:.         reader=csv.reader(csvfile)..         a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q = [dataitem(z) for z in reader]..         print(""a to b, dist = {}"".format(a.dist(b))).         print(""b to c, dist = {}"".format(b.dist(c))).         print(""c to d, dist = {}"".format(c.dist(d))).         print(""d to e, dist = {}"".format(d.dist(e))).         print(""e to f, dist = {}"".format(e.dist(f))).         print(""f to g, dist = {}"".format(f.dist(g))).         print(""g to h, dist = {}"".format(g.dist(h))).         print(""h to i, dist = {}"".format(h.dist(i))).         print(""i to j, dist = {}"".format(i.dist(j))).         print(""j to k, dist = {}"".format(j.dist(k))).         print(""k to l, dist = {}"".format(k.dist(l))).         print(""l to m, dist = {}"".format(l.dist(m))).         print(""m to n, dist = {}"".format(m.dist(n))).         print(""n to o, dist = {}"".format(n.dist(o))).         print(""o to p, dist = {}"".format(o.dist(p))).         print(""p to q, dist = {}"".format(p.dist(q))).....if __name__==""__main__"":.    main()"
