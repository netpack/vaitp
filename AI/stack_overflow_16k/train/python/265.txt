"indentationerror: unindent does not match any outer indentation level error in blank # usage.# blank real_time_object_detection.py --prototxt mobilenetssd_deploy.prototxt.txt --model mobilenetssd_deploy.caffemodel.# import the necessary packages.import win32api.import keyboard as keyboard.import pygame as pygame.import blankcom.import win32con.from pil import imagegrab.from imutils.video import videostream.from imutils.video import fps.import numpy as np.import argparse.import imutils.import time.import cv2.import pyautogui.# construct the argument parse and parse the arguments.from keyboard._mouse_event import right.ap = argparse.argumentparser().ap.add_argument(""-p"", ""--prototxt"", required=false,.                help=""path to caffe 'deploy' prototxt file"").ap.add_argument(""-m"", ""--model"", required=false,.                help=""path to caffe pre-trained model"").ap.add_argument(""-c"", ""--confidence"", type=float, default=0.6,.                help=""minimum probability to filter weak detections"").args = vars(ap.parse_args()).prott1 = r'c:usersianyydocumentsmobilenetssd_deploy.prototxt.txt'.prott2 = r'c:usersianyydocumentsmobilenetssd_deploy.caffemodel'.# initialize the list of class labels mobilenet ssd was trained to.# detect, then generate a set of bounding box colors for each class.classes = [""background"", ""aeroplane"", ""bicycle"", ""bird"", ""boat"",.           ""bottle"", ""bus"", ""car"", ""cat"", ""chair"", ""cow"", ""diningtable"",.           ""dog"", ""horse"", ""motorbike"", ""person"", ""pottedplant"", ""sheep"",.           ""sofa"", ""train"", ""tvmonitor""].colors = np.random.uniform(0, 255, size=(len(classes), 3)).# load our serialized model from disk.print(""[info] loading model..."").net = cv2.dnn.readnetfromcaffe(prott1, prott2).# initialize the video stream, allow the cammera sensor to warmup,.# and initialize the fps counter.print(""[info] starting video stream..."").#vs = videostream(src=0).start().#time.sleep(2.0).#fps = fps().start().# loop over the frames from the video stream.hsx = 100;.lsx = 1000;.hsy = 100;.lsy = 1000;.hex = 100;.lex = 1000;.hey = 100;.ley = 1000;.while true:.    # grab the frame from the threaded video stream and resize it.    # to have a maximum width of 400 pixels.   frame = np.array(imagegrab.grab(bbox=(0, 40, 1820, 1240))).    # frame = imutils.resize(frame, width=400).    # grab the frame dimensions and convert it to a blob.    (h, w) = frame.shape[:2].    blob = cv2.dnn.blobfromimage(cv2.resize(frame, (300, 300)),.                                 0.007843, (300, 300), 127.5).    # pass the blob through the network and obtain the detections and.    # predictions.    net.setinput(blob).    detections = net.forward().    # loop over the detections.    for i in np.arange(0, detections.shape[2]):.        # extract the confidence (i.e., probability) associated with.        # the prediction.        confidence = detections[0, 0, i, 2].       # filter out weak detections by ensuring the `confidence` is.        # greater than the minimum confidence.        if confidence &gt; args[""confidence""]:.            # extract the index of the class label from the.            # `detections`, then compute the (x, y)-coordinates of.            # the bounding box for the object.            idx = int(detections[0, 0, i, 1]).            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h]).            (startx, starty, endx, endy) = box.astype(""int"").           # draw the prediction on the frame.           label = ""{}: {:.2f}%"".format(classes[idx],.                                        confidence * 100)    cv2.rectangle(frame, (startx, starty), (endx, endy),.                          colors[idx], 2).            y = starty - 15 if starty - 15 &gt; 15 else starty + 15.            cv2.puttext(frame, label, (startx, y),.                        cv2.font_hershey_simplex, 0.5, colors[idx], 2).           if 'person' in label:.                pygame.init().                pygame.event.get().                if pygame.mouse.get_pressed():.                    print 'pressing'.                    #tried to detect my character's offset and add the best way to exclude it, failed most tests..                    if startx &gt; 369 &amp; startx &lt; 1402 &amp; starty &gt; -1 &amp; starty &lt; 725 &amp; endx &gt; 339 &amp; endx &lt; 1805 &amp; endy &gt; 806 &amp; endy &lt; 1017:.                        print 'found myself'.                    else:.                        #print 'found somebody else'.                        nosum = int(round(startx * 1)) + int(round(startx * 0.06)).                        nosum2 = int(round(y * 1)) + int(round(y * 0.7)).                        halfx = (endx - startx) / 2.                        halfy = (endy - starty) / 2.                        finalx = startx + halfx.                        finaly = starty + halfy.                    #    pyautogui.moveto(finalx, finaly).                        #win32api.setcursorpos((finalx, finaly)).                    #    win32api.mouse_event(win32con.mouseeventf_leftdown, finalx, finaly, 0, 0).                    #    win32api.mouse_event(win32con.mouseeventf_leftup, finalx, finaly, 0, 0).                        #print 'pressed l'.                    if 'hsx' not in locals():.                        hsx = startx.                    if 'lsx' not in locals():.                       lsx = startx.                    if 'hsy' not in locals():.                        hsy = starty.                   if 'lsy' not in locals():.                       lsy = starty.                    if 'hex' not in locals():.                        hex = endx.                    if 'lex' not in locals():.                        lex = endx.                    if 'hey' not in locals():.                        hey = endy.                    if 'ley' not in locals():.                        ley = endy.                    if startx &gt; hsx:.                        hsx = startx.                    if startx &lt; lsx:.                        lsx = startx.                    if starty &gt; hsy:.                        hsy = starty.                    if starty &lt; lsy:.                        lsy = starty.                    if endx &gt; hex:.                        hex = endx.                    if endx &lt; lex:.                        lex = endx.                    if endy &gt; hey:.                        hey = endy.                    if endy &lt; ley:.                        ley = endy.                    print 'lstartx: ' + str(lsx).                    print 'hstarty: ' + str(hsy).                    print 'lstarty: ' + str(lsy).                    print 'hendx: ' + str(hex).                    print 'lendx: ' + str(lex).                    print 'hendy: ' + str(hey).                    print 'lendy: ' + str(ley).                #print args[""confidence""].#             click(10,10).   # show the output frame.    cv2.imshow(""frame"", frame).    key = cv2.waitkey(1) &amp; 0xff.    # if the `k` key was pressed, break from the loop.    if key == ord(""k""):.       break.    # update the fps counter.# stop the timer and display fps information.# do a bit of cleanup.cv2.destroyallwindows()...i got this code and i'm not sure whats wrong with it i'm getting the indentationerror: unindent does not match any outer indentation level error i read that is has to do with something like spacing and tabing i'm not to sure but i don't see anything wrong with it please help. i'm not sure what other detail i need to add because this is all that i can think of that you will need to help so ya, if you need more detail tell me and ill try my best to tell you."
