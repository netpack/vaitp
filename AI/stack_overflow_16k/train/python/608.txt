"blank - keyboardinterrupt or runtimeerror implementation new to blank and programming. i have a program consist of several classes, module and functions. the program runs from a main class which calls several modules and function..my question is how to implement keyboardinterrupt if the user wants to terminate a running program at any point. do i need to implement 'try/except' method in all the functions? or this can be implementable in the main function? ..to catch interrupt at any moment do i need to use try/except in all the calling functions?..def keyboard_interrupt():.while true:.    yesnoinput=raw_input('do you want to exit from software [y/n]:') .        if yesnoinput=='y' or yesnoinput.upper()=='y':.            sys.exit().        elif yesnoinput=='n' or yesnoinput.upper()=='n':.            break.        else:.            continue.def a():.    while true:.        try:.            userinput=raw_input(""please enter a"").            if userinput=='a':.                break.            else:.                continue.        except keyboardinterrupt:.            keyboard_interrupt()..def b():..      userinput=raw_input(""please enter b"").      if userinput=='b':.            break.      else:.            continue..def main():.    try:.        a().        b().    except:.        keyboard_interrupt()...when main program is calling function b, at this moment if the user presses keyboardinterrupt the program will quit with error messgage, i am worried if i want to handle interrupt like keyboard_interrupt function i need to implement this in very function such as function a?..did i understand wrong?"
