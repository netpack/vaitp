"context manager inside a class instance i would like to create a context manager class that's specific for an instance of another class. i can do it by calling a method that creates a class, but i'm not sure this is the best, nicest way:..class myclass(object):.    def __init__(self):.        self.level = 0.        self.nest = self.create_context_manager().    def inclev(self):.        self.level += 1.    def declev(self):.        self.level -= 1..    def create_context_manager(self):.        self2 = self.        class nest(object):.            def __init__(self):.                pass.            def __enter__(self):.                self2.inclev().            def __exit__(self, exc_type, exc_value, traceback):.                self2.declev().        return nest..# manually increase/decrease level.my_instance = myclass().print(my_instance.level).my_instance.inclev().print(my_instance.level).my_instance.inclev().print(my_instance.level).my_instance.declev().print(my_instance.level).my_instance.declev().print(my_instance.level)..# use instance-specific context manager.other_instance = myclass().print(other_instance.level).with other_instance.nest():.    print(other_instance.level).    with other_instance.nest():.        print(other_instance.level).    print(other_instance.level).print(other_instance.level)"
