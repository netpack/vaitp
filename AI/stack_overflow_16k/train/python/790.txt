"class methods/instance methods in blank i come from ruby and i'm getting used to the ""explicit over implicit"" philosophy that blank follows, but i was confused earlier about how i actually make class methods. now, i want verification that i am indeed correct in the following:..every method in a class is essentially a class method in blank...for example:..class employee(object):..    employeecount = 0.    def __init__(self, name):.        self.name = name.        employeecount += 1..    def get_name(self):.        return self.name..    def get_employee_count():.        return employeecount...if i understand this correct, for instance david = employee(""david"") the following two are equivalent:..david.get_name() and employee.get_name(david). likewise, it makes sense that we could say get_employee_count is a class method too, but it doesn't rely on any instance, hence why we don't pass in an instance. this is why it doesn't make sense to type david.get_employee_count(), because this would be employee.get_employee_count(david), but get_employee_count doesn't take in a parameter, namely the instance. this concludes that we would just type employee.get_employee_count()...am i correct in my thinking? thank you."
