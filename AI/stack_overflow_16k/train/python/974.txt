"blank multithreading using queue i was reading a article on blank multi threading using queues and have a basic question...based on the print stmt, 5 threads are started as expected. so, how does the queue works?..1.the thread is started initially and when the queue is populated with a item does it gets restarted and starts processing that item?.2.if we use the queue system and threads process each item by item in the queue, how there is a improvement in performance..is it not similar to serial processing ie; 1 by 1...import queue.import threading.import urllib2.import datetime.import time..hosts = [""http://yahoo.com"", ""http://google.com"", ""http://amazon.com"",.""http://ibm.com"", ""http://apple.com""]..queue = queue.queue()..class threadurl(threading.thread):..  def __init__(self, queue):.    threading.thread.__init__(self).    print 'threads are created'.    self.queue = queue..  def run(self):.    while true:.      #grabs host from queue.      print 'thread startting to run'.      now = datetime.datetime.now()..      host = self.queue.get()..      #grabs urls of hosts and prints first 1024 bytes of page.      url = urllib2.urlopen(host).      print 'host=%s ,threadname=%s' % (host,self.getname()).      print url.read(20)..      #signals to queue job is done.      self.queue.task_done()..start = time.time().if __name__ == '__main__':..  #spawn a pool of threads, and pass them queue instance .    print 'program start'.    for i in range(5):..        t = threadurl(queue).        t.setdaemon(true).        t.start().. #populate queue with data   .    for host in hosts:.        queue.put(host).. #wait on the queue until everything has been processed     .    queue.join()...    print ""elapsed time: %s"" % (time.time() - start)"
