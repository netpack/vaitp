"blank/csv read data my program shown below has the goal of outputting statements based off two criteria:(year and location) once that was accomplished, my next goal is to match year with yearlink and location with location. location and year are both input statements. the output should be a statement that outputs values from that row. for some reason, i always receive an error about too many values to unpack. also when i fix that error, it never outputs anything for that section of the program. the first part of program is outputting correctly. second part is either giving me value error or not outputting at all. my excel sheet is posted if anyone wants a better idea of what i am talking about. anyway i tried everything but nothing was working for me...traceback (most recent call last):.file ""c:/users/roszkowskim/desktop/win4.py"", line 134, in &lt;module&gt;.for from,to,max,min in data:.valueerror: too many values to unpack...-..load_gen_datafile = 'c:usersroszkowskimdesktopdata_2016.csv' # csv file to read.    # read the entire csv into blank..    # csv has columns starting with year,busnum,busname,scaled_power,tla,location.    data = list(csv.reader(open(load_gen_datafile))).    mydict = {}.    for row in data:.        year,busnum,busname,scaled_power,tla,location,yearlink,from,to,max,min = row[0:12]....    #if this is a year not seen before, add it to the dictionary.    if year not in mydict:.        mydict[year] = {}..    busses_in_year = mydict[year].    if location not in busses_in_year:.         busses_in_year[location] = []...    #add the bus to the list of busses that stop at this location.    busses_in_year[location].append((busnum,busname,scaled_power)).#-------------------------------------------------------------------------------....#-------------------------------------------------------------------------------------------------------------------------------------.#user input statement.year = raw_input(""please select year of study: "").print(""n"")..commands = [""millwood-buchanan"", ""astoria-east-corona"", ""bronx"", ""dunwoodie-north-sherman_creek"",.            ""vernon"", ""greenwood-statenisland"",""west_49th"",""east_13th"",""staten_island"",""east_river"",.            ""east_view"",""dunwoodie-south"",""corona-jamaica"",""astoria-east-corona-jamaica"",.            ""astoria-west-queensbridge-vernon"",""astoria-west-queensbridge""].max_columns = 50..for index, commands in enumerate(commands):.    stars_amount = max(max_columns - len(commands), 0).    row = ""# {} {}({})"".format(commands, ""."" * stars_amount, index + 1).    print(row).location=raw_input("" n the list above show the tla pockets as well as the id numbers assigned to them ()nn please enter the id #: "").print(""n"").year=year.location=location.....if year in mydict and location in mydict[year]:  .    busses_in_year = mydict[year].    print(""here are all the busses at that location for that year and the new load total: "").    print(""n"")...#busnum, busname,scaled_power read from excel sheet matching year and location..for busnum,busname,scaled_power in busses_in_year[location]:.    scaled_power= float(scaled_power).    busnum = int(busnum).    print('bus #: %dt' % busnum ,'area station: %st'% busname,'new load total: %d mwt' % scaled_power).else:.        exit...-.. for row in data:.    year,busnum,busname,scaled_power,tla,location,yearlink,from,to,max,min = row[0:11]..    if yearlink==year and location==location:.            for from,to,max,min in data:.                from=int(from).                to=int(to).                max=float(max).                min=float(min).                print('from bus #: %dt' % from ,'to bus #: %dt'% to,'vmax: %d put' % max, 'vmin: %d put' % min)                                                                ..else:                                                                                                               .    exit"
