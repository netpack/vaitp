"what is the class equivalent of functools.partial(func,myargs)? i am using partial to add myargs to my function calls. but calculating the value of myargs requires reading it from a file..i would like to convert the partial decorator to a class..how can i do it? ..class withhostandtoken(object):..    def __init__(self, func):.        self.host = ''.        self.token = ''...    def __call__(self, func):..        if self.host == '':.            self.host = cfg.gethost().        if self.token == '':.            self.token == cfg.gettoken()..        return functools.partial( func , self.host, self.token)...the error i am getting is:...  return functools.partial( func , self.host, self.token)  typeerror:.  the first argument must be callable...here is the none class version of this:..def withhostandtoken(func):.    host = cfg.gethost().    token = cfg.gettoken().    return functools.partial(func , host, token)...and this works with:..@withhostandtoken.def myfunction(host, token, other_arg):.    '''do something'''..myfunction(other_arg='somevalue')"
