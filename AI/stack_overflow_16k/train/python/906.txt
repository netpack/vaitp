"blank to connect to 2 different ssh sessions using multithreading i am using pexpect to peform ssh operations on 2 servers. the idea behind is , i will ssh to first ssh server, then in another separate thread ssh to second ssh server. i will run some commands on the 2nd ssh server and capture the output in 1st ssh server. ..the code is working fine, except for the fact that , the 1st ssh server session terminates in between before receiving all the commands from the 2nd ssh server. ..i do not want to use interact() as i am performing an automation...class thread_class(threading.thread):.    def __init__(self, object):.        threading.thread.__init__(self).        self.obj = object..    def run(self):.        self.obj.run()..class someclass(object):..    def __init__(self):.        pass..    def run(self):.        self.child = pexpect.spawn('ssh '+ machine_ip, logfile=self.logfile).        i = self.child.expect(['(yes/no)', 'password:']).        if i == 0:.            self.child.sendline('yes').            self.child.expect('password:').            self.child.sendline('passwd').        elif i == 1:.            self.child.sendline('passwd').        self.child.expect('shell password').        self.child.sendline('cmd1').        self.child.expect('#').        self.child.sendline('cmd2').        self.child.expect('#').        self.child.sendline('cmd3').        self.child.expect('&gt;').        #self.child.sendline('cmd4').        #self.child.expect('&gt;').        #self.child.sendline('cmd5').        #self.child.expect('&gt;').        self.child.sendline('cmd6').        self.child.expect('&gt;').        self.child.sendline('cmd7').        self.child.expect('&gt;').        self.child.sendcontrol('m').        self.child.sendline('cmd8').        self.child.expect('&gt;').        self.child.expect(pexpect.eof, timeout=60).        #self.child.sendline('exit').        #self.child.expect('#').        #self.child.sendcontrol('m').        #self.child.expect('#').        #self.child.sendline('exit').        #self.child.interact()..    def stop(self):.        return 1...class secondclass():.    # some code here.    pass...# threaded module.firstclass = base_thread(someclass).secondclass = base_thread(secondclass)...if you see it, i am running both the ssh class in a 2 different threads...the program works fine to an extent, when i am running the commands in secondclass, i am able to log the data to the log files. but the problem is, i am not getting the logs completely. at some point of time, the first thread terminates. ..i do not know how to solve this problem...also, i want to run a series of command, once all the commands in the second ssh session gets done. is it possible ?..thanks,."
