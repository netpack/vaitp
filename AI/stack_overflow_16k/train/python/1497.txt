"blank class inheritance: recursion error i'm trying to wrap my head around classes and i don't see what i have done wrong in this script.  i have built a few nested classes. ..import random..class account(object):.    num_accounts = 0.    def __init__(self, name, balance):.    self.name = name.    self.balance = balance.    account.num_accounts += 1.def withdraw(self, amt):.    self.balance = self.balance - amt.def inquiry(self):.    return self.balance..class evilaccount(account):.def __init__(self,name,balance,evilfactor):.    account.__init__(self,name,balance).    self.evilfactor = evilfactor.def inquiry(self):.    if random.randint(0,4) == 1:.        return self.balance * self.evilfactor.    else:.        return self.balance..class moreevilaccount(evilaccount):.    def deposit(self,amount):.        self.withdraw(5.00).        evilaccount.deposit(self,amount)..class withdrawcharge(object):.    fee = 2.50.    def withdraw_fee(self):.        self.withdraw(self.fee)..class mostevilaccount(evilaccount, .withdrawcharge):.def withdraw(self,amt):.    self.withdraw_fee().    super(mostevilaccount,self).withdraw(amt)...and then i instantiate it all with ..d = mostevilaccount(""dave"", 500.00, 1)...and everything is fine.  but when i try to call an inherited method:..d.withdraw(5.00)...i get recursion errors!..  file ""stacko.py"", line 37, in withdraw.   self.withdraw_fee().  file ""stacko.py"", line 33, in withdraw_fee.    self.withdraw(self.fee).  file ""stacko.py"", line 37, in withdraw.    self.withdraw_fee().recursionerror: maximum recursion depth exceeded...this is right out of blank essential reference by david m. beazley, p121...why am i getting recursion errors?"
