"switching off debug prints sometimes i have a lot of prints scattered around function to print debug output..to switch this debug outputs i came up with this:..def f(debug=false): .    print = __builtins__.print if debug else lambda *p: none...or if i need to print something apart from debug message, i create dprint function for debug messages...the problem is, when debug=false, this print statements slow down the code considerably, because lambda *p: none is still called, and function invocation are known to be slow...so, my question is: is there any better way to efficiently disable all these debug prints for them not to affect code performance?....all the answers are regarding my not using logging module. this is a good to notice, but this doesn't answer the question how to avoid function invocations that slow down the code considerably - in my case 25 times (if it's possible (for example by tinkering with function code object to through away all the lines with print statements or somehow else)). what these answers suggest is replacing print with logging.debug, which should be even slower. and this question is about getting rid of those function calls completely...i tried using logging instead of lambda *p: none, and no surprise, code became even slower.....maybe someone would like to see the code where those prints caused 25 slowdown: http://ideone.com/n5pgu..and i don't have anything against logging module. i think it's a good practice to always stick to robust solutions without some hacks. but i thinks there is nothing criminal if i used those hacks in 20-line one-time code snippet.....not as a restriction, but as a suggestion, maybe it's possible to delete some lines (e.g. starting with print) from function source code and recompile it? i laid out this approach in the answer below. though i would like to see some comments on that solution, i welcome other approaches to solving this problem."
