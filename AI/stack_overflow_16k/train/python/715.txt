"blank elementtree and mutability what am i doing wrong with blank (2.7) here?..i am using element trees to store xml data. my class constructor takes a class instance with element tree attribute (sw is the class insance, sw.instance is the element tree) as a parameter, adds an element to it and stores it in a class variable self.software. this is the class constructor:..import xml.etree.elementtree as elt.class myclass(object):.    def __init__(self, bd, sw, name):.        itmp = sw.instance.        print ""before %s"" % elt.tostring(itmp).        y = elt.subelement(itmp, ""name"").        y.text = name.        self.software = itmp.        print ""after %s"" % elt.tostring(sw.instance)...the problem is, in addition of storing the modified sw to self.software, it also changes sw.instance. so when i use this to create two classes..foo = myclass(x, mysoftwareclass, ""foo"").bar = myclass(y, mysoftwareclass, ""bar"")...the foo instance is fine but bar instance contains two ""name"" elements. the first call to myclass appears to modify the mysoftwareclass instance. i have confirmed this with the before and after print statements. ..i sort of thought mysoftwareclass would be immutable when called like this.  i can of course use a workaround and create two identical software class instances, to pass one to foo and one to bar, but i am curious what happens here."
