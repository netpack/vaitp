"make function execution verbose by verbose-__enter__-like mechanism i want to make a class' functions verbose without adding logging / prints in each one...as an example i created a verbose class:..in [2]: class verbose(object): .   ...:     def __init__(self, name='default name'): .   ...:         self._name = name .   ...:     def __enter__(self, *a, **kw): .   ...:         print('entering &lt;{}&gt;'.format(self._name)) .   ...:     def __exit__(self, *a, **kw): .   ...:         print ('exiting &lt;{}&gt;'.format(self._name)) .in [5]: with verbose('hi'): .   ...:     pass .   ...:                                                                                                                                                                  .entering &lt;hi&gt;.exiting &lt;hi&gt;...this is really helpful in the logs, as i can see each with i used. however, my code is full of methods, and i want a sort of template function, that each function would ""inherit"" (is that even possible in blank? function inheritance?) that would be verbose...i'm thinking of sort of a super-class for functions, that i can override methods such as on-call and on-exit. is that possible?..how i imagine it will look at the end:..class foo(object):.    def x(self):.       print ('doing things...')..foo().x().... &lt;foo.x&gt; was called.... doing things.... &lt;foo.x&gt; has finished"
