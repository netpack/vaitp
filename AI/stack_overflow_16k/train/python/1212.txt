"blank class structure i am trying to make my new code as user friendly as possible and what i would have in mind for the particular problem i am facing atm is this:..suppose we have..import numpy as np..class testclass:..    def __init__(self, data):.        self.data = data..    @property.    def method_a(self):.        return np.median(self.data)..    @property.    def method_b(self):.        return np.mean(self.data)..foo = testclass([1, 2, 5, 7, 12, 6, 3, 37, 16]).print(foo.method_a).print(foo.method_b)...everything is fine so far. method a gives me the median, method b the mean...during processing i will switch depending on circumstances between both methods. so sometimes i will call method a, sometimes method b. .however, what i want is then to continue with a method c, that acts upon the result of either method a or b in such a way..final_result = foo.method_a.method_c...or..final_result = foo.method_b.method_c...i know it is possible to write method c as a function and do it like this:..final_result = method_c(foo.method_a).final_result = method_c(foo.method_b)...but i think it would make the code easier to read if i could apply method c as stated above...is this possible somehow?..thanks"
