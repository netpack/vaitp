"why does blank dict behave this way? i have some code written like so:..class invite(models.model):.    state_unknown = 0.    state_will_play = 1.    state_wont_play = 2.    state_ready = 3.    state_choices = ((state_unknown, _(""unknown"")),.                     (state_will_play, _(""yes, i'll play"")), .                     (state_wont_play, _(""sorry, can't play"")),.                     (state_ready, _(""i'm ready to play now""))).    ......    def change_state(self, state):.        assert(state in dict(invite.state_choices))...this code works like i want it to, but i'm curious as to why it works this way.  it is admittedly very convenient that it does work this way, but it seems like maybe i'm missing some underlying philosophy as to why that is...if i try something like:..dict((1,2,3), (2,2,3), (3,2,3)).valueerror: dictionary update sequence element #0 has length 3; 2 is required...it doesn't create a dict that looks like..{1: (2,3), 2: (2,3), 3: (2,3)}...so the general pattern is not to take the first part of the tuple as the key and the rest as the value.  is there some fundamental underpinning that causes this behavior, or it is just, well, it would be convenient if it did...."
