"how to use the root package in an import? taking the ansible project as an example, there is, inside the lib/ansible root directory, many other packages, like this..ansible/cli.       /errors.       /...many omitted for brevity.       /utils.       /vars.       __init__.py...as an example, from ansible/utils/vars.py, the imports start at the root ansible/lib directory, such as..   from ansible.errors import ansibleerror...and..from ansible.errors import ansibleerror...rather than..from errors import ansibleerror etc....i have a demo project with a directory structure like this..beatles/george/harrison.py.       /george/__init__.py.       /john/lennon.py.       /john/__init__.py.       /ringo/starr.py.       /ringo/__init__.py.       /paul/mccartney.py.       /paul/__init__.py.       __init__.py (this __init__.py file is in the beatles dir).       helpers.py...so, using the ansible example, i tried (in file john/lennon.py) to do..from beatles.george.harrison import guitar..but i get an error `no module named beatles.george.harrison..however, the code works fine if i omit the beatles package (the equivalent of ansible in the ansible project)..from george.harrison import guitar..how come, with my directory structure, i am not able to code the import as..from beatles.george.harrison import guitar...from the beatles/john/lennon.py file? if possible, please explain with reference to the ansible project so it's clear why it works in one situation but not the other...&gt;&gt;&gt; from beatles.john.lennon import guitar traceback (most recent call last): file ""&lt;stdin&gt;"", line 1, in &lt;module&gt; importerror: no module named beatles.john.lennon .&gt;&gt;&gt; from john.lennon import guitar &gt;&gt;&gt; guitar &lt;class 'john.lennon.guitar'&gt;"
