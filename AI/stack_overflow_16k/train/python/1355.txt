"having trouble with the chronological order in my code i'm doing a queue simulation that handles one customer at a time....the time that one errand takes is two minutes,.and the customers enters the post office at random with the.probability 0.2/minute..the customers errands are also randomized.....  my problem is that the time that it takes to handle the customer when.  there is a queue, isn't correct....i'm thinking of taking the last customers out_time and make that the next customers in_time (the time that he start getting served by the clerk)...for example: .time 1: customer 1 comes in with 2 errand(s)..time 1: customer 2 comes in with 1 errand(s)..time 5: customer 1 leaves..time 6: customer 2 leaves. &lt;--- wrong..should be time 7:  customer 2 leaves. ..import random as rn..class post_office:.    def __init__(self):.        self.customer_in_queue = 0..        self.clock = 0.        self.open= 540  #opens 9am.        self.close = 1080 #closes 18pm.        self.time_in = self.generate_incoming().        self.time_out = float('inf').        self.customernr_in = 0.        self.customernr_out = 0.        self.total_wait = 0...    def add_time(self):.        t_event = min(self.time_in, self.time_out)..        self.total_wait += self.customer_in_queue*(t_event-self.clock).        self.clock = t_event..        if self.time_in &lt;= self.time_out:.            self.handle_in_custom().        else:.            self.handle_out_custom()...    def handle_in_custom(self):.        self.customer_in_queue +=1.        self.customernr_in +=1.        text = ''..        errands = self.generate_errands()..        if self.customer_in_queue &lt;=1:.            self.time_out = self.clock + (errands*2).            text = 'and is immediately served'.        else:.            text = ' queuing as '+str(self.customer_in_queue).        self.time_in = self.clock + self.generate_incoming()..        print('time', str(self.clock), 'customer came', str(self.customernr_in),'in with',.              str(errands),'errands', text)..    def handle_out_custom(self):.        self.customer_in_queue -= 1.        self.customernr_out += 1.        text = ''..        if self.customer_in_queue &gt; 0:.            self.clock = self.time_out + self.generate_errands().            text = self.clock.        else:.            self.time_out = float('inf').            text = self.clock..        print('time', str(text), ' customer', str(self.customernr_out),'left')..    def generate_incoming(self):..        return int(rn.expovariate(0.2))..    def generate_errands(self):.        rand = rn.random().        errands = 1                                                     .        chance = 0.5                                                         .        while chance &gt; rand:.                errands = errands + 1                                       .                chance = chance / 2                                          ..        return errands..p = post_office()..for minute in range(p.clock, p.close):.    minute +=1.    p.add_time()..print('total amount of customers:', str(p.customernr_in), 'total wait per customer:',str(p.total_wait/p.customernr_in))"
