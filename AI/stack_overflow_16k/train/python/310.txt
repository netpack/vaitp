"working with list of tuples embedded in a list of dictionaries in blank i am in a beginning coding class and i can not seem to turn the basics i'm taught into a working program with a list this complicated. what functions should i be using to do this?..at this point we have not discussed importing any extra features (numpy etc) and i know people use lambda a lot (though i don't really understand what it does), but that has not been introduced in this class. ..#this is an example of the structure of a student dictionary.#they have an id number.#they have a first name, last name and a list of assignments.#assignments are tuples of an assignment name and grade.#the grade is a 4 point scale from 0 to 4.'''.student_list = [{'id': 12341, 'first_name': 'alice', 'last_name': 'anderson',.     'assignments': [('assignment_1', 0), ('assignment_2', 2), ('assignment_3', 4)]},.. {'id': 12342, 'first_name': 'boris', 'last_name': 'bank',.   'assignments': [('assignment_1', 1), ('assignment_2', 3), ('assignment_3', 0)]},.. {'id': 12343, 'first_name': 'carl', 'last_name': 'cape',.   'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]},.. {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson',.   'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]},.. {'id': 12345, 'first_name': 'ed', 'last_name': 'enders',.   'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}]..#this function should return a list of the n student dictionaries with the.#highest grades on the assignment passed in as assignment name.#if there is a tie then it is broken by returning the student(s) with the.#lowest id number(s).def highest_n_grades(students, assignment_name, n):...edit..sorry, i'm not trying to get an answer. i see how that looks. i feel like i've written out and deleted a million things and that's my problem. i'm having trouble even getting started...i was hoping for a point in the right direction in terms of maybe what commands can grab highest grades etc. all i really have so far is something like:..def highest_n_grades(student_list):.  for s in student_list:.    for assignment_name, grade in s['assignments']:.        if int(grade) &gt;= 4:.            print(assignment_name, grade)..highest_n_grades(student_list)...but i know that's not even really getting me started. it doesn't have three inputs and it's not looking for the max, it's looking for the manually entered value 4, and it's not even coming close to tying at back to student names or making another list. ..edit 2..also tried that gave an error i was trying to sort the dictionary rather than the list. ..def highest_n_grades(student_list, assignment_name):.  for s in student_list:.    for assignment_name in s['assignments'][1]:.      s['assignments'][1] = assignment_name.      s.sort(key=assignment_name).    print(student_list)..highest_n_grades(student_list, assignment_name='assignment_1' )...edit 3..ok, i've maybe made a little headway? ..newlist2 = sorted(newlist, key=lambda k: k['assignments'][0], reverse = true).newlist3 = sorted(newlist, key=lambda k: k['assignments'][1], reverse = true).newlist4 = sorted(newlist, key=lambda k: k['assignments'][2], reverse = true)...these seem to be sorting by assignment. i don't understand what lambda is doing, but i at least can generate a list with the highest grade coming up first. i think that's a baby step. ..edit 4..here is a function i created. it seems to get me what i want, it outputs the highest 3 students, but it prints it 5 times? and i know this isn't really flexible but it's a start. ..def highest_n_grades(student_list,  n):.  for s in student_list:.    newlist = sorted(student_list, key=lambda k: k['assignments'][0], reverse=true).    print(newlist[:n])..highest_n_grades(student_list, 3)...output: ..[{'id': 12345, 'first_name': 'ed', 'last_name': 'enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'carl', 'last_name': 'cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}].[{'id': 12345, 'first_name': 'ed', 'last_name': 'enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'carl', 'last_name': 'cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}].[{'id': 12345, 'first_name': 'ed', 'last_name': 'enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'carl', 'last_name': 'cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}].[{'id': 12345, 'first_name': 'ed', 'last_name': 'enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'carl', 'last_name': 'cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}].[{'id': 12345, 'first_name': 'ed', 'last_name': 'enders', 'assignments': [('assignment_1', 4), ('assignment_2', 1), ('assignment_3', 3)]}, {'id': 12344, 'first_name': 'didi', 'last_name': 'dawson', 'assignments': [('assignment_1', 3), ('assignment_2', 0), ('assignment_3', 2)]}, {'id': 12343, 'first_name': 'carl', 'last_name': 'cape', 'assignments': [('assignment_1', 2), ('assignment_2', 4), ('assignment_3', 1)]}]"
