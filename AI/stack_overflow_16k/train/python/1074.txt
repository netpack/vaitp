"how to delete an element of an iterator object in a for loop this is super simple..import xml.etree.elementtree as et.tree = et.parse('country_data.xml').root = tree.getroot().delete = false.for child in root:.    if delete:.        root.remove(child).        continue.    if child.getchildren():.        delete = true...what i want, is to keep the first child and remove all subsequent ones...but here only ""alternating"" elements are deleted...with normal sequences we could use..for child in root[:]:...or in cases of objects we could use ..from copy import deepcopy.for child in deepcopy(root):...but if i do that, i don't get the child instance of 'root' but only child instance of the copy, so i can't use it to delete root's children...please any ideas ?..ps: i use child.getchildren() because i need to keep the first child that has children of its own...edit..inspired by ashalynd's comment below i tried simple slicing..for child in root[:]:...it worked. i was occupied with the idea that since root is an instance, slicing won't work...but now i wonder why the following didn't work ?..from copy import copy.for child in copy(root):...since shallow copy is essentially slicing itself."
