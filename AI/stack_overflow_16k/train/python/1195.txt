"get __file__ of the importing file say there is a file tree of:..sample_module.  |___ file1.py.  |___ file2.py...how can i get file2's __file__, from a function in file1?..file1.py:..def get_file_path():.    return __file__...file2.py..from sample_module.file1 import get_file_path.print(get_file_path())..# c:/.../sample_module/file1.py...how can i make it give me c:/.../file2.py?..i understand that the function get_file_path is saving the __file__ into its namespace, and is not generating a new __file__. is there a way to make __file__ callable, or get the __file__ at runtime?....why i need it?..i have a library, with a logging module, that generates a logger...i want the location of that logger to be e.g. 2 folders above file importing generate_logger..i'd rather not the user have to specify __file__ each time they want to use it..is there a better way?..i.e. in mylibrary/logs.py..def generate_logger(logname=__name__, level=logging.debug, path=''):.    """"""creates a logger instance. set level of file handler..    """""".    logger = logging.getlogger(logname).    if path == '':.        path = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../logs')).    fh = logging.filehandler(f'{path}/{logname}.log').    ## rest of logging code..    return logger...-.. project.  |___ project.  |      |__ log.  |            |__ loads_generate_logger (code that does the import).  |_______logs.            |_logname.log (creates a log folder 2 folders above where it was imported).       ...in loads_generate_logger.. from mylibrary import generate_logger(). logger = generate_logger(). # logger path = c:/.../venv/lib/site-packages/mylib-0.10/logs"
