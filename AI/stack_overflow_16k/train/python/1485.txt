"how to read a simple binary file i have a binary file that consists of consecutive binary subsequences of fixed and equal length. each subsequence can be unpacked into the same number of values. i know the length of each subsequence and the binary format of the values....  how can i work through the binary file, chopping out the subsequences,.  unpacking their content and write them out as csv as i go....i know how to write out as csv. my problem is the reading from file and unpacking part.  this is my non-working code...import csv.import sys.import struct.writer = csv.writer(sys.stdout, delimiter=',', quoting=csv.quote_none,escapechar='\')  .?  rows = sys.stdin. ?.?  header = id, time .....? write the header with csv.i = 0.for row in rows:.    unpacked_row = unpack('qqqqddibibcsbshlshhlqb',row).    writer.writerow(unpacked_row).    i += 1.....possible solution using reading binary file in blank and looping over each byte and the answer of ignacio...first calculate chunksize = struct.calcsize()..def bytes_from_file(filename, chunksize=8192):.    with open(filename, ""rb"") as f:.        while true:.            chunk = f.read(chunksize).            if chunk:.                yield chunk.            else:.                break..# example:.for chunk in bytes_from_file('filename'):.#        row = unpack(chunk).#        write out row as csv"
