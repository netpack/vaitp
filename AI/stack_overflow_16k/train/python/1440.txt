"refactor a functional interface i have a functional interface to a backend library, which looks like this:..def func1(*pars, **kwargs):.    be = backend(...).    result = be.do_something(...).    result = adapt(result).    ....    return result...the backend interface has changed a bit (a new config parameter is needed), so that now i need to refactor to something like:..def func1(config, *pars, **kwargs):.    be = backend(config, ...).    result = be.do_something(...).    result = adapt(result).    ....    return result...i would need to change all functions in my interface to accept and pass this new config parameter. do you have a better suggestion on how to proceed with this refactoring, so that:...minimizes changes.allows for easier future refactorings, where more parameters can be required by the backend...in general, do you have some pointers on how to provide clean functional interfaces in blank?"
