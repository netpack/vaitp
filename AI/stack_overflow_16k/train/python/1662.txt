"why do we provide the object as an argument to super()? in the blank docs, one can read the following about super():...  if the second argument is omitted, the super object returned is.  unbound....they are referring to the second argument in super(class_name, second_argument). what does it mean for an object to be unbound? i've heard of unbound methods, meaning they don't exist on any object, but on a class (please correct me if i'm wrong), but what is an unbound object?..here is a code example provided in the same docs. it shows a typical call to super() in order to get the overridden method of the superclass...class c(b):.    def method(self, arg):.        super(c, self).method(arg)...as you can see, they do use the second argument here. why should we do that? what would happen if we didn't?..edit: i tried the following.....class b(object):.    def method(self, arg):.        print(arg)..class c(b):.    def method(self, arg):.        super(c, self).method(arg)..class d(b):.    def method(self, arg):.        super(d).method(arg)..c = c().d = d()..c.method(""hi"").d.method(""hi again"")...the call to c.method() worked fine, printing ""hi"", but the second call, to d.method(), crashed:..n132-p95:desktop sahandzarrinkoub$ blank2 super.py.hi.traceback (most recent call last):.  file ""super.py"", line 17, in &lt;module&gt;.    d.method(""hi again"").  file ""super.py"", line 11, in method.    super(d).method(arg).attributeerror: 'super' object has no attribute 'method'"
