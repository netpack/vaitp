"how to add a reader macro to blank? background..in verilog, i can specify binary numbers using expressions including underscores.  for example:..12'b1100_0111_0001 == 12'b110001110001  // the underscores are ignored...i find this a nice feature and would like to add it to blank so i can write something like:..x = 0b1100_0111_0001.y = 0x3fff_cc00...in lisp, i could do this using something like set-dispatch-macro-character to be able to edit the source before it is compiled by means of a reader macro...question..what is a good way of adding a lisp-like reader macro in blank?..i would be equally happy with suggestions to fix the problems with my current approach or with a completely different approach...what i've tried..i've tried adding a custom finder object to sys.meta_path.  this almost works except for two problems:...when i import a module with my custom finder, it doesn't store a pyc compiled representation of the file.ideally i would like the reader macro to apply to the rest of the toplevel file, rather than have to put my code into a separate file ""verilog_test_code.py""...source code..verilog_test_code.py..def run_test():.    return 0b1100_0111_0001+0x3fff_cc00...toplevel.py..import remove_underscores.import verilog_test_code.print verilog_test_code.run_test()...remove_underscores.py..import tokenize,sys,imp..def remove_underscores(src):.    """"""remove underscores from hexadecimals."""""".    result = [].    g = tokenize.generate_tokens(src.readline)   .    for toknum, tokval, _, _, _  in g:.        if toknum == tokenize.name and tokval[0]=='_' and result and result[-1][0]==tokenize.number:.            result[-1][1] = str(result[-1][1]) + tokval[1:].replace('_','').        else:.            result.append([toknum, tokval]).    return tokenize.untokenize(result)...class my_finder_loader(object):..    def is_package(self, fullname):.        return false..    def get_code(self, fullname):.        return compile(self.get_source(fullname),fullname,'exec')..    def get_source(self, fullname):.        (src, pathname, description) = imp.find_module(fullname).        srctext = remove_underscores(src).        src.close().        return srctext..    def load_module(self, fullname):.        if fullname in sys.modules:.            return sys.modules[fullname].        code = self.get_code(fullname).        mod = sys.modules.setdefault(fullname, imp.new_module(fullname)).        mod.__file__ = ""&lt;%s&gt;"" % self.__class__.__name__.        mod.__loader__ = self.        mod.__package__ = ''.        exec(code, mod.__dict__).        return mod..    def find_module(self, fullname, path=none): .        if not fullname.startswith('verilog_'):.            return none.        return self..sys.meta_path.append(my_finder_loader())"
