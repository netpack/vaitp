"extending base classes in blank i'm trying to extend some ""base"" classes in blank:..class xlist (list):.    def len(self):.        return len(self)..    def add(self, *args):.        self.extend(args).        return none...class xint (int):.    def add(self, value):.        self += value.        return self...x = xlist([1,2,3]).print x.len()   ## &gt;&gt;&gt; 3 ok.print x         ## &gt;&gt;&gt; [1,2,3] ok.x.add (4, 5, 6).print x         ## &gt;&gt;&gt; [1,2,3,4,5,6] ok..x = xint(10).print x         ## &gt;&gt;&gt; 10 ok.x.add (2).print x         ## &gt;&gt;&gt; 10  # not ok (#1)..print type(x)         ## &gt;&gt;&gt; &lt;class '__main__.xint'&gt; ok.x += 5.print type(x)         ## &gt;&gt;&gt; &lt;type 'int'&gt;  # not ok (#2)...it works fine in the list case because the append method modifies the object ""in place"", without returning it. but in the int case, the add method doesn't modify the value of the external x variable. i suppose that's fine in the sense that self is a local variable in the add method of the class, but this is preventing me from modifying the initial value assigned to the instance of the class...is it possible to extend a class this way or should i define a class property with the base type and map all the needed methods to this property?"
