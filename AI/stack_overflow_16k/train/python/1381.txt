"blank - flow control when executing multiple functions inside a function .i've been writing some blank app and unfortunately i stumbled upon (i believe...) a design pattern/flow control problem. ..let's say that i have some big function that includes multiple other function and outcome of the big function is strictly determined by small function success...so the big function simply contains a series of operations... if just one small function fails then we should abort the big function, unfortunately the deeper we go... then the small functions make more modifications to some objects, so i think that i just cannot abort the big function, because i have to revert/repair some of those unfinished changes made by small functions - ""perform cleanup"". ..is there a blankic way to check/control execution of small functions inside a big function? because the solution that i have now seems extremely ugly and not very zenish.....here is some pseudo code that represents the solution that i have now:..def small_func():.    try:.        # doing something here.        return true # if operation successful.    except error:.        return false....def big_func():.    # state var helping determine if we need to cleanup if some of the .    # funtions were unsuccessful.    state = true..    if not  small_func1():.        state = false.    if not  small_func2():.        state = false   .    if not  small_func3():.        state = false   .    if not  small_func4():.        state = false.    if not  small_func4():.        state = false.    etc......    if not state:.        #perform some cleanup after failed function since we can't.        #finish the big function  - we need to abort and clean unfinished stuff"
