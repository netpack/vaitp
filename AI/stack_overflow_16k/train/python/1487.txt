"unexpected output when printing an array i'm trying to find the minimum of an array and print it. easy right? apparently not. my code:..array = generateatoms(num).arraypoints, varraysum = movemolecule(array, numsteps=steps).plotsetup(arraypoints).#print varraysum.print min(varraysum), "" kj/mol is the minimum potential achieved""...i expect my answer to be in the range of -0.19. if i don't print the print statement above, my output is around 9,000,000 kj/mol. if i do print it, my print statement is as expected...here is an example of varraysum (if i run the print):..[88824.74221919772, 18198.301666484836, 3531.2537391848105, 3531.2537391848105, .3531.2537391848105, 16.432760713742276, -0.09559319207145775, -0.09559319207145775, .-0.19379982167330503, -0.19379982167330503, -0.19379982167330503, -0.19379982167330503, .-0.19379982167330503, -0.19379982167330503, -0.19379982167330503, -0.19379982167330503, .-0.19379982167330503, -0.19379982167330503, -0.19379982167330503, -0.19379982167330503]...how is my output changing when i ""observe"" it (using print)? i'm at a complete loss. to add, the 9 million number is not the same number every time, but is around 9 million each time...edit2:..def movemolecule(array, numsteps):.# moves molecules in random directions by adding random array.# will not move points if potential of system increases.points = [].varray = [].varraysum = [].progress = 0..points.append(array).for i in range(numsteps):.    addarray = np.random.uniform(low=-0.2, high=0.2, size=(num,3)).    if sumv(np.add(array, addarray)) &lt; sumv(array):.        array = np.add(array, addarray).    else: .        array = array.    points.append(array).    varray.append(varrays(array)).    varraysum.append(sumv(array))..    # updates progress bar.    progress = updateprogressbar(progress, i, numsteps)..plotv(points, varray)..return points, varraysum...edit3:..def functionv(r):.# function to calculate lj potential.return ((4 * _e) * (((_d / r) ** 12) - ((_d / r) ** 6)))...def sumv(array):.# uses nn search to calculate sum of potential of system.v = []..# performs nn search to collect nearby radii.points = nnsearchsetup(array)..radius  = nnsearch(points)..# calculate potential for nns.for r in radius:.    v.append(functionv(r)).return sum(v)"
