"what's wrong with this usage of select()? basically i wanted to write a function that will merge stdout and stderr of subprocess.popen (or in general case of any input file descriptors) into one generator that gives me (file_descriptor, line)  tuples...my first attempt looked like this:.    from select import select.    import subprocess..def _merge_proc_output( process ):.    inputs = (process.stdout, process.stderr).    while process.poll() is none:.        for f in select(inputs , (), () )[0]:.            line = f.readline().            if len(line): yield f, line...it seemed to work most of the time. for i.e. 10 runs only one gets corrupted (point is that it is random). occasionally it misses some lines and i think it is always lines at the end. unfortunately it is not something that i was able to reproduce consistently, so it is very hard to debug...can anyone see what is the issue with above code that would cause it to drop lines from the end of one of streams?..currently i use more resource hungry and verbose code, but more portable:..import subprocess.import threading.from queue import queue..def _merge_proc_output( process ):.    q = queue().    def push(fd):.        for l in fd:.            q.put((fd, l)).        q.put(none)..    pipes   = (process.stdout, process.stderr).    threads = [ threading.thread( target = push, args = (fd,) ) for fd in pipes ]..    [ t.start() for t in threads ]..    for t in threads:.        while true:.            w = q.get().            if w is none:.                break.            yield w..    [ t.join() for t in threads ]...and this seems to work fine (or at least i haven't noticed issues yet). still i would like to know what is wrong with my original code...p.s. if you see issues with second solution please do comment on that also...edit:.hm, possibly i have an idea why it happens. assuming my observation about only last lines missing it might be that process.poll() returns something, but there is still stuff in output buffers for those streams..i have modified my original function by adding loop that tries to read everything from output streams:..def _merge_proc_output( process ):.    inputs = (process.stdout, process.stderr).    while process.poll() is none:.        for f in select(inputs , (), () )[0]:.            line = f.readline().            if len(line): yield f, line.    for i in inputs:.        for l in i:.            yield i,l...i have to have a bit of play to check if this fixes my issues."
