"create a random order of (x, y) pairs, without repeating/subsequent x's say i have a list of valid x = [1, 2, 3, 4, 5] and a list of valid y = [1, 2, 3, 4, 5]...i need to generate all combinations of every element in x and every element in y (in this case, 25) and get those combinations in random order...this in itself would be simple, but there is an additional requirement: in this random order, there cannot be a repetition of the same x in succession. for example, this is okay:..[1, 3].[2, 5].[1, 2].....[1, 4]...this is not:..[1, 3].[1, 2]  &lt;== the ""1"" cannot repeat, because there was already one before.[2, 5].....[1, 4]...now, the least efficient idea would be to simply randomize the full set as long as there are no more repetitions. my approach was a bit different, repeatedly creating a shuffled variant of x, and a list of all y * x, then picking a random next one from that. so far, i've come up with this:..import random..output = [].num_x  = 5.num_y  = 5..all_ys = list(xrange(1, num_y + 1)) * num_x..while true:.    # end if no more are available.    if len(output) == num_x * num_y:.        break..    xs = list(xrange(1, num_x + 1)).    while len(xs):.        next_x = random.choice(xs).        next_y = random.choice(all_ys)..        if [next_x, next_y] not in output:.            xs.remove(next_x).            all_ys.remove(next_y).            output.append([next_x, next_y])..print(sorted(output))...but i'm sure this can be done even more efficiently or in a more succinct way?..also, my solution first goes through all x values before continuing with the full set again, which is not perfectly random. i can live with that for my particular application case."
