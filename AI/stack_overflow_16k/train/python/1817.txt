"blank parent class modifiable by child class or dynamic attribute? so i am not even sure if what i want to do is possible but i thought i would ask and find out...i want to build a chef ""databag"" via blank. this is pretty much just a blank dictionary. there are other things that need to happen with this databag that are encapsulated in the databag class. ..now for the meat of the question....i want to add key/values to this dictionary but need to build it in a way that is easily extensible. note: the autodict is a class that makes it so you can build a dictionary using dot notation...here is what i am trying to do:..databag = databag(.  loggroup=sub(""xva-${environment}-${uniqueid}-mygroup""),.  runlist=[.    ""mysetup::default"",.    ""consul::client"".  ].).databag.consul()  &lt;-- trying to add consul key/values to databag.print(databag.to_dict()).print(databag.to_string_list())...so you can see how i add the ""consul"" key values to the already existing databag object...here are the class definitions. i know this is wrong which is why i am here to see if this is even possible...databag class..class databag(object):..def __init__(self,uniqueid=ref(""uniqueid""),environment=ref(""environment""),loggroup=none,runlist=[]):.    self.databag = autodict().    self.databag.uniqueid = uniqueid.    self.databag.environment = environment.    self.databag.log.group = loggroup.    self.runlist=runlist..def to_string_list(self):.    return self.convert_databag_to_string(self.databag)..def to_dict(self):.    return self.databag..def get_runlist(self):.    return self.convert_to_runlist_string(self.runlist)...consul class..class consul(databag):..  def __init__(self, loggroup=none):.      if loggroup == none:.          databag.consul.log.group = databag.log.group.      else:.          databag.consul.log.group = loggroup...as you can see the consul class is supposed to access the databag dictionary of the databag class and add the ""consul"" variables, almost like an attribute. however, i don't want to add a new function to the databag class every time otherwise that class will end up being very, very large."
