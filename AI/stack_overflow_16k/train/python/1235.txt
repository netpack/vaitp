"blank class objects appending to list i have a list of class objects that i would like to distribute to other lists as objects and then these lists should be called to provide interaction with the objects within...the issue that i cannot overcome at the moment is when trying to append the objects with a for loop from the first list to the second one and instead getting the new list populated with the class objects i get their pointers to the memory...this is currently running on blank 3.x if any difference...i have seen some cases where the suggestion is to play with  __str__   and.__repr__ but i don't come to a solution for my case...class robot():.    """"""test class"""""".    def __init__(self, age):.        self.age = age..r = robot(10).r1 = robot(15)..mylist1 = [r, r1].mylist2=[]..for item in mylist1:.    mylist2.append(item).print(mylist2)...i would expect to get something like [r, r1]..this is the result i get instead:..[&lt;__main__.robot object at 0x000001285cee33c8&gt;, &lt;__main__.robot object at 0x000001285cee3748&gt;]"
