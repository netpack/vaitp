"simple blank plugin system i'm writing a parser for an internal xml-based metadata format in blank. i need to provide different classes for handling different tags. there will be a need for a rather big collection of handlers, so i've envisioned it as a simple plugin system. what i want to do is simply load every class in a package, and register it with my parser. .my current attempt looks like this:.(handlers is the package containing the handlers, each handler has a static member tags, which is a tuple of strings)..class metadataparser:.    def __init__(self):.        #....        self.handlers={}.        self.currenthandler=none.        for handler in dir(handlers): # make a list of all symbols exported by handlers.            if handler[-7:] == 'handler': # and for each of those ending in ""handler"".                handlermod=my_import('metadataloader.handlers.' + handler).                self.registerhandler(handlermod, handlermod.tags) # register them for their tags..    # .....    def registerhandler(self, handler, tags):.        """""" register a handler class for each xml tag in a given list of tags """""".        if not issequencetype(tags): .            tags=(tags,) # sanity check, make sure the tag-list is indeed a list.        for tag in tags:.            self.handlers[tag]=handler...however, this does not work. i get the error attributeerror: 'module' object has no attribute 'tags'.what am i doing wrong?"
