"how can i get the values of the locals of a function after it has been executed? suppose i have a function like f(a, b, c=none). the aim is to call the function like f(*args, **kwargs), and then construct a new set of args and kwargs such that:...if the function had default values, i should be able to acquire their values. for example, if i call it like f(1, 2), i should be able to get the tuple (1, 2, none) and/or the dictionary {'c': none}..if the value of any of the arguments was modified inside the function, get the new value. for example, if i call it like f(1, 100000, 3) and the function does if b &gt; 500: b = 5 modifying the local variable, i should be able to get the the tuple (1, 5, 3)....the aim here is to create a a decorator that finishes the job of a function. the original function acts as a preamble setting up the data for the actual execution, and the decorator  finishes the job...edit: i'm adding an example of what i'm trying to do. it's a module for making proxies for other classes....class spam(object):.    """"""a fictional class that we'll make a proxy for"""""".    def eggs(self, start, stop, step):.        """"""a fictional method"""""".        return range(start, stop, step)..class proxyforspam(clsproxy.proxy):.    proxy_for = spam.    @clsproxy.signature_preamble.    def eggs(self, start, stop, step=1):.        start = max(0, start).        stop = min(100, stop)....and then, we'll have that:..proxyforspam().eggs(-10, 200) -&gt; spam().eggs(0, 100, 1)..proxyforspam().eggs(3, 4) -&gt; spam().eggs(3, 4, 1)"
