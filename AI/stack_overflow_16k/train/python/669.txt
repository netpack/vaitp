"blank - 'nonetype' object has no attribute i'm new with blank/programming and trying to solve little problems to get a hang of it..i've been struggling with the error below and not too sure how i got it. i understand it is saying the file type is none which is why it's throwing the error. however, i don't get how it is none in the first place? just wondering if i could get some guidance or hint on the issue? thank you very much, sorry if the code is messy...  line 138, in move.      self.ecolist[self.temp].np = tempani.p attributeerror: 'nonetype' object has no attribute 'np'...    from random import randint.class bears:.  def __init__(self):.    self.p = 0.    self.dp = 0.    self.np = 0.    self.check = true..  def run(self):.    self.dp = randint(-1, 1).    self.np = self.dp + self.p.    self.check = false.  def __str__(self):.    return ""bear_"".  def __repr__(self):.    return self.__str__().class fish:.  def __init__(self):.    self.p = 0.    self.dp = 0.    self.np = 0.    self.check = true..  def run(self):.    self.dp = randint(-1, 1).    self.np = self.dp + self.p.    self.check = false.  def __str__(self):.    return ""fish|"".  def __repr__(self):.    return self.__str__().class ecosystem:.  def __init__(self):.    self.ecolist = [none] * 10.    self.bearlist = [].    self.fishlist = []..    for i in range(2):.        self.bearlist.append(bears()).        #adding bear to ecolist.        while true:.            index = randint(0, 9).            if self.ecolist[index] is none:.                self.ecolist[index] = self.bearlist[i].                self.ecolist[index].p = index.                break.            else:.                continue.    for i in range(2):.        self.fishlist.append(fish()).        #adding fish to ecolist.        while true:.            index = randint(0, 9).            if self.ecolist[index] is none:.                self.ecolist[index] = self.fishlist[i].                self.ecolist[index].p = index.                break.            else:.                continue..    self.move()..  def move(self):.    #print out the current eco system..    print(*self.ecolist, sep='n').    anwser = true.    while anwser:...        #populate next move new position for each object.        for i in range(len(self.ecolist)):.            if self.ecolist[i] is none:.                continue.            else:.                self.ecolist[i].run().        #run for loop to test next position of the object.        for i in range (len(self.ecolist)):.            #if [i] item is none skip to next loop.            if self.ecolist[i] is none:.                continue.            elif self.ecolist[i].check == true:.                continue.            #else check if it is going to move then check adjacent slot is going to be taken.            else:.                tempani = none #temp animal to compare with item in loop.                #call out new position from item i.                newp = self.ecolist[i].np.                #call out direction:.                newdp = self.ecolist[i].dp.                #do nothing, skip to next slot if it is not going to move.                if newdp == 0:.                    self.ecolist[i].check = true.                    continue.                elif newdp != 0:#test if new position is going to be out of bound.                    if newp &lt; 0 or newp &gt; (len(self.ecolist)-1):.                        #set new position back to current.                        self.ecolist[i].np = self.ecolist[i].p.                        self.ecolist[i].dp = 0.                        self.ecolist[i].check = true.                    else:.                        #test if new position is going to be collided.                        if self.ecolist[newp] is not none:.                            if self.ecolist[newp].np == self.ecolist[i].np:.                                print(""////////////////"").                                tempani = self.ecolist[newp].                            #test if the next next new position is not none or out of bound.                            #assumption - prioritize the closet animal going to move.                            elif (newp+newdp) &gt; 0 and (newp+newdp) &lt; (len(self.ecolist)-1):.                                if self.ecolist[newp+newdp] is not none:.                                    #test if this is going to be collided.                                    if self.ecolist[newp+newdp].np == self.ecolist[i].np:.                                        print(""\\\\\\\"").                                        tempani = self.ecolist[newp+newdp].                #if tempani is not none compare the type.                if tempani is not none:.                    print (""####"").                    print (self.ecolist[i].p).                    print (self.ecolist[i]).                    print(""-----------"").                    print (tempani.p).                    print(tempani).                    print (""####"").                    #test if they are the same type.                    self.temp = tempani.p.                    if tempani.__class__.__name__ == self.ecolist[i].__class__.__name__:.                        #if they are, change new position to current position.                        self.ecolist[i].np = self.ecolist[i].p.                        self.ecolist[i].check = true.                        print(""?????"").                        print(self.temp).                        print(tempani).                        print(tempani.dp).                        print(self.ecolist[i]).                        print(self.ecolist[i].dp).                        self.ecolist[self.temp].np = tempani.p.                        self.ecolist[self.temp].check = true.                        #create new animal of the same type and put it to a random place on the list.                        #assumption - if the list is full add do nothing.                        #determine tempani type to create new bear or fish.                        if isinstance(tempani, bears):.                            #create new bear.                            newani = bears().                        else:.                            #creaete new fish.                            newani = fish().                        #while loop if the list is still have available spot add new animal to random spot, otherwise do nothing.                        while none in self.ecolist:..                            index = randint(0, 9).                            if self.ecolist[index] is none:.                                self.ecolist.insert(index, newani).                                self.ecolist[index].p = index.                                print (""*****"").                                print (self.ecolist[index].p).                                print (self.ecolist[index]).                                print (""*****"").                                break.                    #if they are not the same type, kill the fish.                    else:.                        #determine if tempani is the fish or bear.                        if isinstance(tempani, bears):.                            #if it is bears kill the fish in i.                            self.ecolist[i].p = -1.                            self.ecolist[i].check = true.                            self.ecolist[self.temp].check = true.                        elif isinstance(tempani, fish):.                            #if it is fish kill it.                            self.ecolist[self.temp].p = -1.                            self.ecolist[i].check = true.                            self.ecolist[self.temp].check = true..        #apply the change after all the checks are finished.        #remove all the fish got killed and apply the moves.        for i in range (len(self.ecolist)):.            if self.ecolist[i] is not none:..                    if self.ecolist[i].p == -1:.                        self.ecolist[i] = none.                    elif self.ecolist[i].check == false:.                        self.ecolist[i].check = true.                        newp = self.ecolist[i].np.                        if newp != i:.                            self.ecolist[newp] = self.ecolist[i].                            self.ecolist[newp].p = newp.                            self.ecolist[i] = none..        #print out the current eco system.        print (""---------------------------------------"").        for i in range (len(self.ecolist)):.            print(self.ecolist[i]).            print(i).        #ask if user want to continue playing.        test = true.        while test == true:.            strans = input ('enter y/n to continue or not: ').            if strans.lower() == ""n"":.                anwser = false.                test = false.                break.            elif strans.lower() == ""y"":.                test = false.                break.def main():.ecosystem()..main()"
