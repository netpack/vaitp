"how can i make my code more efficient? i have a list of tuples that contains a tool_id, a time, and a message. i want to select from this list all the elements where the message matches some string, and all the other elements where the time is within some diff of any matching message for that tool. ..here is how i am currently doing this: ..# record time for each message matching the specified message for each tool .messagetimes = {} .for row in cdata:   # tool, time, message .    if self.message in row[2]: .        messagetimes[row[0], row[1]] = 1 ..# now pull out each message that is within the time diff for each matched message .# as well as the matched messages themselves ..def determine(tup): .    if self.message in tup[2]: return true      # matched message ..    for (tool, date_time) in messagetimes: .        if tool == tup[0]: .            if abs(date_time-tup[1]) &lt;= tdiff: .               return true ..    return false ...cdata[:] = [tup for tup in cdata if determine(tup)] ...this code works, but it takes way too long to run - e.g. when cdata has 600,000 elements (which is typical for my app) it takes 2 hours for this to run. ..this data came from a database. originally i was getting just the data i wanted using sql, but that was taking too long also. i was selecting just the messages i wanted, then for each one of those doing another query to get the data within the time diff of each. that was resulting in tens of thousands of queries. so i changed it to pull all the potential matches at once and then process it in blank, thinking that would be faster. maybe i was wrong. ..can anyone give me some suggestions on speeding this up? ..updating my post to show what i did in sql as was suggested...what i did in sql was pretty straightforward. the first query was something like:..select tool, date_time, message .from event_log.where message like '%foo%'.and other selection criteria...that was fast enough, but it may return 20 or 30 thousand rows. so then i looped through the result set, and for each row ran a query like this (where dt and t are the date_time and tool from a row from the above select):..select date_time, message.from event_log.where tool = t .and abs(timestampdiff(second, date_time, dt)) &lt;= timediff...that was taking about an hour...i also tried doing in one nested query where the inner query selected the rows from my first query, and the outer query selected the time diff rows. that took even longer...so now i am selecting without the message like '%foo%' clause and i am getting back 600,000 rows and trying to pull out the rows i want from blank."
