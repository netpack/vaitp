"defining a function with string.replace within a class i have defined a class ""dna"". i am now trying to create a function within that class that will allow me to translate dna to rna (which bascially means replacing any ""t"" with ""u""). my dna class has inherited parameters from another class..i have to use the string.replace method...class dna(seq):.   def __init__(self, seq):.    seq.__init__(self, seq, pattern=(re.compile('[^acgtacgt]'))).    self.data = seq.upper().def __repr__(self):.        return self.data...i want to use the function on a dna-sequence of the dna class...edit:.i want to be able to do the following:..dna1 = dna('acccgt').rna1 = dna1.translate_to_rna().print rna1...where the translate_to_rna() is my defined function and the output would be ('acccgu')..edit2: ..class seq:.    def __init__(self, seq, pattern): .        if pattern.search(seq): .            print "" warning : sequence contains illegal characters "" .        self.data = seq.upper() .    def __getitem__(self, index):.        return self.data[index].    def __len__(self):  .        return len(self.data) ..import re..class dna(seq):.    def __init__(self, seq):.        seq.__init__(self, seq, pattern=(re.compile('[^acgtacgt]'))).        self.data = seq.upper().        self.seq = seq.    def __repr__(self):.        return self.data.    def translate_to_rna(self):.        new_string = self.seq(""t"",""u"").        rna1 = rna(new_string).        return rna1...class rna(seq):.    def __init__(self, seq):.        seq.__init__(self, seq, pattern=(re.compile('[^acguacgu]'))).        self.data = seq.upper().    def __repr__(self):.            return self.data"
