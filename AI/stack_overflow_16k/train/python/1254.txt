"base-2 (binary) representation using blank building on how do you express binary literals in blank, i was thinking about sensible, intuitive ways to do that programming 101 chestnut of displaying integers in base-2 form.  this is the best i came up with, but i'd like to replace it with a better algorithm, or at least one that should have screaming-fast performance.  ..def num_bin(n, places=8):.    def bit_at_p(n, p):.        ''' find the bit at place p for number n '''.        two_p = 1 &lt;&lt; p   # 2 ^ p, using bitshift, will have exactly one.                         # bit set, at place p.        x = n &amp; two_p    # binary composition, will be one where *both* numbers.                         # have a 1 at that bit.  this can only happen .                         # at position p.  will yield  two_p if  n has a 1 at .                         # bit p.        return int(x &gt; 0)..    bits =  ( bit_at_p(n,x) for x in xrange(places)).    return """".join( (str(x) for x in bits) )..    # or, more consisely .    # return """".join([str(int((n &amp; 1 &lt;&lt; x)&gt;0)) for x in xrange(places)])"
