"strange behaviour related to apparent caching of ""{}"" today i learned that blank caches the expression {}, and replaces it with a new empty dict when it's assigned to a variable:..print id({}).# 40357936..print id({}).# 40357936..x = {}.print id(x).# 40357936..print id({}).# 40356432...i haven't looked at the source code, but i have an idea as to how this might be implemented. (maybe when the reference count to the global {} is incremented, the global {} gets replaced.)..but consider this bit:..def f(x):.    x['a'] = 1.    print(id(x), x)..print(id(x)).# 34076544..f({}).# (34076544, {'a': 1})..print(id({}), {}).# (34076544, {})..print(id({})).# 34076544...f modifies the global dict without causing it to be replaced, and it prints out the modified dict. but outside of f, despite the id being the same, the global dict is now empty!..what is happening??"
