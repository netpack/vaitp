"factory method of a blank class returning implementation based on system and design issues 1) introduction..i have started the implementation of a tool in blank that gathers several system metrics (e.g. cpu utilisation, cpu saturation, memory errors etc.) and presents them to the end-user. this tool should ideally support as many platforms as possible (linux, freebsd, windows etc.)...i have completed the implementation of this tool for a linux system for a few metrics i consider important and i have just started to implement the same metrics for a freebsd system. this tool must be designed in a way that allows support for more system metrics and for more platforms in the future. moreover, a web-interface will soon be added and will receive data from my tool...2) my design decisions so far..for the above reasons, i have decided to implement the tool in blank (convenient to read data from different sources on many systems and ,well, i am somewhat more familiar with it :)) and i am following a class structure for each system metric (inheritance is important as some systems share features so there is no need to rewrite code). moreover, i have decided that i have a valid use case for using a factory method...2.1) class structure..here is an example class diagram for cpu metrics (simplified for the sake of the question):..                  cpumetrics        (abstract base class).                 /      |    .                /       |     .               /        |      .              /         |       .             /          |        .            /           |         .linuxcpumetrics  freebsdcpumetrics windowscpumetrics   (per os).           /   .          /    .         /      .        /        .       /          .      /            .     /              .archlinuxcpumetrics  debianlinuxcpumetrics             (sometimes important per distro or version)...2.2) factory method..in the abstract base class called cpumetrics there are some abstract methods defined that should be implemented by inheriting classes and a factory method called get_impl(). i have done some research on when i should use a factory method (for example, answers such as this) and i believe it is valid to use one in my case...for example, i want a client (e.g. my web interface) to call my tool to get cpu utilisation metrics like this:..cpu_metrics = cpumetrics.get_impl() # factory method as an alternative constructor.cpu_metrics.get_cpu_util() # it is completely transparent for the client which get_cpu_util() is returned....3) my concern and my question (finally)..following the above analyzed design, it is very important for my factory method to be informed about which system are we on now (""is this linux, windows? which implementation should i bring now?""). therefore, i have to heavily rely on functions such as platform.system() or its alternatives. so what my factory method does is (roughly again): ..def get_impl():.    """"""factory method returning the appropriate implementation depending on system."""""".    try:.        system = platform.system() # this returns: { linux, windows, freebsd, ... }.        system_class = getattr(""cpu"", system + ""cpumetrics"" ).    except attributeerror, attr_err:.        print (""error: no class named "" + system + ""cpumetrics in module cpu. "").        raise attr_err.    return system_class()...i feel very uncomfortable with this for two reasons:..1) i force a future programmer (or even myself) to follow a naming convention for his class. for example, if someone decides to extend my system, say, for solaris he absolutely has to name his class solariscpumetrics...2) if  in a future version of blank the values of platform.system() (or an other alternative i will choose to use) are modifiled, then i have to change my naming convention and modify my factory method a lot...so my question : is there a workaround for my concern ? will my code become unreadable or my concern is not valid? if you believe there is one workaround, how much do i need to modify / refactor my code and change my design?..i don not have experience in designing projects from scratch, so i could use any advice. also, i have some more experience in java. i try to think in a as much blankic way as possible when writing blank, but sometimes fail to do a proper seperation between the two. your constructive criticism is very desirable."
