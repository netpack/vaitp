"blank: bundling script into app, possibly using platypus, setting up args i've build a script which reads a log (text) file and performs certain formatting, then writes a html file and opens it automatically. everything works fine when i tell it which path to look for the log file specifically. i'm not great with gui in blank, so i found something called platypus which bundles your script and it's dependencies into a .app file, and it also gives you the option to add a 'droplet'. this basically makes a gui which lets the user drop a file into the window and then the script can use this to perform whatever action the script does.......i've never worked with arguments in blank so i was hoping someone could help me understand what i need to do with my script to have it read the file path of the dropped file so the script can execute the rest. as you can see in my code, i've manually assigned infile to be the specific file path so far...import webbrowser .import os.import re..infile = r""/users/samb/test-full-log.log""...fixed_div = """""".&lt;style&gt;#fixed_div {.    background: #555;.    position: fixed;.    top: 0;.    left: 0;.    width: 100vw;.    min-height: 100px;.    text-align: center;.    line-height: 60px;.    font-family: 'helvetica', 'arial', sans-serif;.}..#logtext {.    padding: 100px 0px 0px;.    white-space: pre-wrap;.    line-height: 1.5;..}..a, u {.    text-decoration: none;.}..#fixed_div a:link { color: white; }.#fixed_div a:visited { color: white; }.#fixed_div a:hover { color: #ff715b; }.#fixed_div a:active { color: #f3e476; }...a.anchor {.    display: block;.    position: relative;.    top: -250px;.    visibility: hidden;.}&lt;/style&gt;&lt;br&gt;"""""".....with open(infile) as f:.    f = f.read().    error_occurances = f.count(""error:"").    fail_occurances = f.count(""fail:"")..with open(infile, 'r') as in, open('output.html', 'w') as out:.    out.write(fixed_div).    out.write('&lt;head&gt;&lt;meta charset=""utf-8""&gt;&lt;/head&gt;').    out.write('&lt;body&gt;').    out.write('&lt;div id=""fixed_div""&gt;').    out.write('&lt;div id=""title""&gt;&lt;font color=""white""&gt;&lt;font size=""5""&gt;&lt;strong&gt;&lt;a href=""#""&gt;&amp;#xf8ff log reader&lt;/a&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/font&gt;&lt;/div&gt;').    for x in range(error_occurances):.        error_links = ""error "" + str(x).        out.write('&lt;a href=' + '""' + '#' + error_links + '""' '&gt;' + error_links + ""t"" + '&amp;#9702;' + '&lt;/a&gt;' + ""t"")...    out.write('&lt;/div&gt;').    out.write(""&lt;pre id='logtext'&gt;"").    x = 0.    for line in in:.        if ""error"" in line:.            error_links = ""error "" + str(x).            x+=1.            f = '&lt;a class=""anchor"" id=' + '""' + error_links + '""' '&gt;&lt;/a&gt;&lt;span style=""background-color: #ff0000; color: #ffffff;""&gt;' + line + '&lt;/span&gt;'.            out.write(f + 'n').        elif ""fail:"" in line:.            out.write(line.replace('fail:', '&lt;strong&gt;&lt;span style=""background-color: #ff0000; color: #ffffff;""&gt;fail:&lt;/span&gt;&lt;/strong&gt;') + 'n').        elif ""debug"" in line:.            out.write(line.replace('debug:', '&lt;strong&gt;&lt;span style=""color: #0000ff;""&gt;debug:&lt;/span&gt;&lt;/strong&gt;') + 'n').        elif ""warning"" in line:.            out.write(line.replace('warning:', '&lt;strong&gt;&lt;span style=""color: #f5a422;""&gt;warning:&lt;/span&gt;&lt;/strong&gt;') + 'n').        elif ""start:"" in line:.            f = '&lt;span style=""background-color: #ffc9ff; color: #731275;""&gt;&lt;b&gt;' + line + '&lt;/b&gt;&lt;/span&gt;'.        elif ""info:"" in line:.            out.write(line.replace('info:', '&lt;strong&gt;&lt;span style=""color: grey;""&gt;info:&lt;/span&gt;&lt;/strong&gt;') + 'n').        else:.            out.write(line + 'n').    out.write(""&lt;/pre"").    out.write('&lt;/body&gt;').....path = open('output.html').path_name = os.path.realpath(path.name).url = 'file://' + path_name.webbrowser.open(url, new=2)"
