"writing methods that accept either a single item or an iterable in blank i have a design issue. i would like to write a method accepts either a single object or an iterable of objects. for example, lets say i have the class dog:..class dog(object):.    """""".    an animal with four legs that may slobber a lot.    """""".    def __init__(self, name=""fido""):.       self.name = name...now let's say that i have a class that uses the dog class, say dogwalker:..class dogwalker(object):.    """""".    someone who cares for fido when human companion is not available.    """""".    def __init__(self):.        self.dogs_walked = 0.        self.dogs_watered = 0..    def walk(self, dogs):.        """""".        take a dog for a walk.        """""".        # this is not blankic.        if isinstance(dog, dogs):.            # walk a single dog.            pass.            self.dogs_walked +=1.        else:.            # walk lots of dogs.            pass...    def water(self, dogs):.        """""".        provide water to dogs.        """""".        # more blankic.        try:.            # try to water single dog.            ....            self.dogs_walked += 1.        except  attributeerror:.            # try to water lots of dogs.            pass...in the example, above i've implemented two methods walk and water. the water method is more blankic in that it uses duck typing. however, i'd like to take the conversation a bit further. let's say i have a care taker class that can water different types of animals:..class caretaker(object):.    """""".    someone who cares for things.    """""".    def __init__(self):.        self.things_watered = 0..    def water(self, things):.        """""".        provide water to a thing.        """""".        # here is where i need help!.        # 1. i need to figure out if things is a single item or iterable.        # 2. if thing is a single item i need to figure out what type of thing a thing is.        # 3. if thing is an iterable, i need to figure out what type of things are in the iterable..        pass...now, one thing that occurred to me is that each thing could know how to water itself, and then the care taker would only need to call the things water method. for example:..class caretaker(object):.    """""".    someone who cares for things.    """""".    def __init__(self):.        self.things_watered = 0..    def water(self, thing):.        """""".        provide water to a thing.        """""".        result = thing.water().        self.things_watered += 1.        return result...that way using the code might look like:..ct = caretaker().dog = dog().bird = bird().water_dog = ct.water(dog).water_bird = ct.water(bird)..things = [dog, bird]..for thing in things:.    ct.water(thing)...i have a few other ideas, but i would like to get some input from others who might have faced such an issue, before i take a specific design approach. if you could list pros and cons of your ideas as well. that would be a bonus! thanks...update: there appear to be two equally good suggestions so far....test the behavior of the arguments passed in, for example, write an.is_itereable method. .use positional arguments and iterate over the list of items in the positional argument list....i have yet to determine which is better for my actual problem."
