"comparing and replacing the elements of a nested list i have got a list which is:..mylist = {.           'a': [(-1,-1), (0.2,0.4)] .           'b': [(0.3,1.0), (-1,-1)].           'c': [(-1,-1), (-1,-1)].           'd': [(0.15,0.35), (0.05,0.15)].          }...i have to get an output which will be like the following:.. mylist = {.           'a': [(0.3, 0.35), (0.2,0.4)] .           'b': [(0.3,0.35), (0.05,0.15)].           'c': [(0.15,0.35), (0.05,0.15)].           'd': [(0.15,0.35), (0.05,0.15)].          }...the list above looks like this when i print it,..mylist = [ ('a', [ (-1, -1), (0.2, 0.4) ] ), .           ('b', [ (0.3, 1.0), (-1, -1) ] ), .           ('c', [ (-1, -1), (-1, -1) ] ), .           ('d', [ (0.15, 0.35), (0.05, 0.15) ] ) ]...now the algorithm is like the following:..1st iteration: compare a[0] and b[0] ie (-1, -1) and (0.3, 1.0). .               here replace (-1, -1) by (0.3, 1.0). .               rule: (-1, -1) is considered as empty or not in use so .                     it gets replaced while comparison. ..               similarly, compare a[1] and b[1] ie (0.2, 0.4) and (-1, -1). .               here keep the same value as b[1] is empty so no change. ..               hence the new elements of 'a' are (0.3, 1.0), (0.2, 0.4). .               rule: if comparing with empty one then keep the same values...2nd iteration: compare new values of a[0] and c[0] ie (0.3, 1.0) and (-1, -1). .               here again no change. .               similarly, compare new values of a[1] and c[1] ie (0.2, 0.4) and (-1, -1)..               here also no change. .               now the new elements of 'a' are (0.3, 1.0), (0.2, 0.4)....this process carries till 'a' is compared to the last element in the list here its upto 'd'. then comes the turn of 'b' and same thing will continue between 'b' and 'c' then 'b and 'd' and so on. ..the other rules when comparison between two actual ranges (0.1,0.3) and (0.5,1.0). ..say if two ranges totally overlap like (0.1, 0.8) and (0.3, 0.9) then,.it should take the common between them which is (0.3, 0.8). ..if they don't overlap like (0.1, 0.4) and (0.5, 0.9) then,.it should choose its own which is (0.1, 0.4). ..and if they partially overlap then also take the common between them..like (0.4, 1.0) and (0.8, 1.5) then it should choose (0.8, 1.0).   ..p.s. the values (0.2, 0.4) are the ranges actually indicating the actual value will vary between 0.2 to 0.4. i think now i have explained a bit more clearly. thank you"
