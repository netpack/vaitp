"get reference of function inside function for usage in prototype/creation function i have two nested functions: the outer creates a creation method / prototype, the inner will create a concrete example of that prototype:..class example:.    def __init__(self, str):.        self.str = str..def make_prototype(proto_name):.    def make_example(example_name):.        return example(proto_name + ' ' + example_name).    return make_example..proto = make_prototype('prototype 1').ex1 = proto('example 1')...now, i'd like to remember the used creation function in the example. i did it the following way:..class example:..    def __init__(self, str, proto):.        self.str = str.        self.proto = proto..def make_prototype(proto_name):.    class make_example:.        def __call__(self, example_name):.            return example(proto_name + ' ' + example_name, self).    return make_example()..proto = make_prototype('prototype 1').ex1 = proto('example 1').ex2 = ex1.proto('example 2')...i think that's a relatively elegant and understandable solution. but would there be a way to do it without the nested class make_example? would there be a way to do it like in the first version and getting a reference to the function make_example directly inside make_example? something like:..class example:.    def __init__(self, str, proto):.        self.str = str.        self.proto = proto..def make_prototype(proto_name):.    def make_example(example_name):.        return example(proto_name + ' ' + example_name, reference to this func).    return make_example..proto = make_prototype('prototype 1').ex1 = proto('example 1').ex2 = ex1.proto('example 2')"
