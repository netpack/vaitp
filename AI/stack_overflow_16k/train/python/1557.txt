"how to recursively call different methods for levels of a video game? i attempting to design a simple choice based video game. essentially what i want is a recursive loop that will continue to call the new levels based off the results of the previous. for example, in level 1 based off choice made it will either trigger level 2 or 3. this is the code i have so far:..class levels:..    def __init__(self, next = 1):.        self.next = next..    def call(self):.        varlevel = ""level"" + ""{}"".format(self.next).        return (""{}"".format(varlevel))...this is the super class, it returns the varlevel which equals level1 to trigger the subclass level1. this is the code i have for the levels, i've excluded the context of the game because i don't think it is necessary...class level1(levels):..    def __init__(self,):.        # this just includes information about the level to show the user.        # (objective etc.)..    def action(self):.        # this will include the content of the level. based off the choices.        # made i want it to return to the super with varlevel as level2 or .        # level3 and then to trigger the next level running and repeat .        # throughout the program to run the game. for the purpose of testing .        # the program the only content of level1 is setting the return to 2 so .        # that level2 is called. i'm having trouble actually getting it to .        # recognize my return and to trigger the next level. this is the .        # actual method i want to do the calling with ..class levelcall():..    def __init__(self, levels = levels):.        self.levels = levels.    def calling(self):.        result = (levels, ""{}"".format(levels()))()...it gives me the error typeerror: 'tuple' object is not callable. i have been doing a lot of different attempts to get it to work so i'm not certain that this is even the real problem with the code. also of note i am decent in java and am now transitioning to blank (this is my first attempt in blank other then basic tests to read/write etc.) any help is greatly appreciated to help figure out how to format the game and i apologize in advance because i know this is a long question, i've never posted here before so if you need more info or clarification please feel free to ask...edit:.this is the full error message  ..traceback (most recent call last):. line 54, in &lt;module&gt;  .    tester.calling()  .  line 50, in calling  .    result = (levels, ""{}"".format(levels()))()  .typeerror: 'tuple' object is not callable ...another edit:.i think i am getting closer. i made the following changes  .. class levelcall():  .      def __init__(self, levels = levels):  .          self.levels = levels  .      def calling(self):  .          hold = levels()  .          result = (getattr(levels, ""{}"".format(hold.call()))())...it now gives the following error message...traceback (most recent call last):  .  line 55, in &lt;module&gt;  .    tester.calling()  .line 51, in calling  .    result = (getattr(levels, ""{}"".format(hold.call()))())  .attributeerror: type object 'levels' has no attribute 'level1'  ...if i understand correctly it is now attempting to do what i want but isn't finding the class ""level1"". again all help is much appreciated...edit______________________.i would like to thank all who replied and attempted to help, i am truly grateful for the support. with the clarification you were able to help me with as well as a fresh start today and mapping it out in java first to make the transition easier i was able to solve my problem. once again thank you all very much i will add the solution i found beneath this edit...global stop .class level1 :.    def __init__(self):.        self..    def action(self):.        print (""1"").        global stop.        stop = input(""would you like to advance to the next level?"").        if (stop == ""yes""):.            # lev = level2().            # return lev.action().            return level2.        if (stop == ""no""):.            return ""stop""....class level2:.    def __init__(self):.        self..    def action(self):.        print(""2"").        global stop.        stop = input(""would you like to advance to the next level?"").        if (stop == ""yes""):.            # lev = level3().            # return lev.action().            return level3.        if (stop == ""no""):.            return ""stop""..class level3 :.    def __init__(self):.        self..    def action(self):.        print (""3"").        global stop.        stop = input (""next level??"").        if (stop == ""yes""):.            # lev = level4().            # return lev.action().            return level4.        if (stop == ""no""):.            return ""stop""..class level4:.    def __init__(self):.        self..    def action(self):.        print (""complete"").        return ""done""..def runner (level):.    if (level == ""done""):.        print (""bye"").    else :.        if (level != ""stop""):.            lev = level().            next = lev.action().            runner(next)..        if (level == ""stop""):.            print (""you chose to stop"").....runner(level1)"
