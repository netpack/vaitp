"forcing immutability on an object before i start, i'm already aware that object immutability in blank is often a bad idea, however, i believe that in my case it would be appropriate...let's say i'm working with a coordinate system in my code, such that each coordinate uses a struct of x, y, z. i've already overloaded subtraction, addition, etc. methods to do what i want. my current problem is the assignment operator, which i've read cannot be overloaded. problem is when i have the following, i do not want a to point to the same point as b, i want the two to be independent, in case i need to overwrite a coordinate of one but not the other later:..b = point(1,2,3).a = b...i'm aware that i can use deepcopy, but that seems like a hack, especially since i could have a list of points that i might need to take a slice of (in which case it would again have a slice of point references, not points). i've also considered using tuples, but my points have member methods i need, and a very large portion of my code already uses the structs...my idea was to modify point to be immutable, since it's really only 3 floats of data, and from doing some research _new _() seems like the right function to overwrite for this. i'm not sure how to achieve this though, would it be something like this or am i way off?..def __new__(self):.    return point(self.x, self.y, self.z)...edit:.my bad, i realized after reading katrielalex's post that i can't modify a parameter of immutable object once it has been defined, in which case it's not a problem that both a and b point to the same data since a reassignment would require creation of a new point. i'd say that katrielalex's and vonpetrushev's posts achieve what i want, i think i'll go with vonpetrushev's solution since i don't need to rewrite all my current code to use tuples (the extra set of parentheses and not being able to reference coordinates as point.x)"
