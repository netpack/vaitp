"a way to automate the copying of class variable? ok, so if you have a class instance assigned to 'bill' i understand you can't just use 'karl = bill' to make 'karl' an independent instance with the same parameters as bill. for the below class:..class person():.    def __init__(self,x=5,y=1,z=0):.        self.x = x.        self.y = y.        self.z= z....bill = person()...obviously karl = bill, just makes 'karl' a pointer to 'bill', so any changes made to 'karl' are actually changes made to bill. with only 3 variables, it'd be trivial to copy karl by the method of karl = person(bill.x,bill.y,bill.z).yet, this becomes increasingly more tedious as you add class variables/parameters. haircolor, hairlenth, eye color, on and on. all the attributes that make up a person, for instance...is there no way to shorthand/automate the cloning of an instance of a class? does blank not keep an iterable list of a class' parameters so you can do something like. ""for n in bill._args:"" or something? ..or is this not the best way to develop classes that have a large contingent of variables?"
