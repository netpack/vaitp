"blank class condition: getting an [x,x] output from an x input? i'm playing around with some interval calculations in blank. this is an excerpt of what i've written. i want to include degenerate intervals i.e. the interval for the real number 1 is [1,1]. ..so when i type interval(1), i want [1,1] returned. but i've defined my interval class in terms of two parameters. ..i can't make a subclass - it would still expect two parameters. can anyone point me in the right direction please? could i extend the __contains__ in some sense? ..tldr: how can i get an [x,x] output from an x input?..from numpy import *.import numpy as np.from pylab import *..class interval:.    def __init__(self, leftendpoint, rightendpoint):.        self.min = leftendpoint.        self.max = rightendpoint.        if leftendpoint &gt; rightendpoint:.            raise valueerror('leftendpoint must not be greater than rightendpoint') ..    def __repr__(self): #task 3.        return '[{},{}]'.format(self.min,self.max)..    def __contains__(self, num):.        if num &lt; self.min:.            raise exception('the number is not in the given interval').        if num &gt; self.max:.            raise exception('the number is not in the given interval')..p = interval(1,2).print(p) #returns [1,2]"
