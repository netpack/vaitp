"blank: how do i promote an object from a base class to a derived class? hope this isn't too basic, but.....suppose i have a base class pa(), and i have derived classes pai(), paj(), etc, that inherit from the base class...i would like to instantiate an object from base class pa():..&gt;&gt;&gt; from pamod import *.&gt;&gt;&gt; mypa = pa().&gt;&gt;&gt; mypa.&lt;pamod.pa object at 0x28d4fd0&gt;.&gt;&gt;&gt;...... and then promote it (cast it) to a derived class, based on some action:..&gt;&gt;&gt; mypa.do(this)  .&gt;&gt;&gt; mypa.&lt;pamod.pai object at 0x28d4fd0&gt;.&gt;&gt;&gt;...where based on the value of ""this"", mypa becomes an object from class pai, etc...i know i can assign to the object's __class__....  .    .      mypa.__class__ = pai.    .  ...however i'm wondering if that's really the best approach...under my scheme, each instance of pai (say) would have started life as an instance of the base class pa, so pai's __init__ method could be overloaded somehow, i'm guessing...see.this.discussion...peter"
