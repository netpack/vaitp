"given a string s and a set of words d, find the longest word in d that is a subsequence of s i tried solving this in blank 2.7 using regex. i found it to be quite simple. wondering if i am missing something. is there an edge case or corner case here?..s = ""abppplee"".d = {""able"", ""ale"", ""apple"", ""bale"", ""kangaroo""}..def subseq(s,d):  .    # every word in d is made into a regex pattern interspersed with .* and looked up in s.    import re.    in_dict = {word:len(word) for word in d if bool(re.search(pattern="".*"".join(word),string=s))}.    return max(in_dict, key=in_dict.get)..subseq(s,d)...returns 'apple'"
