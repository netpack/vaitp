"cannot overwrite implementation for __call__ take this as an example:..class foo(object):.   def __init__(self, msg):.      self._msg = msg.   def __call__(self):.      return self._msg..foo = foo('hello').print(foo()) # prints 'hello'.foo.__call__ = lambda _: 'bye'.print(foo()) # prints 'hello'...i can reproduce this on both blank 2.x and blank 3.x..i was not able to find any relevant information on the documentation regarding this behavior...this totally looks like a valid use case for me, specially when monkeypatching stuff...is there a reason this is not allowed?"
