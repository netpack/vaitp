"when function a calls function b that calls function c. and how to handle multiple nones here is an example:..def getnumber3(arg):.    if arg!=7:.        print 'arg!=7'.        return.    return 7..def getnumber5(arg):.    if arg!=5:.        print 'getnumber5(): arg!=5'.        return..    number7=getnumber3(7).    if not number7:.        print 'getnumber5(): not number7'.        return.    return '%s-%s'%(arg,number7)..def getnumber():.    number5=getnumber5(5).    if number5:.        return 'the number is: %s'%number5..print getnumber()...function getnumber5() is expecting a return value from getnumber3() which will return none and print an ""error"" message if the incoming argument number is not 7...function getnumber5() if it receives none (from function getnumber3) will complain and return 'none' too...as a result the both functions: getnumber5() and getnumber3() are complaining and returning none. ..question: how should this functions workflow arranged so the very first function getnumber (that starts it all) gets none as soon as 'getnumber3()' function returns none bypassing getnumber5()'. sogetnumber5()' function doesn't have to complain and return its own none."
