"why is func.__globals__ documented as read-only? in all practical situations that i have come across, the following are true:...import sys..print(sys.modules[__name__].__dict__ is globals())..def x(): pass..print(sys.modules[x.__module__].__dict__ is x.__globals__)..class a:. def x(): pass..print(sys.modules[a.x.__module__].__dict__ is a.x.__globals__)..a = a()..print(sys.modules[a.x.__module__].__dict__ is a.x.__globals__...ideone link..the documentation for globals states: ...  return a dictionary representing the current global symbol table. this is always the dictionary of the current module (inside a function or method, this is the module where it is defined, not the module from which it is called)....there is no mention of read-onlyness here. in fact, most of the time, the dictionary is very much writable...the docs for __globals__ state: ...  a reference to the dictionary that holds the function’s global variables — the global namespace of the module in which the function was defined..  .  read-only...why is the attribute listed as read-only? for that matter, does the ""read only"" apply to the attribute itself or the dictionary it is bound to? neither seems to be the case. for example, https://stackoverflow.com/a/49077211/2988730."
