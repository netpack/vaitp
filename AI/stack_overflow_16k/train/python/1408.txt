"how does the blank interpreter know when to compile and update a .pyc file? i knew that a .pyc file is generated by the blank interpreter and contains the byte code as this question said...i thought blank interpreter is using the time stamp to detect whether a .pyc is newer than a .py, and if it is, skipped compiling it again when executing. (the way what makefile do)..so, i did a test, but it seemed i was wrong. ...i wrote t.py contains print '123' and t1.py contains import.t. running command blank t1.py gave the output 123 and.generated t.pyc, all as expected..then i edited t.py as print '1234' and updated the time stamp of.t.pyc by using touch t.pyc..run blank t1.py again, i thought i would get 123 but 1234.indeed. so it seemed the blank interpreter still knew that t.py.is updated....then i wondered whether blank interpreter will compile and generate t.pyc every time running blank t1.py. but when i run blank t1.py several times, i found that the t.pyc will not be updated when t.py is not updated...so, my question is: how blank interpreter knows when to compile and update a .pyc file?..updated..since blank interpreter is using the timestamp stored in the .pyc file. i think it a record of when .pyc was last updated. and when imported, compare it with the timestamp of  .py file...so i tried to hack it in this way: change the os time to an older one, and edit .py file..i thought when imported again, the .py seems older than the .pyc, and the blank interpreter will not update .pyc. but i was wrong again. ..so, does the blank interpreter compare these two timestamp not in a older or newer way but in a exactly equal way?..in a exectly equal way, i means the timestamp in .pyc records the when the .py was last modified. when imported, it compares the timestamp with the current timestamp of .py, if it's not the same, recompile and update .pyc."
