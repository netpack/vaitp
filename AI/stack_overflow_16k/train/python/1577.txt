"what is the best practice for modifying a part of a base class for one-time usage? for context, i'm making a framework for creating rss feeds from arbitrary pages. the way it works is i have a base class with a lot of setup and want to plug in generators that describe items being returned; then i create one instance of this class. i can think of two ways to do this:..1) make a derived class that overrides all relevant properties and methods and then create an instance of it:..class base:..    property = none..    def customizable_function(self, many, different, arguments):.        raise notimplementederror()..    def __init__(self):.        non_customizable_preparation().        customizable_function(1, 2, 3)..class derived:..    property = ""useful""..    def customizable_function(self, many, different, arguments):.        do_stuff()..derived()...2) don't create a second class, make the init function take all relevant arguments:..class base:..    def __init__(self, customizable_function, property):.        non_customizable_preparation().        customizable_function(1, 2, 3)..def function_that_will_be_passed(self, many, different, arguments):.    do_stuff()..base(function_that_will_be_passed, property=""useful"")...the second approach seems cleaner, but in it customizable_function has to be defined outside of a class, while having its signature match what is expected. is there some non-obvious concern which makes one of those approaches significantly better? or is this whole thing a bad idea and i should do everything differently?"
