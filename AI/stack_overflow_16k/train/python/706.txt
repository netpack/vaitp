"calling functions from a blank file dynamically need some help in figuring out the name of what this is called in blank...a finance library i use (called quantopian) has a pretty cool api. when defining a new financial algorithm, you would create a new file and simply define functions based off of various keywords. this blank file then somehow gets passed to an executor which is then calling these functions...is there a name for this concept? basically you seem to have some blank code that gets passed a blank file, and is able to call functions in this file (if they exist)...here is an example of what the code would look like:.. from zipline.api import order_target, record, symbol..def initialize(context):.    context.i = 0.    context.asset = symbol('aapl')...def handle_data(context, data):.    # skip first 300 days to get full windows.    context.i += 1.    if context.i &lt; 300:.        return..    # compute averages.    # data.history() has to be called with the same params.    # from above and returns a pandas dataframe..    short_mavg = data.history(context.asset, 'price', bar_count=100, frequency=""1d"").mean().    long_mavg = data.history(context.asset, 'price', bar_count=300, frequency=""1d"").mean()..    # trading logic.    if short_mavg &gt; long_mavg:.        # order_target orders as many shares as needed to.        # achieve the desired number of shares..        order_target(context.asset, 100).    elif short_mavg &lt; long_mavg:.        order_target(context.asset, 0)..    # save values for later inspection.    record(aapl=data.current(context.asset, 'price'),.           short_mavg=short_mavg,.           long_mavg=long_mavg)"
