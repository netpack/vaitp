"getting to parent property in subclasses that uses a baseclass i am creating a module where i need to define a bunch of objects that will be used in the same module...my ultimate goal is for something like this to work;..m = mod().obj1 = m.t1('text').obj2 = m.t2(23).m.togheter(obj1, obj2)...the problem i have is that i need to keep track of an id in my subclasses..i've gotten this far, which gives me an attributeerror: 'super' object has no attribute '_cid' from return super(mod.modobj, self)._cid..class mod(object):.    current_cid = 0..    @property.    def _cid(self):.        c = self.current_cid.        self.current_cid += 1.        return c..    def togheter(self, obj1, obj2):.        # do something with obj1.text and obj2.number here....        return true..    class modobj(object):.        @property.        def _cid(self):.            return super(mod.modobj, self)._cid..    class t1(modobj):.        def __init__(self, text):.            self.text = text.            print self._cid..    class t2(modobj):.        def __init__(self, number):.            self.number = number.            print self._cid..m = mod().m.t1('text').m.t2(23).print m.current_cid  # should return 2...what is wrong here? i tried several other ""trial and error"" ways as well, but i am starting to think that i am doing this the completely wrong way..."
