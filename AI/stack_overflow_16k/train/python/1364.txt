"returning the list of classes defined inside a package using inspect i have the below module structure:....the code inside person.py is :..class person:.    def __init__(self,name,age):.        self.name = name.        self.age = age..    def displayage(self):.        print (""your age is {0}"".format(self.age))...inside vechile.py is:..class vechile:.    def __init__(self,type):.        self.type = type..    def display_type(self):.        print (""your vechile type is {}"".format(self.type))...inside __init__.py:..pass...and inside test.py i want to know the class names defined inside person.py and vechile.py...import inspect.from fetch import vechile.from fetch import person..modules = ['vechile','person'].for module in modules:.    for name, obj in inspect.getmembers(module):.        if inspect.isclass(name):.            print (obj)..v = vechile.vechile(""auto"").print (v)...the answer that i get is only this:..&lt;fetch.vechile.vechile object at 0x0000000000dd0c18&gt;..where am i going wrong? how can i get the list of classes defined inside person and vechile?"
