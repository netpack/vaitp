"how detect code change? let's suppose some code like this:..class x:.   def myfunc(self):.      print ""orig""..def new_myfunc(self):.   print ""new""..x().myfunc().x.myfunc = new_myfunc.x().myfunc()...where the new function is injected by a cheater..some functions can be altered,others not..i would like to know how i can detect this code change..for example i could make an dict that contain original function codes( with ""func_code"" ) and then check if they are changed.but how i can run the check at every ""import""? there is a way to edit the autoloader in blank?..edit: this is what i would like to do, but automatically for every import,how?..protection = {'x':'myfunc'}.f = {}..class x:.def myfunc(self):.    print ""orig""..def new_myfunc(self):.print ""new""..#system check.for key,value in protection.iteritems():.protectedfunc = getattr(eval(key), value).f[key] = { value : protectedfunc.func_code}..#cheater code.x.myfunc = new_myfunc..#system check.for key,value in protection.iteritems():.protectedfunc = getattr(eval(key), value).if f[key][value] != protectedfunc.func_code:.    print 'detected'..#call by my app .x().myfunc()"
