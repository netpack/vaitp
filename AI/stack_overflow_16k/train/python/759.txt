"blank object that takes less memory and time and provides delivers the element when index is provided i am very new to blank, i want a list or something in blank that takes very less space and time, something very similar to the one given below, and i want to find an element using index...for example:..if my length is m=5:..list=[[0,1],[0,2],[0,3],[0,4],[1,2],[1,3],[1,4],[2,3],[2,4],[3,4]] ...when i perform this for m=8000, a lot of cpu memory is consumed and even it takes approximately 30 seconds to create the list. ..please find my attempt below:..from collections import defaultdict.from itertools import combinations.from time import time        ..list1=[].t0=time() .for row1, row2 in combinations(range(8000), r=2):.    list1.append([row1, row2]).print ""training time:"", round(time()-t0, 3), ""s"" ..85% of my cpu.31.2 sec to run...i tried the same using collections.defaultdict both the memory usage and run time were low compared to list, i am aware that dict creates a lot of reference instead of storing the value...my code and finding are below..from collections import defaultdict.from itertools import combinations.from time import time        .dict1=defaultdict(list).t0=time() .for row1, row2 in combinations(range(8000), r=2):.    dict1[row1].append(row2) .print ""training time:"", round(time()-t0, 3), ""s""  ..85% of my cpu.15 sec to run...from what i know the problem in dictionary is i can't access the data with index, since i get my indexes from a different logic, its essential for me to use something like lists that requires an index to fetch the element...i.e from the above list i want like to fetch [1,2] when i do a list[4]...is there anything other than list in blank that allows retrieval of data provided index given and would at the same time occupy less space and take less time."
