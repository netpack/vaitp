"blank sorting question - given list of ['url', 'tag1', 'tag2',..]s and search specification ['tag3', 'tag1',...], return relevant url list i'm quite new to programming so i'm sure there's a terser way to pose this, but i'm trying to create a personal bookmarking program. given multiple urls each with a list of tags ordered by relevance, i want to be able to create a search consisting of a list of tags that returns a list of most relevant urls. my first solution, below, is to give the first tag a value of 1, the second 2, and so on &amp; let the blank list sort function do the rest. 2 questions:..1) is there a much more elegant/efficient way of doing this (embarrass me!).2) any other general approaches to the sorting by relevance given the inputs above problem?..much obliged...# given a list of saved urls each with a corresponding user-generated taglist .# (ordered by relevance), the user enters a ""search"" list-of-tags, and is .# returned a sorted list of urls. ..# generate sample ""content"" linked-list-dictionary. the rationale is to .# be able to add things like 'title' etc at later stages and to .# treat each url/note as in independent entity. but a single dictionary.# approach like ""note['url1']=['b','a','c','d']"" might work better?..content = [].note = {'url':'url1', 'taglist':['b','a','c','d']}.content.append(note).note = {'url':'url2', 'taglist':['c','a','b','d']}.content.append(note).note = {'url':'url3', 'taglist':['a','b','c','d']}.content.append(note).note = {'url':'url4', 'taglist':['a','b','d','c']}.content.append(note).note = {'url':'url5', 'taglist':['d','a','c','b']}.content.append(note)..# an example search term of tags, ordered by importance.# i'm using a dictionary with an ordinal number system .# this seems clumsy.search = {'d':1,'a':2,'b':3}..# create a tagcloud with one entry for each tag that occurs.tagcloud = [].for note in content:.    for tag in note['taglist']:.        if tagcloud.count(tag) == 0:.            tagcloud.append(tag)..# create a dictionary that associates an integer value denoting.# relevance (1 is most relevant etc) for each existing tag..d={}            .for tag in tagcloud:.    try:.        d[tag]=search[tag].    except keyerror:.        d[tag]=100..# create a [[relevance, tag],[],[],...] result list &amp; sort .result=[]    .for note in content:.    resultnote=[].    for tag in note['taglist']:.        resultnote.append([d[tag],tag]).    resultnote.append(note['url']).    result.append(resultnote).result.sort()..# remove the relevance values &amp; recreate a list containing.# the url string followed by corresponding tags. .# its so hacky i've forgotten how it works!.# it's mostly for display, but suggestions on ""best-practice"" .# intermediate-form data storage? ..finalresult=[].for note in result:.    temp=[].    temp.append(note.pop()).    for tag in note:.        temp.append(tag[1]).    finalresult.append(temp)..print ""content: "", content.print ""search: "", search.print ""final result: "", finalresult"
