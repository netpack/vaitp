"blank: converting a tuple to a string representation i am writing a function volumes that takes the numerical representation of a partitioning of a phone book. if the argument passed to the function does not represent a valid numerical representation of a partitioning of a phone book, the function raise an assertionerror with the message invalid partitioning. otherwise, the function must return the string representation of the given partitioning...with my code i still didn't solve the following cases:.1. volumes('a-d e-j k-o p-z') which must raise an assertion error.2. volumes(42) which must raise an assertion error.3. volumes((1, 10, 1, 12, 1, 1)) which must return 'a b-k l m-x y z' in stead of .'a b-k l m-x y z-z' which is the case with my code..can anyone help me?..def volumes(seq):.    '''.    &gt;&gt;&gt; volumes((4, 6, 5, 11)).    'a-d e-j k-o p-z'.    &gt;&gt;&gt; volumes((7, 8, 1, 10)).    'a-g h-o p q-z'.    &gt;&gt;&gt; volumes((4, 7, 5, 10)).    'a-d e-k l-p q-z'.    &gt;&gt;&gt; volumes((8, 3, 9, 7)).    traceback (most recent call last):.    assertionerror: invalid partitioning.    '''.    if type(seq) is tuple:.        import itertools.        q = list(itertools.accumulate(seq))...    if type(seq) is tuple:.        assert ""invalid partitioning"" ..    assert (sum(x for x in seq) == 26), ""invalid partitioning"".    assert q[-1] == 26, ""invalid partitioning"" .    assert seq[-1] != 0, ""invalid partitioning""  .    assert seq[-1] &gt; 0, ""invalid partitioning"" ..    st = 'a'.    count = 0..    for x in seq:.        count += int(x).        new = count + 64.        if int(x) &lt; 2 and new &lt; 90:.            st = st + "" "" + chr(new+1).        elif int(x) &gt;= 2 and new &lt; 90:.            st = st + ""-"" + chr(new) + "" "" + chr(new+1).        else:.            st = st + ""-"" + chr(new)..    return st"
