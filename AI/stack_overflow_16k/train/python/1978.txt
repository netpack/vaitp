"how do i retrieve multiple words from an ms access database and output paragraphs of words using blank37? what i'm doing? i'm generating word labels in italian and narratives from the voynich manuscript using a special cipher. the cipher contains abstract dashes &amp; dots per glyph when added up equal some morse code word related to an italian word or a low frequency of english words....hello blank gurus,.i've completed a database in access and a spreadsheet in excel with 103,000 italian words which i can search for by typing in dash and then dot sequence, dash only sequence or dots only sequence which finds translations to the voynich manuscript (vms) in italian. it works great i can find a list of italian words with the matching find or search...for instance if i search like this..---...... the output will be a list of all the italian words which have that value. ""aria"" just happens to be one of them...by the way please refer to the lower cipher not the one with aria ok thanks this is out of date!....i'm hoping for help here as to the possibility where i can use the access database or spreadsheet to help in generating many narratives in italian. i would like to use the full potential of my cpu and blank code to access the database and bring back as many narratives for voynich paragraphs. hence, i could choose the best fit for the narrative. i believe i have to enter every voynich word into another database or blank.py file database and then have it output some meaningful sentences. currently i'm sifting manually through the search results and looking at three words at time from 1st to 3rd voynich words and then generating a narrative from the voynich manuscript which i believe was encoded by michal wojnicz. it's a slow arduous process, but i'm producing sentences for what i believe michal was writing...i produced this short sentence from the voynich manuscript starting at the second paragraph of f16r on 10/07/2019:..1)euganei 2)veneta 3)ha 4)attivo 5)sorgere 6)e 7)tondeggiava 8)nettamente 9)montante 10)e 11)se 12)stata 13)no 14)etto 15)drogo...1). ..- --. .- -. . .. /2) ...- . -. . - .- /3) .... .- /4) .- - - .. ...- --- /5) ... --- .-. --. . .-. . / 6). /7) - --- -. -.. . --. --. .. .- ...- .- /8) -. . - - .- -- . -. - . /9) -- --- -. - .- -. - . /10) . /11) ... . /12) ... - .- - .- /13) -. --- /14) . - - --- /15) -.. .-. --- --. ---..eugenean venetia has active springs and round sharply uphills and in itself was no hectograms drugs...https://www.euganeanhills.com/..https://en.wikipedia.org/wiki/euganean_hills..here is what i believe the steps entail:..1) i have entered all of the dash &amp; dot totals which pertain to the voynich words from my cipher in a paragraph to blank...a)here is the cipher:....2) next the database looks at these dash and dot entries in the voynich.accdb and and outputs 10's of 1000's or even millions of different narratives of italian words from its access database...3) then i go over which one i believe makes most sense and then publish it or record it...can anyone please help me out here? angel..the big question is, would this code work below with some adjustments?..#**********************************************************************.# filename :    callspeditrecord.py.#.# description :.#               illustrates using a stored procedure to perform several.#               actions relating to editing records within a table..#.#               calls a stored procedure as follows:.#.#       {call pyedit_record (?, ? ?, ?, ?, ?)}.#.#               with parameter :.#                   1 -   action (select,update,insert,delete or all).#                   2 -   current record id.#                         used if action is select, update or delete).#                   3 - 6 parameters for firstname, lastname, address, .coty.#                         used if action is insert or update.#.# odbc usage :.#.#       uses the notion of current person id as current record.#       (a value of -1 indicates none). based on current record and.#       action, the program loops, executing the stored procedure to.#       either select a specific record, select all records, update.#       or delete the current record or insert a new one..#.#               connects to data source using data source name.#               creates cursor on the connection.#               drops and recreates a procedure 'pyedit_record'.#               prompts user for either a record number or an action..#               actions available depend on whether a 'current' record.#               exists. select one, update and delete need a current .record id.#               whereas selecting all records and insert don't..#.import pyodbc..# current record variables.currpid=-1.currfirstname="""".currlastname="""".curraddress="""".currcity=""""..# list of actions.sel=0           # action select one.upd=1           # action update.ins=2           # action insert.del=3           # action delete.all=4           # action select all..#.# function: getaction(currpid).# based on whether a current record is available, get next action to.# execute via stored procedure.# returns two values, the action selected and a record id to use as.# the current record id..#.def getaction (currpid):..# default action select.action=sel..# get personid to look up.print ""nnext action: quit(0)nselect (rec no), select all (a), insert .(i),"",.if currpid!=-1:.    print ""update (u), delete (d)"",..next=raw_input("" ? : "")..# check to see if we have a number or a letter.try:.    pid=int(next)..    if pid==0:.        quit().    action=0.except valueerror:.    pid=0.    next=next.upper().    if next == ""a"":.        action=4..    elif next == ""i"":.        action=2..    elif next == ""u"":.        pid=currpid.        action=1..    elif next == ""d"":.        pid=currpid.        action=3.    else:.        exit()..return (action, pid)..#.# function: printrec(rec).# function to display the contents of a record retrieved by .cursor.fetchone().# or cursor.fetchall().#.def printrec (rec):..print ""npersonid   : "", rec[0]..print ""first name : "",          # comma on end stops new line being .output.if rec[1]!=none:                # none appears for empty column.    print rec[1][0:10]          # print string from 0 upto 10.else:.    print ""-""                   # print - for empty column..print ""last name  : "",.if rec[2]!=none:.    print rec[2][0:10].else:.    print ""-""..print ""address    : "",.if rec[3]!=none:.    print rec[3][0:10].else:.    print ""-""..print ""city       : "",.if rec[4]!=none:.    print rec[4][0:10].else:.    print ""-""..#.# stored procedure statements.#.# create stored procedure 'pyedit_record' statement.#.sqlcreatesp=""create procedure pyedit_record (.        @action int, @recid int, .        @pfirstname nvarchar(256), @plastname nvarchar(256),.        @paddress nvarchar(256), @pcity nvarchar(256)).        as .        if (@action=0) begin .                select personid, firstname, lastname, address, city .                from testtbl1 where personid=@recid; .            end .        else .            if (@action=1) begin .                update testtbl1 .                set firstname=@pfirstname, lastname=@plastname, .                address=@paddress, city=@pcity .                where personid=@recid; .            end .        else .            if (@action=2) begin .                insert into testtbl1 .                (firstname, lastname, address, city) .                values (@pfirstname, @plastname, @paddress, @pcity);.                select @@identity; .            end .        else .            if (@action=3) begin .                delete from testtbl1 where personid=@recid; .            end .        else .            if (@action=4) begin .                select personid, firstname, lastname, address, city .                from testtbl1 order by personid; .            end"".#.# drop stored procedure statement.#.sqldropsp=""if exists (select * from sys.objects .       where type='p' and name='pyedit_record') .       drop procedure pyedit_record"".#.# call stored procedure statement.# parameters are action, recid, firstname, lastname, address, city.#.#    6 parameters -- 1 - action.#                    2 - record id.#                    3-6 read - used in upd and ins.#.#.sqlexecsp=""{call pyedit_record (?,?,?,?,?,?)}""..# connect to data source.conn=pyodbc.connect('dsn=datasource', autocommit=true) # either .autocommit here..# create cursor associated with connection.cursor=conn.cursor()..print ""nstored procedure is : pyedit_record""..# drop sp if exists.cursor.execute(sqldropsp)..# create sp using create statement.cursor.execute(sqlcreatesp)..# loop - prompt for next action. getaction() will call quit() if either.# blank or 0 entered.while currpid != 0:..#.# returns action selected in next[0], and record id in next[1].#.next=getaction (currpid).action=next[0].currpid=next[1]..# if select not chosen, it is either update, insert or delete.# selected.if action!=sel and action!=all:.    ok='y'.    if action==upd:.        # updating current record.        print ""npersonid  : "", currpid.        print ""firstname : "", currfirstname,.        currfirstname=raw_input(""nfirst name : "").        print ""lastname  : "", currlastname,.        currlastname=raw_input(""nlast name : "").        print ""address   : "", curraddress,.        curraddress=raw_input(""naddress : "").        print ""city      : "", currcity,.        currcity=raw_input(""ncity : "")..    elif action==ins:.        # insert new record.        currfirstname=raw_input(""nfirst name : "").        currlastname=raw_input(""last name  : "").        curraddress=raw_input(""address    : "").        currcity=raw_input(""city       : "")..    elif action==del:.        # delete current record.        print ""ndeleting record : "",currpid,"" confirm y/n : "",.        ok=raw_input().        ok=ok.upper().        if ok!='y':.            ok='n'..    # if ok to continue.    if ok=='y':..        # execute stored procedure for update, insert or delete.        # and trap error if raised.        try:.             cursor.execute(sqlexecsp,action,currpid,currfirstname,.                            currlastname,curraddress,currcity).        except pyodbc.error, err:.            print 'execute dml error %s' % err..        # all ok. if insert set new records as current record.        if action==ins:.            rec=cursor.fetchone().            currpid=rec[0].            print ""nnew record is : "", currpid..        # if delete current record is no longer available.        elif action==del:.            currpid=-1..        # if we have a current record, reselect and display.        if action==ins or action==upd:.            action=sel.            try:..cursor.execute(sqlexecsp,action,currpid,currfirstname, .currlastname,curraddress,currcity).            except pyodbc.error, err:.                print 'execute reselect error %s' % err..            recs=cursor.fetchall().            for rec in recs:.                printrec(rec)..else:.    #.    # either select one or select all.    #.    # clear variables.    currfirstname="""".    currlastname="""".    curraddress="""".    currcity=""""..    # action select one (using current record) or select all.    try:..cursor.execute(sqlexecsp,action,currpid,currfirstname,currlastname, .curraddress,currcity).    except pyodbc.error, err:.        print 'execute select error %s' % err..    # display results - one record if select one, many for select all.    recs=cursor.fetchall().    for rec in recs:.        printrec(rec)..    if len(recs)==0:.        print (""nno matching records found"").        currpid=-1.    elif action==sel:.        # if selected one record, it becomes the current record.        currfirstname=rec[1].        currlastname=rec[2].        curraddress=rec[3].        currcity=rec[4]..    if action==all:.        # if selected all, we have no current record.        currpid=-1;..print (""nncomplete."")..# close and delete cursor.cursor.close().del cursor..# close connection.conn.close()"
