"how to read instance variables from another file without instantiating the class? i'm relatively new to blank and i'm having some trouble importing a variable to use it in another class. i did look at several other questions on this topic and tried to make it work, but it seems the way i set up this program early on might be the problem. i'll simplify what's going on so there's less to read.....server.py:..import game.class server():.    def __init__(self):.        # server connection details here.        self.test = 5.        self.game = game()..    def serve(self):.        # client processing, etc..        self.game.game_loop()..if __name__ == ""__main__"":.    server = server().    server.serve()...game.py:..class game():.    def __init__(self):.        # other variables.....    def game_loop(self):.        # to reference server's instance variables.        from server import server..        print test...in this example, i'm trying to reference the variable ""test"" from the server instance of server. it's worth noting that this does work if i put both classes in the same file and then remove the if statement at the end of it...but i'd rather not have one file that long :)..since these are in separate files, i can't get the instance variables from ""server"" without removing that if statement in server.py. when i do remove it, i get socket errors because of other stuff i'm doing...i need to make it so that there's only ever one server object (and that its class is only ""called"" once), but it'd be really handy to be able to reference those instance variables without passing them in to my game class every time it runs.....part of this is definitely my fault in that i set my program up wrong...but i'm too far in to start that over. is there any way i can take this sort of setup and read in those variables?"
