"create circular references between class instances? i'm trying to construct a class that allows an instance to point to another class, but i want these to eventually form a loop (so instance a → instance b → instance c → instance a)..i tried the following, but i'm getting a nameerror:..class cyclicclass:.    def __init__(self, name, next_item):.        self.name = name.        self.next_item = next_item..    def print_next(self):.        print(self.next_item)..item_a = cyclicclass(""item a"", item_b).item_b = cyclicclass(""item b"", item_a)...is this an inappropriate pattern in blank? if so, what would be the correct way to implement this? this seems similar but not the same as the following, since the class definition itself is not circular: circular dependency between blank classes"
