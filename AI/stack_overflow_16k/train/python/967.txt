"creating class variables in blank with inheritance i have the following:..class x(object):.    def __init__(self, *args, **kwargs):.        type(self).label_type = xyzzy(self.__class__.__name__)..class y(x):.    def __init__(self, *args, **kwargs):.        super(y, self).__init__(self, *args, **kwargs)...when i create a new instance of y, a class variable called label_type is created using y, not x. this is good and works fine...but it burns me that i have to wait until there's an instance of y before the class variable is created. how can i set label_type when class y is compiled, not when it is instantiated?..edit - i have numerous subclasses that are derived from x. i want to push as much of the work into x as possible."
