"blank: calling an object's method from another class when the object is initialized in the initialization block i'm writing a percolation program that uses that uses methods from a union-find object, which belongs to a different class. the specifics of percolation and union-find are not important for this question...this is how i start the percolation class, where a ""weightedquickunionuf"" object given the name ""uf"" is initialized. the method ""uf.union"" is used in this block without a problem:..public class percolation{..private byte[][] grid;.private weightedquickunionuf uf;.private int count;..public percolation(int n){.    if (n&lt;0) throw new illegalargumentexception();.    grid = new byte[n][n];.    weightedquickunionuf uf = new weightedquickunionuf(n*n+2);..    // all grid points are closed (=0).    for (int row=1; row&lt;=n; row++){.        for (int col=1; col&lt;=n; col++) grid[row-1][col-1]=0;    .    }..    // the auiliary top and down squares.    int aux_u = 0;.    int aux_d = n*n+1;..    // join the auiliary squares with top and bottom rows.    for (int col=1; col&lt;=n; col++) uf.union(aux_u, getindex(1, col));.    for (int col=1; col&lt;=n; col++) uf.union(aux_d, getindex(n, col));.} ...the problem is if when i want to use object ""uf"" in another method within the percolation class. for example, i create a method ""percolates"":..    public boolean percolates(){.    int n = grid[0].length;.    int aux_u = 0;.    int aux_d = n*n+1;.    return uf.connected(aux_u, aux_d);.    }...i don't get any compilation errors, but whenever this method is called at runtime, i get the error:..exception in thread ""main"" blank.lang.nullpointerexception...which, i believe it means that ""uf"" is a null object at this point. my question is, do i need to initialize this object elsewhere other than at the initialization block? and why i don't have the same problem with the ""grid"" object? that one is also initialized at the initialization block. ..i believe that fragments of code above are enough to understand the problem, but i post here the whole thing for completeness (code may be incorrect, i just post to give the context for the specific question above). thanks!..public class percolation{..private byte[][] grid;.private weightedquickunionuf uf;.private int count;..public percolation(int n){.    if (n&lt;0) throw new illegalargumentexception();.    grid = new byte[n][n];.    weightedquickunionuf uf = new weightedquickunionuf(n*n+2);..    // all grid points are closed (=0).    for (int row=1; row&lt;=n; row++){.        for (int col=1; col&lt;=n; col++) grid[row-1][col-1]=0;    .    }..    // the auiliary top and down squares.    int aux_u = 0;.    int aux_d = n*n+1;..    // join the auiliary squares with top and bottom rows.    for (int col=1; col&lt;=n; col++) uf.union(aux_u, getindex(1, col));.    for (int col=1; col&lt;=n; col++) uf.union(aux_d, getindex(n, col));.}..private int getindex(int row, int col){.    int n = grid[0].length;.    if (row&lt;1 || row&gt;n) throw new indexoutofboundsexception(""row "" + row + ""is not between 0 and "" + n);.    if (col&lt;1 || col&gt;n) throw new indexoutofboundsexception(""col "" + col + ""is not between 0 and "" + n);.    int index = n*(row-1) + col;.    return index;.}   ..public void open(int row, int col){.    int n = grid[0].length;.    if (row&lt;1 || row&gt;n) throw new indexoutofboundsexception(""row "" + row + ""is not between 0 and "" + n);.    if (col&lt;1 || col&gt;n) throw new indexoutofboundsexception(""col "" + col + ""is not between 0 and "" + n);..    if (grid[row-1][col-1] == 0){.        grid[row-1][col-1]=1; .        count++;.    }..    if (col&gt;1) connect(row, col, 'l');.    if (col&lt;n) connect(row, col, 'r');.    if (row&gt;1) connect(row, col, 'u');.    if (row&lt;n) connect(row, col, 'd');.}..private void connect(int row, int col, char option){.    if (option=='l'){.        if (isopen(row, col-1)) uf.union(getindex(row,col), getindex(row,col-1));.    }.    if (option=='r'){.        if (isopen(row, col+1)) uf.union(getindex(row,col), getindex(row,col+1));.    }.    if (option=='u'){.        if (isopen(row-1, col)) uf.union(getindex(row,col), getindex(row-1,col));.    }.    if (option=='d'){.        if (isopen(row+1, col)) uf.union(getindex(row,col), getindex(row+1,col));.    }.}       ..public boolean isopen(int row, int col){.    int n = grid[0].length;.    if (row&lt;1 || row&gt;n) throw new indexoutofboundsexception(""row "" + row + ""is not between 0 and "" + n);.    if (col&lt;1 || col&gt;n) throw new indexoutofboundsexception(""col "" + col + ""is not between 0 and "" + n);.    if (grid[row-1][col-1] == 0) return false;.    else return true;.}..public boolean isfull(int row, int col){.    int n = grid[0].length;.    int aux_u = 0;.    if (row&lt;1 || row&gt;n) throw new indexoutofboundsexception(""row "" + row + ""is not between 0 and "" + n);.    if (col&lt;1 || col&gt;n) throw new indexoutofboundsexception(""col "" + col + ""is not between 0 and "" + n);.    return uf.connected(getindex(row, col), aux_u);.}..public int numberofopensites(){.    return count; .}..public boolean percolates(){.    int n = grid[0].length;.    int aux_u = 0;.    int aux_d = n*n+1;.    return uf.connected(aux_u, aux_d);.}..public static void main(string[] args){.    percolation per = new percolation(4);.    per.open(3,2);.    stdout.println(""percolates: "" + per.percolates());.}.}"
