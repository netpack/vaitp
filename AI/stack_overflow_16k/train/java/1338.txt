"efficient way to iterate over list of files i am searching for an efficient way to iterate over thousands of files in one or more directories...the only way to iterate over files in a directory seems to be file.list*() functions. these functions effectively load the entire list of files in some sort of collection and then let the user iterate over it. this seems to be impractical in terms of time/memory consumption. i tried looking at commons-io and other similar tools. but they all ultimately call file.list*() somewhere inside. jdk7's walkfiletree() came close, but i don't have control over when to pick the next element...i have over 150,000 files in a directory and after many -xms/-xmm trial runs i got rid of memory overflow issues. but the time it takes to fill the array hasn't changed...i wish to make some sort of an iterable class that uses opendir()/closedir() like functions to lazily load file names as required. is there a way to do this?..update:..blank 7 nio.2 supports file iteration via blank.nio.file.directorystream. it is an iterable class. as for jdk6 and below, the only option is file.list*() methods."
