"returning start of a circularly linked list blank so i'm working through interview problems, and i'm given the following:../** give a circularly linked list, implement an algorithm which returns. *  the node at the beginning of the loop. */...i've seen the fastrunner &amp; slowrunner / tortoise &amp; hare method with two pointers and some clever math to find the beginning node, but i just came up with the following solution, and am wondering if theres anything wrong with it or any criticism you guys can see in comparison to the usual method of solving this. it seems too easy to me, but it makes sense that it would work: just go through the list, and if you ever hit a node that you've previously seen, that means you're at the start of your loop. ../** give a circularly linked list, implement an algorithm which returns. *  the node at the beginning of the loop. */.public static node firstinloop(node n) {.    hashset&lt;node&gt; visited = new hashset&lt;&gt;();.    while (n != null) {.        if (visited.contains(n)) {.            return n;.        } else {.            visited.add(n);.            n = n.tail;.        }.    }.    return null;.}"
