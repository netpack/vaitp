"what causes variables from one class to be affected by another? i have a game i'm working on where a weapon, that belongs to a player, releases a projectile, in some cases, many projectiles. ..however, when i pass an image class i created, called a sprite, from the weapon to the projectile, any scaling i do to that individual projectile's sprite will affect the weapon's sprite as if the sprite object for the weapon was static (it's not)...it starts from the weapon, in which i will post the relevant code for: ..weaponprojectile[0] = new pellet(releasedxcoor, releasedycoor, mainchar.getdirection(), this, 0, projectilesprite);.    for(int i = 1; i &lt; weaponprojectile.length; i++) {.        float accuracy = randomfloat((float)-2.5, (float)2.5);.        weaponprojectile[i] = new pellet(releasedxcoor, releasedycoor, mainchar.getdirection(), this, accuracy, projectilesprite);.    }...here is the pellet constructor: ..public pellet(float xcoor, float ycoor, int direction, blunderbuss fromweapon, float accuracy, sprite projectile) {.    super(xcoor, ycoor, direction, fromweapon);.    this.xcoor = xcoor;.    this.ycoor = ycoor;..    this.projectilespeed = fromweapon.getprojectilespeed() + randomfloat(-2, 2);.    this.piercemax = fromweapon.getpierce();.    this.pierce = piercemax;.    this.damage = fromweapon.getdamage();..    this.direction = direction;.    this.accuracy = accuracy;.    this.moving = projectile;.}...here's where/how i scale images: ..if(lifespan % 8 == 0) {.        this.projectilespeed --;.        width--;.        height--;.        damage -= 2.5;.        this.moving.scalewithraster(0.9);.    }...the scalewithraster method:..public void scalewithraster(double scalevalue) {.    this.spritesheet = imagescalar.getscaledimage(this.spritesheet, scalevalue);.    this.xlength *= scalevalue;.    this.ylength *= scalevalue;.}...and the imagescalar class:..public bufferedimage getscaledimage(bufferedimage image, double scalefactor) {.    this.affine.scale(scalefactor, scalefactor);.    this.op = new affinetransformop(affine, affinetransformop.type_nearest_neighbor);.    image = op.filter(image, null);..    return image;.}...the error i'm running into is the fact the raster for the image becomes too small nearly immediately, and the program crashes. even if i shift the scale factor to 0.999999, it will still kill the program within a frame or so. ..i am certain the issue revolves around the sprite object being copied, as i tested with a non-static and static counter, that was incremented each time the method was called, on the sprite object in question, and the values for both were identical...i also know it is directly affecting the weapon's sprite, as i had it draw the projectile from the weapon onto the screen, and it grew with the other projectiles. i have also tried setting it to final, which didn't prevent it form being scaled...i've ensured that nothing regarding these images is static or public, so i'm extremely confused as to how this is happening. i had originally thought that i got passed by value and pass by references for blank mixed up, but that is not the case, and such, each sprite object should be a copy of the weapon's sprite object, no?..edit: solution has been found. i had to create a copy method within the sprite object, as i didn't fully understand the rules of blank's pass by value. thanks to those who helped!"
