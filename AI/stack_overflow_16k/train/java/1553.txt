"how to validate the state of a blank enum? i would like to be able to validate the state of the enum to make sure there are no duplicate codes. for example consider the enum below...public enum uniquecodes {.    a(1), b(2), c(3), d(1);..    private final int value;..    static {.        uniquecodes[] values = uniquecodes.values();.        map&lt;integer, boolean&gt; map = new hashmap&lt;&gt;();.        for (uniquecodes code : values) {..            if (map.get(code.value) == null) {.                map.put(code.value, true);.            } else {.                string msg = string.format(.                        ""%s enum contains a non unique code %s"",.                        uniquecodes.class.getname(), code.value);.                system.err.println(msg);..                try {.                    system.exit(-1);.                } catch(securityexception e) {.                    system.err.println(""really bad things are going to happen to the application"");.                    // what can i do here to crash the jvm .                }.            }..        }.    }..    private uniquecodes(int value) {.        this.value = value;.    }..    public int getvalue() {.        return value;.    }.}...imagine the above enum with 100+ codes assigned and you want to make sure that no enum definition .contains a duplicate value. if a duplicate value is detected i want to crash the jvm but that is not that is easy to do. throwing an exception is not effective because a catch(throwable e) will catch everything...public class main {.    public static void main(string[] args) {.        try { .            system.out.println(uniquecodes.a);.        } catch(throwable e) {.            system.out.println(""invalid enum exception caught"");.        }.    }.}...i can write a unit test to prove that the enum definition is good and there are no duplicate codes. but is there a way to kind of make it self testing and fool proof so that things don't run if the enum does not have unique codes?"
