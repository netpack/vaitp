"idiomatic blank ""finally"" block that only runs on exception if you have some cleanup code that needs to run regardless of whether an exception was thrown, try { ... } finally { ... } is what you need.  but what if you want that cleanup code to only run in the event of an exception?..one possible solution is this:..boolean ok = false;.try {.    dowork();.    ok = true;.} finally {.    if (!ok) {.        docleanup();.    }.}...it does exactly what i want, but i wondered if there was a more natural way to express the idea...this alternative doesnâ€™t pass muster:..try {.    dowork();.} catch (throwable e) {.    docleanup();.    throw e; // bad: cant do this unless the enclosing function is declared to throw throwable.}...i suppose i could catch exception instead of throwable, but i don't like the idea that a non-exception throwable will bypass the cleanup code.  after all, a regular finally block still runs even for non-exception throwables...aside: in c++, you would simply use a catch-all block:..try {.    dowork();.} catch (...) {.    docleanup();.    throw;.}"
