"cloned object also clones new data, how to prevent that? edit:..thanks guys, got it! appears that the explode() function was called from the old object, rather then it's new clone! :)....i have a hashtable of such objects..class bodydataobj implements cloneable {..  world world;.  body body;..  protected bodydataobj clone() throws clonenotsupportedexception {.    return (bodydataobj) super.clone();.  }..}...when needed, i make a clone of a needed object from the hashtable..bodydataobj bodydatamaster = bdotable.get(name);.bodydataobj bodydata = null;..try {.  bodydata = (bodydataobj) bodydatamaster.clone();.} catch (clonenotsupportedexception e) { .  // handle error.}..bodydata.world = world;.bodydata.body = body;...and pass the world and body objects to my already cloned bodydata object...yet when i try to access this world and body object from within the bodydataobj object, i get a nullpointexception, as if they are cloned blanks...any ideas how to fix that?..thanks!"
