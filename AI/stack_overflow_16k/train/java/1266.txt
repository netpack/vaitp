"blank object comparison i'm trying to check if an object exists within a linked list, and perform an action depending on if it exists or not, however, blank is treating all the objects as different no matter what i do. the main code is provided below, and i'm pretty sure the error in the logic is in this code. the article and customer classes are very standard. the flag variable, which is supposed to be true if the list contains the article with the title, is always false. any help would be much appreciated...import blank.util.*;.import blank.io.*;..public class proj1 {.public static void main(string[] args) throws filenotfoundexception {..    linkedlist&lt;article&gt; articles = new linkedlist&lt;article&gt;();.    linkedlist&lt;customer&gt; customers = new linkedlist&lt;customer&gt;();.    listiterator&lt;customer&gt; it = customers.listiterator();.    int id = 0;.    string command = """";..    if (args.length == 0 || args[0] == null) {.        system.out.println(""please give a valid command file"");.    } else {.        try {.            scanner reader = new scanner(new fileinputstream(args[0]));..            while (reader.hasnext()) {.                string arg = reader.nextline();.                arg.split("" "");.                string[] commands = arg.split(""\s+"");..                if (isint(commands[0])) {.                    id = integer.parseint(commands[0]);.                    command = commands[1];.                    customer temp = new customer(id);.                    if (customers.size() == 0) {.                        customers.add(temp);.                    } else {.                        boolean flag = false;.                        for (int i = 0; i &lt; customers.size(); i++) {.                            if (id == customers.get(i).getid()) {.                                flag = true;.                            }.                        }.                        if (flag == false) {.                            customers.add(temp);.                        }.                    }.                } else {.                    command = commands[0];.                }.                // system.out.println(id+"" ""+command);.                if (command.equalsignorecase(""borrow"")) {.                    string title = """";.                    int x = commands.length;.                    boolean flag = false;.                    for (int j = 2; j &lt; x; j++) {.                        title += commands[j] + "" "";.                    }.                    article article = new article(title);.                    system.out.println(articles.size());.                    if (articles.size() == 0) {.                        articles.add(article);.                    } else {..                        for (int i = 0; i &lt; articles.size(); i++) {.                            if (article.gettitle() == articles.get(i).gettitle()) {.                                flag = true;.                            }.                        }.                        if (flag == false) {.                            articles.add(article);.                        }.                    }..                    system.out.println(flag);.                    for (int i = 0; i &lt; customers.size(); i++) {.                        if (customers.get(i).customerlist().contains(title) &amp;&amp; flag == true) {.                            article.addtoq(customers.get(i));..                        } else {.                            customers.get(i).customerborrow(article);..                        }..                    }..                    // system.out.println(title);.                } else if (command.equalsignorecase(""return"")) {.                    string title = """";.                    int x = commands.length;.                    for (int j = 2; j &lt; x; j++) {.                        title += commands[j] + "" "";.                    }.                    article article = new article(title);.                    if (articles.size() == 0) {.                        articles.add(article);.                    } else {.                        boolean flag = false;.                        for (int i = 0; i &lt; articles.size(); i++) {.                            if (title == articles.get(i).gettitle()) {.                                flag = true;.                            }.                        }.                        if (flag == false) {.                            articles.add(article);.                        }.                    }.                    for (int i = 0; i &lt; customers.size(); i++) {.                        if (id == customers.get(i).getid()) {.                            customers.get(i).customerreturn(article);.                        }.                    }.                    // system.out.println(title);.                } else if (command.equalsignorecase(""list"")) {.                    for (int i = 0; i &lt; customers.size(); i++) {.                        if (id == customers.get(i).getid()) {.                            system.out.println(""customer "" + id.                                    + "" currently has: "".                                    + customers.get(i).customerlist());.                        }.                    }.                } else if (command.equalsignorecase(""whohas"")) {.                    string title = """";.                    int x = commands.length;.                    for (int i = 1; i &lt; x; i++) {.                        title += commands[i] + "" "";.                    }.                    boolean flag = false;.                    int tempid = 0;.                    for (int i = 0; i &lt; customers.size(); i++) {.                        tempid = customers.get(i).getid();.                        if (customers.get(i).customerlist().contains(title)) {.                            flag = true;.                            tempid = customers.get(i).getid();.                        }.                    }.                    if (flag = true) {.                        system.out.println(tempid + "" currently has "".                                + title);.                    } else {.                        system.out.                                .println(""currently no one has checked out "".                                        + title);.                    }..                    // system.out.println(title);.                } else if (command.equalsignorecase(""waitlist"")) {.                    string title = """";.                    int x = commands.length;.                    for (int i = 1; i &lt; x; i++) {.                        title += commands[i] + "" "";.                    }.                    for (int i = 0; i &lt; customers.size(); i++) {.                        if (customers.get(i).customerlist().contains(title)) {.                            articles.get(i).printq();..                        }.                    }.                    // system.out.println(title);.                } else if (command.equalsignorecase(""listcustomers"")) {.                    system.out.println(""customers include: "");.                    for (int i = 0; i &lt; customers.size(); i++) {.                        system.out.println(customers.get(i).getid());.                    }...                } else {.                    system.out.println(""command not recognized"");.                }..            }..            reader.close();.        }..        catch (exception e) {.            system.out.println(""command not formatted correctly"");.        }.    }..}..public static boolean isint(string string) {.    try {.        integer.parseint(string);..    } catch (numberformatexception nfe) {.        return false;.    }.    return true;.}..}...commands such as ..29 borrow ""new york times""..29 borrow ""new york times""..allow duplicates, and i'm trying to avoid this. thanks."
