"how to make the blank code generic for handling different kind of pojos and adding data to that? i have different kind of customer pojo. and i have a function which takes customer details in a string format and take the type of the customer as well. now, with this function i wanted to add the some information to it and then return the json string. i can do it by checking for type and deserializing to appropriate objects and handle it. but i wanted to figure out some way of refactoring which can do this without knowing the type of customers...following are my classes:..@value.immutable.public interface customer1 {..    string firstname();..    string phonenumber();..    @value.immutable.    interface address1 {.        string addressline();.    }.}...========..@value.immutable.public interface customer2 {..    string firstname();..    string lastname();..    @value.immutable.    interface address2 {.        string addressline();..        string addressline2();.    }.}...========..public enum customertype {.    customer1(customer1.class, customer1.address1.class),.    customer2(customer2.class, customer2.address2.class);..    private final class&lt;?&gt; type;..    private final optional&lt;class&lt;?&gt;&gt; addresstype;..    customertype(final class&lt;?&gt; type) {.        this.type = type;.        this.addresstype = optional.empty();.    }..    customertype(final class&lt;?&gt; type, final class&lt;?&gt; addresstype) {.        this.type = type;.        this.addresstype = optional.of(addresstype);.    }..    public class&lt;?&gt; gettype() {.        return type;.    }..    public optional&lt;class&lt;?&gt;&gt; getaddresstype() {.        return addresstype;.    }.}...========..    private static final gson gson;..public string check(string customertype, string customerdetails, string addressdetails) {.    // write this function such that it doesn't have to do check on what is customer type...    if (customertype.customer1.name().equals(type)) {..        customer1.address1 address1 = gson.fromjson(addressdetails, customer1.address1.class);..        customer1 updatedcustomerdetails = immutablecustomer1.copyof(gson.fromjson(customerdetails, customer1.class)).                .withaddress1(address1);..        return gson.tojson(updatedcustomerdetails);.    } else if (customertype.customer2.name().equals(type)) {.        /// similar like above.    } else {.        return null;.    }...is there any way i can generalize my check function using the customertype library? i am ready to refactor my code to any level. probably my current model of customer is wrong which makes me not do that easily."
