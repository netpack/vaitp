"jar file not able to find the folder location i have a code which gets the list of class file in given package name. however, code return me list of class files available in given package (com.testscript) but when i run the jar with same code with package (src.com.testscript) it does not return me the list of class file available in folder and sub folder. i have placed this jar file under main folder which contain jar file and scr package. below is my code which i use to get class list...package com.generateui.createxml;..import blank.io.ioexception;.import blank.lang.reflect.constructor;.import blank.io.*;.import blank.lang.reflect.method;.import blank.net.url;.import blank.util.arraylist;.import blank.util.enumeration;.import blank.util.hashmap;.import blank.util.list;.import blank.util.map;.import blank.util.set;..import blankx.xml.parsers.documentbuilder;.import blankx.xml.parsers.documentbuilderfactory;.import blankx.xml.parsers.parserconfigurationexception;.import blankx.xml.transform.transformer;.import blankx.xml.transform.transformerexception;.import blankx.xml.transform.transformerfactory;.import blankx.xml.transform.dom.domsource;.import blankx.xml.transform.stream.streamresult;..import org.testng.iannotationtransformer;.import org.testng.annotations.itestannotation;.import org.testng.internal.classhelper;.import org.testng.internal.annotations.annotationhelper;.import org.testng.internal.annotations.iannotationfinder;.import org.testng.internal.annotations.jdk15annotationfinder;.import org.w3c.dom.document;.import org.w3c.dom.element;..import com.setup.createmethodslist;..public class findtestmethodsintestclass {..    public boolean ismethodslistxmlready() throws classnotfoundexception, ioexception, interruptedexception {.        findtestmethodsintestclass ftmitc = new findtestmethodsintestclass();.        boolean bool=false;.        boolean isxmlfileexist = false;.        map&lt;string,createmethodslist&gt; amap=new hashmap&lt;string,createmethodslist&gt;();.        class[] classes=getclasses(""com.testscript"");.        iannotationfinder finder = new jdk15annotationfinder(new dummytransformer());.        for(class cls:classes){.            string temp=cls.tostring();.            string[] classname=temp.split(""\."");.            string[] classpaht=temp.split("" "");.            list&lt;string&gt; mnames=new arraylist();.            set&lt;method&gt; allmethods = classhelper.getavailablemethods(cls);.            if(!(allmethods==null)){.                for (method eachmethod : allmethods) {.                    itestannotation value = annotationhelper.findtest(finder, eachmethod);.                    if (value != null) {.                        mnames.add(eachmethod.getname());.                        bool=true;.                    }.                }.                if(bool){.                    int lastindex=classname.length-1;.                    amap.put(classname[lastindex],new createmethodslist(mnames,classpaht[1]));.                }.            }.        }.        if(ftmitc.createxml(amap)){.            isxmlfileexist=true;.        }.        return isxmlfileexist;.    }..    public static class dummytransformer implements iannotationtransformer {..        @suppresswarnings(""rawtypes"").        @override.        public void transform(itestannotation annotation, class testclass, constructor testconstructor,.                method testmethod) {.        }.    }..    /**.     * scans all classes accessible from the context class loader which belong to the given package and subpackages..     *.     * @param packagename the base package.     * @return the classes.     * @throws classnotfoundexception.     * @throws ioexception.     */.    private static class[] getclasses(string packagename)  throws classnotfoundexception, ioexception {..        classloader classloader = thread.currentthread().getcontextclassloader();.        assert classloader != null;.        string path = packagename.replace('.', '/');.        enumeration&lt;url&gt; resources = classloader.getresources(path);.        list&lt;file&gt; dirs = new arraylist&lt;file&gt;();.        system.out.println(""&lt;url&gt; resources: ""+resources);.        while (resources.hasmoreelements()) {.            url resource = new url( resources.nextelement().tostring().replace(""%20"", "" ""));.            system.out.println(""url resource: ""+resources);.            dirs.add(new file(resource.getfile()));.        }.        arraylist&lt;class&gt; classes = new arraylist&lt;class&gt;();.        for (file directory : dirs) {.            classes.addall(findclasses(directory, packagename));.        }.        system.out.println(""&lt;class&gt; classes: ""+resources);.        return classes.toarray(new class[classes.size()]);.    }..    /**.     * recursive method used to find all classes in a given directory and subdirs..     *.     * @param directory   the base directory.     * @param packagename the package name for classes found inside the base directory.     * @return the classes.     * @throws classnotfoundexception.     */.    private static list&lt;class&gt; findclasses(file directory, string packagename) throws classnotfoundexception {.        list&lt;class&gt; classes = new arraylist&lt;class&gt;();.        if (!directory.exists()) {.            return classes;.        }.        file[] files = directory.listfiles();.        for (file file : files) {.            if (file.isdirectory()) {.                assert !file.getname().contains(""."");.                classes.addall(findclasses(file, packagename + ""."" + file.getname()));.            } else if (file.getname().endswith("".class"")) {.                classes.add(class.forname(packagename + '.' + file.getname().substring(0, file.getname().length() - 6)));.            }.        }.        return classes;.    }..    public boolean createxml(map map) throws interruptedexception{.        boolean bool=false;.        try {.            file file = new file("".\methodslist.xml"");.            if(file.exists()){.                file.delete();.                thread.sleep(2000);.            }.            set&lt;string&gt; keys=map.keyset();.            list&lt;string&gt;methodsname=new arraylist();.            documentbuilderfactory docfactory = documentbuilderfactory.newinstance();.            documentbuilder docbuilder = docfactory.newdocumentbuilder();..            // root elements.            document doc = docbuilder.newdocument();.            element rootelement = doc.createelement(""testmethodslist"");.            doc.appendchild(rootelement);.            for(string key:keys){.                //              system.out.println(key);.                // classname elements.                element classname = doc.createelement(key);.                rootelement.appendchild(classname);.                methodsname=((createmethodslist) map.get(key)).getmehodslist();.                string path=((createmethodslist) map.get(key)).getclasspath();.                element classpath = doc.createelement(""classpath"");.                classpath.appendchild(doc.createtextnode(path));.                classname.appendchild(classpath);.                for(string str:methodsname){.                    // methodname elements.                    element methodname = doc.createelement(""methodname"");.                    methodname.appendchild(doc.createtextnode(str));.                    classname.appendchild(methodname);.                }.            }..            // write the content into xml file.            transformerfactory transformerfactory = transformerfactory.newinstance();.            transformer transformer = transformerfactory.newtransformer();.            domsource source = new domsource(doc);.            string filepath="".\methodslist.xml"";.            streamresult result = new streamresult(new file(filepath).tostring().replace(""%20"", "" ""));.            //streamresult result =  new streamresult(system.out);.            transformer.transform(source, result);.            if(new file("".\methodslist.xml"").exists()){.                bool=true;.            }.            // output to console for testing.            // streamresult result = new streamresult(system.out);..        } catch (parserconfigurationexception pce) {.            bool=false;.            pce.printstacktrace();.        } catch (transformerexception tfe) {.            bool=false;.            tfe.printstacktrace();.        }.        return bool;.    }..    public static void main(string arg[]) throws classnotfoundexception, ioexception, interruptedexception{.        findtestmethodsintestclass ftmitc=new findtestmethodsintestclass();.        system.out.println(ftmitc.ismethodslistxmlready());.    }.}...i would appreciate if you could provide me your inputs."
