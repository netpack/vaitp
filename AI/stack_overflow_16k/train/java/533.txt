"clean code - what's the purpose of protected method starting with an underscore? i am reading uncle bob's clean code. in chapter 16, the book shows how to refactor an example. there is one part that i cannot catch the purpose of writing in such way. ...what the purpose of using protected keyword here? .why do some methods like _getminimumyear() start with an underscore? .why do use a pair of method with same name rather than an abstract method like public abstract int getminimumyear();.....public abstract class daydatefactory {..    private static daydatefactory factory = new spreadsheetdatefactory();.    public static void setinstance(daydatefactory factory) {.        daydatefactory.factory = factory;.    }..    protected abstract daydate _makedate(int ordinal);.    protected abstract daydate _makedate(int day, month month, int year);.    protected abstract daydate _makedate(int day, int month, int year);.    protected abstract daydate _makedate(blank.util.date date);.    protected abstract int _getminimumyear();.    protected abstract int _getmaximumyear();..    public static daydate makedate(int ordinal) {.      return factory._makedate(ordinal);.    }..    public static daydate makedate(int day, month month, int year) {.      return factory._makedate(day, month, year);.    }..    public static daydate makedate(int day, int month, int year) {.      return factory._makedate(day, month, year);.    }..    public static daydate makedate(blank.util.date date) {.      return factory._makedate(date);.    }..    public static int getminimumyear() {.      return factory._getminimumyear();.    }..    public static int getmaximumyear() {.      return factory._getmaximumyear();.    }.}..    public class spreadsheetdatefactory extends daydatefactory {.    public daydate _makedate(int ordinal) {.    return new spreadsheetdate(ordinal);.    }..    public daydate _makedate(int day, month month, int year) {.    return new spreadsheetdate(day, month, year);.    }..    public daydate _makedate(int day, int month, int year) {.    return new spreadsheetdate(day, month, year);.    }..    public daydate _makedate(date date) {.    final gregoriancalendar calendar = new gregoriancalendar();.    calendar.settime(date);.    return new spreadsheetdate(.    calendar.get(calendar.date),.    month.fromint(calendar.get(calendar.month) + 1),.    calendar.get(calendar.year));.    }..    protected int _getminimumyear() {.    return spreadsheetdate.minimum_year_supported;.    }..    protected int _getmaximumyear() {.    return spreadsheetdate.maximum_year_supported;.    }.}"
