"queue implementation does not return first element i want to emulate a queue by using linked lists in blank. my general schema is to have a list of nodes, with two nodes that points to the first and last element of my queue. when i perform the dequeue() i want to get ride of the first element. so far what i have done is the following:..public class node {.    public object e;.    node next;..    public node(object e) {.        this.e = e;.    }.}..public class queue {.    node queuelist;.    node first, last;.    int count;..    public void enqueue(object n) {.        node temp = new node(n);.        temp.next = last;.        last = temp;.        if (queuelist == null) {.            first = temp;.        }.        count++;.        queuelist=temp;.    }..    public object dequeue() {.        node previous = last;.        node current = last.next;.        object num = null;.        if (count == 0).            system.out.println(""empty queue"");.        else {.            while (current.next != null) {.                previous = previous.next;.                current = current.next;.            }.            num = first.e;.            first = previous;.            count--;.        }.        return num;.    }..    public void print() {.        node current = last;.        while (current != null) {.            system.out.println(current.e);.            current = current.next;.        }.    }.}...i do not want to use double linked lists, so for the dequeue() operation what i do is to traverse my list with two pointers like this:....so when the current.next points to a null, i want that previous to be the first node. the problem that i got is when i print the elements of my queue it stills prints me: 10,15,5,18, but the 18 value is not deleted. any help?..thanks"
