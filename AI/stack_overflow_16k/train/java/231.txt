"heavy prime number in blank .a prime heavy number is defined to be one that is the sum of more than one pair of prime numbers. recall that a prime number is a number greater than 1 whose only divisors are 1 and itself..for example, 16 is prime heavy because 16=3+13 and 5+11 (note that 3, 5, 11, and 13 are all prime). 24 is prime heavy because 24 = 5+19, 7+17 and 11+13. however, 8 is not prime heavy because 8 = 3+5 but no other pair of primes sums to 8..write a function named isprimeheavy that returns 1 if its argument is prime heavy, otherwise it returns 0..the function signature is.int isprimeheavy (int n) .you may assume that a function named isprime already exists that returns 1 if its argument is a prime. you can call this function but do not have to write it....i did this but it cant return a heavy prime..just returns a prime number...                                                                   ..public class prime {..    public static boolean isprimeheavy(int n) {.        if (n &lt;= 1) {.            return false;.        }.        if (n == 2) {.            return true;.        }.        for (int i = 2; i &lt;= math.sqrt(n) + 1; i++) {.            if (n % i == 0) {.                return false;.            }.        }.        return true;.    }.    public static boolean isprimeheavy(int n) {.        if (n &lt;= 1) {.            return false;.        }.        if (n == 2) {.            return true;.        }.        if (n % 2 == 0) {.            return false;.        }.        for (int i = 3; i &lt;= math.sqrt(n) + 1; i = i + 2) {.            if (n % i == 0) {.                return false;.            }.        }.        return true;.    }.}..public class primetest {..    public primetest() {.    }..    @test.    public void testisprime() throws illegalargumentexception, illegalaccessexception, invocationtargetexception {..        prime prime = new prime();.        treemap&lt;long, string&gt; methodmap = new treemap&lt;long, string&gt;();...        for (method method : prime.class.getdeclaredmethods()) {..            long starttime = system.currenttimemillis();..            int primecount = 0;.            for (int i = 0; i &lt; 1000000; i++) {.                if ((boolean) method.invoke(prime, i)) {.                    primecount++;.                }.            }..            long endtime = system.currenttimemillis();..            assert.assertequals(method.getname() + "" failed "", 78498, primecount);.            methodmap.put(endtime - starttime, method.getname());.        }...        for (entry&lt;long, string&gt; entry : methodmap.entryset()) {.            system.out.println(entry.getvalue() + "" "" + entry.getkey() + "" milli seconds "");.        }.    }.}"
