"best practice: family of classes with various type of configuration class i am defining a family of classes used to get data from different sources (from example, a class will get data from a database, another one from a file, etc.).since the data sources are so different, there is no common interface for their configurations..they all share a common method getdata() though...the idea was to define a set of predefined configurations (most of the time, the configurations used will just depend on a locale, thus there would one configuration for usa, one for france, etc.)...i have create the interface:..public interface idatasource {.    public void initialize(object config);.    public list&lt;string&gt; getdata();.}...and the class datasourcea:..public class datasourcea implements idatasource {.    public void initialize(object config) {.        datasourceaconfig configa = (datasourceaconfig) config;.        initializea(configa);.    }..    public list&lt;string&gt; getdata() {.        ....    }..    private void initializea(datasourceaconfig config) {.        ....    }.}...and datasourceb:..public class datasourceb implements idatasource {.    public void initialize(object config) {.        datasourcebconfig configb = (datasourcebconfig) config;.        initializeb(configb);.    }..    public list&lt;string&gt; getdata() {.        ....    }..    private void initializea(datasourcebconfig config) {.        ....    }.}...i am not happy with that solution (for example, using initialize(object config), then cast the config). i am looking for advice on how to rethink the problem...edit:.i generated the configuration implementations using jaxb. then the user would have to pass the type of data source and the name of the configuration file to the data source factory to get the data source."
