"equals method to compare two trees i have been learning blank recently. and i created two trees. i need to write code(equals method) to compare two trees and if they are the same, then output true or false. ..my code:..public class treeprint {..    public static void main(string[] args) {..        tree&lt;string&gt; rootfolder = new tree&lt;&gt;(""rootfolder"");..        node&lt;string&gt; video = rootfolder.addchild(""video"");.        node&lt;string&gt; music = rootfolder.addchild(""music"");.        node&lt;string&gt; picture = rootfolder.addchild(""picture"");..        video.addchild(""terminator"");.        video.addchild(""die hard"");.        video.addchild(""rocky"");.        music.addchild(""eminem"");.        node&lt;string&gt; picture01 = picture.addchild(""picasso"");.        picture01.addchild(""do vinci"");.        node&lt;string&gt; picture02 = picture01.addchild(""adil"");.        picture02.addchild(""cartoon"");.        picture02.addchild(""comics"");..         tree2&lt;string&gt; rootfolder1 = new tree2&lt;&gt;(""rootfolder1"");..        node&lt;string&gt; video1 = rootfolder1.addchild(""video"");.        node&lt;string&gt; music1 = rootfolder1.addchild(""music"");.        node&lt;string&gt; picture1 = rootfolder1.addchild(""picture"");..        video1.addchild(""terminator"");.        video1.addchild(""die hard"");.        video1.addchild(""rocky"");.        music1.addchild(""eminem"");.        node&lt;string&gt; picture001 = picture1.addchild(""picasso"");.        picture001.addchild(""do vinci"");.        node&lt;string&gt; picture002 = picture001.addchild(""adil"");.        picture002.addchild(""cartoon"");.        picture002.addchild(""comics"");...        printtree(rootfolder);.        printtree(rootfolder1);...        boolean b1 = rootfolder.contains(""p0"");.        system.out.println(b1);.        boolean b2 = rootfolder1.contains(""eminem"");.        system.out.println(b2);.    }..    private static &lt;t&gt; void printtree(node&lt;t&gt; node) {.        printtree(node, 0);.    }..    private static &lt;t&gt; void printtree(node&lt;t&gt; node, int level) {.        printnode(node, level);.        if (node.getchildren() != null) {.            for (node childnode : node.getchildren()) {.                printtree(childnode, level + 1);.            }.        }.    }..    private static &lt;t&gt; void printnode(node&lt;t&gt; kid, int level) {..        for (int i = 0; i &lt; level; i++) {.            system.out.print(""  "");.        }..        system.out.println(kid.getdata());.    }.}.....first tree:..public class tree&lt;t&gt; extends node&lt;t&gt; {..    public tree(t data) {..        super(data, null);.    }.    public boolean contains(t value) {.        return recurse(iterate(), value);.    }..    private boolean recurse(list&lt;node&lt;t&gt;&gt; children, t value) {.        return children.stream().                .anymatch(item -&gt; item.getdata().equals(value) || item.iterate().size() &gt; 0 &amp;&amp; recurse(item.iterate(), value));.    }...}.....public class node&lt;t&gt; {.    private t data;.    private final list&lt;node&lt;t&gt;&gt; children = new arraylist&lt;&gt;();.    private final node&lt;t&gt; parent;...    public node(t data, node&lt;t&gt; parent) {.        this.data = data;.        this.parent = parent;.    }..    public void addchild(node&lt;t&gt; node) {.        children.add(node);.    }...    public node&lt;t&gt; addchild(t nodedata) {..        node&lt;t&gt; newnode = new node&lt;t&gt;( nodedata, this ); .        children.add( newnode );.        return newnode;.    }...    public list&lt;node&lt;t&gt;&gt; iterate() {.        return children;.    }..    public void remove(node&lt;t&gt; node) {.        children.remove(node);.    }..    public list&lt;node&lt;t&gt;&gt; getchildren() {.        return children;.    }..    public node getparent() {.        return parent;.    }..    public t getdata() {.        return data;.    }..    public void setdata(t data) {.        this.data = data;.    }.....second tree:..public class tree2&lt;t&gt; extends node&lt;t&gt; {..    public tree2(t data) {..        super(data, null);.    }.    public boolean contains(t value) {.        return recurse(iterate(), value);.    }..    private boolean recurse(list&lt;node&lt;t&gt;&gt; children, t value) {.        return children.stream().                .anymatch(item -&gt; item.getdata().equals(value) || item.iterate().size() &gt; 0 &amp;&amp; recurse(item.iterate(), value));.    }.}"
