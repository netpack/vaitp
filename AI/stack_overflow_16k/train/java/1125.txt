"how to force stop method exection from callable<object> call method i have a method:..public class datasource  {..    public void create() throws myexception{..     // can take more time than expected..    }.}...i want to add timeout to this method...i tried:..public class test {..    public static void main(string[] args) throws myexception {.        runwithtimeout(new datasource());.    }..    public static void runwithtimeout(final datasource ds) throws myexception {..        executorservice executor = executors.newsinglethreadexecutor();.        callable&lt;object&gt; task = new callable&lt;object&gt;() {.            public object call() throws myexception {.                ds.create();.                return null;.            }.        };.        future&lt;object&gt; future = executor.submit(task);.        try {.            future.get(5, timeunit.seconds);..        } catch (timeoutexception tex) {.            throw new myexception(""timeoutexception. caused by"", tex);..        } catch (interruptedexception iex) {.            throw new myexception(""interruptedexception. caused by"", iex);..        } catch (executionexception eex) {.            throw new myexception(""interruptedexception. caused by"", eex);..        } finally {.            future.cancel(true);.            executor.shutdown();.        }.    }.}...but create method is still running. how can i force stop it. ..i can't modify create() method. so i can't  add isinterrupted() on current thread in create() method."
