"blank threading behavior i saw the following example on the internet: ..public class twothreads {.public static class thread1 extends thread {.    public void run() {.        system.out.println(""a"");.        system.out.println(""b"");.    }.}.public static class thread2 extends thread {.    public void run() {.        system.out.println(""1"");.        system.out.println(""2"");.    }.}.public static void main(string[] args) {.    new thread1().start();.    new thread2().start();.}...} ...my question is :...it is guarantee that ""a"" will be printed before ""b"" and ""1"" will be printed before ""2"", but is it possible that ""1"" will be printed twice successively by another thread?.in this piece of code we have at least 3 threads(1 main and 2 created). can we imagine the scheduler runs 1 thread: new thread1().start(); then gave up immediately after system.out.println(""1""); then again run another threat in thread1().start(); that prints ""1"" again ?.i am using netbeans ide, it seems running such a program always lead to the same first result, so it seems there something with caching. from my understanding you deal with that with declaring volatile variables, can it be done here,how ? if not then what is the solution for caching ?.in today's computer's processor, we mostly have 2 processors,and still we find many multi-threading programs on the net uses more than 2 threads! isn't this process becomes heavy and slow regarding compiling ?"
