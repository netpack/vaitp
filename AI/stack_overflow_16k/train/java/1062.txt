"blank message expiry checking i have a simple question but a little confusing for me. basically, i have a requirement that when a stock arrives at the particaular time, it needs to be checked that is the stock older and if it is older then the stock should be garbaged...i have implemented the below code with unit tests. could you please verify that it looks ok to you? basically the current time is the threshold meaning that the application is a time ahead, so the current time has been reduced...import blank.util.date;..  public class expiry {..  public expiry() {..  }..  public boolean hasexpired(date currenttime, date receivedat) {.    boolean isexpired = false;.    system.out.println(""current time is : "" + currenttime);.    system.out.println(""received at is :"" + receivedat);.    if (currenttime.before(receivedat)) {.        system.out.println(""keep it"");.        isexpired = true;.    }.    else {.        system.out.println(""garbage it"");.    }.    return isexpired;.    }.    }..    public class expirytest {...    @test.    public void testkeepit() {.    expiry expiry = new expiry();.    calendar receivedat = calendar.getinstance();.    receivedat.set(calendar.date, 21);.    receivedat.set(calendar.month, 10);.    receivedat.set(calendar.year, 2015);.    receivedat.set(calendar.hour_of_day, 21);.    receivedat.set(calendar.minute, 00);.    calendar currenttime = calendar.getinstance();.    currenttime.set(calendar.date, 21);.    currenttime.set(calendar.month, 10);.    currenttime.set(calendar.year, 2015);.    currenttime.set(calendar.hour_of_day, 20);.    currenttime.set(calendar.minute, 59);.    boolean isexpired = expiry.hasexpired(currenttime.gettime(),.            receivedat.gettime());.    assertequals(true, isexpired);.  }..  @test.  public void testgarbageitequalsto() {.    expiry expiry = new expiry();.    calendar receivedat = calendar.getinstance();.    receivedat.set(calendar.date, 21);.    receivedat.set(calendar.month, 10);.    receivedat.set(calendar.year, 2015);.    receivedat.set(calendar.hour_of_day, 21);.    receivedat.set(calendar.minute, 00);.    calendar currenttime = calendar.getinstance();.    currenttime.set(calendar.date, 21);.    currenttime.set(calendar.month, 10);.    currenttime.set(calendar.year, 2015);.    currenttime.set(calendar.hour_of_day, 21);.    currenttime.set(calendar.minute, 00);.    boolean isexpired = expiry.hasexpired(currenttime.gettime(),.            receivedat.gettime());.    assertequals(false, isexpired);.    }..    @test.    public void testgarbageitagain() {.    expiry expiry = new expiry();.    calendar receivedat = calendar.getinstance();.    receivedat.set(calendar.date, 21);.    receivedat.set(calendar.month, 10);.    receivedat.set(calendar.year, 2015);.    receivedat.set(calendar.hour_of_day, 21);.    receivedat.set(calendar.minute, 00);.    receivedat.set(calendar.second, 01);.    calendar currenttime = calendar.getinstance();.    currenttime.set(calendar.date, 21);.    currenttime.set(calendar.month, 10);.    currenttime.set(calendar.year, 2015);.    currenttime.set(calendar.hour_of_day, 21);.    currenttime.set(calendar.minute, 01);.    currenttime.set(calendar.second, 00);.    boolean isexpired = expiry.hasexpired(currenttime.gettime(),.            receivedat.gettime());.    assertequals(false, isexpired);.    }.    }"
