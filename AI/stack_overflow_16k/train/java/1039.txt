"abstract factory builder below is my builder pattern class which generates an employee object. ..public class employee {.    // required parameters.    private string hdd;.    private string ram;..    // optional parameters.    private boolean isgraphicscardenabled;.    private boolean isbluetoothenabled;..    public string gethdd() {.        return hdd;.    }.    public string getram() {.        return ram;.    }.    public boolean isgraphicscardenabled() {.        return isgraphicscardenabled;.    }.    public boolean isbluetoothenabled() {.        return isbluetoothenabled;.    }..    private employee(employeebuilder builder) {.        this.hdd=builder.hdd;.        this.ram=builder.ram;.        this.isgraphicscardenabled=builder.isgraphicscardenabled;.        this.isbluetoothenabled=builder.isbluetoothenabled;.    }..    public static class employeebuilder {.        private string hdd;.        private string ram;..        // optional parameters.        private boolean isgraphicscardenabled;.        private boolean isbluetoothenabled;..        public employeebuilder(string hdd, string ram){.            this.hdd = hdd;.            this.ram = ram;.        }..        public employeebuilder isgraphicscardenabled(boolean isgraphicscardenabled){.            this.isgraphicscardenabled = isgraphicscardenabled;.            return this;.        }..        public employeebuilder isbluetoothenabled(boolean isbluetoothenabled){.            this.isbluetoothenabled = isbluetoothenabled;.            return this;.        }..        public employee build(){.            return new employee(this);.        }.    }..    public static void main(string args[]){.        employee emp = new employee.employeebuilder(""500"", ""64"")..                isgraphicscardenabled(true)..                isgraphicscardenabled(true).build();..        system.out.println(emp.hdd);.        system.out.println(emp.gethdd());..    }.}...a builder whose parameters have been set makes a fine abstract factory [gamma95, p. 87]. in other words, a client can pass such a builder to a method to enable the method to create one or more objects for the client. to enable this usage, you need a type to represent the builder. if you are using release 1.5 or a later release, a single generic type (item 26) suffices for all builders, no matter what type of object theyâ€™re building. ..can anyone add some light on the above paragraph with an working example. i am not able to understand the above para which is taken from effective blank - joshua bloch."
