"implementing compile time warnings lets say i have three classes as follows..class a { //master class...  public int getnum() {.    return 1;.  }..}..class b extends a {.  @override.  public int getnum() {.    return 2;.  }.}.class c extends a {.  @override.  public int getnum() {.    return 3;.  }.}...now if i neeed to create one more method (say getrandnum() on class c),is there any annotation or something way to warn me while compiling that the method is only present in class c but not in class a(the master class) maybe some annotation like ""shownotimplementedonmasterclasswarning""?..also,is there any way to add exception to the above mentioned rule? maybe to create a method in class c that need not be in class a using some annotation like ""suppressnotimplementedonmasterclasswarning""?..edit: the problem is i have a very large codebase now and while writing the individual methods, the @override annotation was ignored by the developers then and i couldn't find which are overridden methods and which are not! ..so is there any way i can force all methods to have @override annotation by default and perform @suppressoverride for only the methods i dont need after checking?"
