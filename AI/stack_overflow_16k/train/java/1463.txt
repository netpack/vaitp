"how to check ""modified"" state: an extra field, or == operator? i'm designing a new service that takes two strings, and may or may not change them and returns the (possibly) modified value...for instance:..public class phrases.{.    public string phrase1 { get; set; }.    public string phrase2 { get; set; }.}..public interface imodifier.{.    phrases go(phrases phrases);.}...in addition, the client should know if the original search phrase changed or not...the question is: what should the returned type be?..if it's the same phrases class, then there should be an overload for the == operator (and/or equals method). so that the client's code would look like this:..phrases phrases = new phrases { phrase1 = ""hello"", phrase2 = ""world"" };.phrases modifierresult = somemodifier.go(phrases);.if (modifierresult.equals(phrases)).    // do something.    ;...however, this leaves the client to keep the original state, too...the alternative is to have an extra field in the modifier result's returned type:..public interface imodifier.{.    modifiedphrases go(phrases phrases);.}..public class modifiedphrases : phrases.{.    public bool ismodified { get; set; }.}...and then the client would have the ismodified field, without the need to keep the original instance..however, this way we have another type in the system. in addition, maybe it's not the service's responsibility to indicate for modification in the first place. so maybe it's the client's responsibility to check for modification, and hence the ismodified might be unnecessary...what would you choose, and why?"
