"blank jpa class association, nullpointerexception? i'm currently improving an old project that is working fine, i don't have to modify the code nor the database, all i can do is build the correct mapping for it.....there's the actor, role and movie classes... with 3 respective tables in the database :..table 'actor' :..`id` int.`name` varchar...table 'role' :..`film` int.`actor` int.`role` varchar.primary key (film, actor, role).foreign key (film) references film(id)...table 'movie' :..`id` int.`title` varchar...so there are two associations to be made, [one actor has one role in one movie], and [one movie contains many roles associated to their respectives actors]...and basically, there should be a method in movie class that allows to create a new role associated to an actor..film.createrole(actor, ""role""); //returning a role...i'm getting all the time the same error : blank nullpointerexception from hibernate. i guess there's a misconception in my code, any idea how i can do the correct mapping?..code :..movie.blank :..@entity.@table(name = ""movie"").public class movie implements serializable.{.@id.@generatedvalue.private int id;.private string title;..@onetomany.@jointable(name = ""role"",.joincolumns = {.@joincolumn(name=""role"").}.).private list&lt;role&gt; roles;..//getters and setters..public role createrole(actor actor, string role).{.role myrole = new role();.roleid roleid = new roleid();.roleid.setmovie(this.id);.roleid.setrole(role);.roleid.setactor(actor.getid());.myrole.setid(roleid);.return myrole;.}.}...role.blank :..@entity.@table(name = ""role"").public class role implements serializable.{.@embeddedid.private roleid roleid;..//getters and setters.}...roleid.blank :..@embeddable.public class roleid implements serializable.{..@manytoone(optional=true).@jointable(name = ""role"", joincolumns = {.@joincolumn(name=""movie"")}).private int movie;..@manytoone(optional=true).@jointable(name = ""role"", joincolumns = {.@joincolumn(name=""actor"").}).private int actor;..private string role;..//getters and setters.}...actor.blank :..@entity.@table(name = ""actor"").public class actor implements serializable.{.@id.@generatedvalue.private int id;.private string name;...@onetomany.@jointable(name = ""role"", joincolumns = {.@joincolumn(name=""role"", unique = true) }).private list&lt;role&gt; roles;..//getters and setters..}...where's the mistake then?.thanks."
