"switch vs map for command prompt loop i'm writing a program that runs as a repeating command prompt. the user starts the program, then is prompted to enter commands until the command exit is entered. the way it works is that each command is represented by a class that inherits from a commandexecutor interface i created, which has an oncommand method that is called when that particular command is entered...currently, i have a hashmap&lt;string, commandexecutor&gt; in my main class that stores all of the commands and their corresponding executors. when the program is launched, each command is registered into the map like so:..map&lt;string, commandexecutor&gt; executors = new hashmap&lt;string, commandexecutor&gt;();..executors.put(""help"", new helpcommand());.executors.put(""list"", new listcommand());.executors.put(""update"", new updatecommand());.executors.put(""wizard"", new wizard());.executors.put(""build"", new buildcommand());.executors.put(""new"", new newcommand());.executors.put(""select"", new selectcommand());...with this design, the program loop looks like this:..bufferedreader in = new bufferedreader(new inputstreamreader(system.in));.boolean cont;..while(cont) {.    // reads line, parses input:.    // string lastcommand for command.    // string[] parameters for parameters..    if(lastcommand.equals(""exit"") {.        cont = false;.    } else {.        if(!executors.containskey(lastcommand)).            system.out.println(""unknown command!"");.        executors.get(lastcommand).oncommand(lastcommand, parameters);.    }.}...some code in the above snipets has been omitted for simplicity, as it is not relevant to this question...is this the most efficient way to go about something like this, or would it be better to simply use a switch statement kind of like this:..commandexecutor exec;..switch(lastinput) {.case ""exit"":.    cont = false;.    break;.case ""help"".    exec = new helpcommand();.    break;.case ""list"";.    exec = new listcommand();.    break;.case ""update"";.    exec = new updatecommand();.    break;.// etc.default:.    system.out.println(""unknown command!"");.}..exec.oncommand(lastinput, parameters);...this isn't so much an issue of getting the program to work. rather, it as a question of which design is going to be better in terms of efficiency and performance, as well as which one is simply going to yield better written code."
