"game loop semi fixed time step understanding i have an game loop that does nothing but just analyze no of updates and time taken to render an frame. here is the main class..public static void main(string args[])throws exception.{.  clock clock=new clock(math.pow(10,9),80);..  double delta=0;.  int updates=0;.  long timer1=system.currenttimemillis();..  while(true).  {.   long frametime=clock.getdelta(); ..   delta+=clock.getdeltaupdate(frametime);.   while(delta&gt;=1).   {   .    updates++;  .    delta--;   .   }..   if(system.currenttimemillis()-timer1&gt;=1000).   {   .    updates=0;.    timer1+=1000;.   }        .  }. }...here is the class clock.blank..public class clock.{.  private long.  previous=0,.  current=0;..  private final double updatecount;..  clock(double timing,double updates).  {.   current=system.nanotime();.   previous=current;..   updatecount=timing/updates;.  }..  long getdelta().  {.   current=system.nanotime();.   long delta=current-previous;.   previous=current;..   return delta;.  }..  double getdeltaupdate(long delta){return delta/updatecount;}.}...here is how i understand it using simple linear algebra..let's say..in  1000000000ns(1 second)   -&gt;    60 frames to be rendered(this is our target).. therefore  in (x)ns          -&gt;    1 frame to be rendered...and  by simple cross multiplication..        60x=1000000000ns..        x=1000000000/60...which means we want our main loop to take 1000000000/60(ns) to render an frame.which is our target..but our system takes it's own time to render an frame. let's say at one specific.frame it takes 135ns to render an frame. therefore by using linear algebra..let y=(1000000000/60) be the time we want our system to take to render 1 frame. therefore..our goal     in   y(ns)      -&gt;  1 frame should be rendered....but system   in   135(ns)    -&gt;  k(no of subframes to be rendered to make same ..                                   amount of progress as in y(ns) of time) ...therefore  by cross multiplication  ..k*y=135ns      -&gt;       k=135ns/y  -&gt;   i.e  -&gt;  135ns/(1000000000)/60..or k  =   (135ns*60)/1000000000...so k tell's us no of updates/steps to take in an single frame so as to simulate some 60 steps of physics in 1000ms even if system takes varying amount of time to render an frame ..hence in the main class we have the line of code..delta+=clock.getdeltaupdate(frametime);...where clock.getdeltaupdate(long) return's 'k' .and variable ""frametime"" is the time.system takes to render one frame(in our example 135ns)..the one concept i don't understand is why are we doing..delta+= ...and not simply..delta=...what i believe is unsimulated(fractional value of k)updates from our previous frame would get added into our next frame which should cause incorrect no of updates for concecutive frames but that's not the case and it doesn't work ..can anyone plzz explain why delta+= work's and delta= dosen't?..sorry for wasting anybody's time here but i'm really am a nobe when it comes to math's..also in lwjgl 2.9.3 we have an function called display.sync(int) which caps our..fps...is it possible to implement that feature in this game loop?..thanking u."
