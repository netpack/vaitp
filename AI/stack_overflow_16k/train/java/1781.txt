"merge-insertion sort only works for small arrays i found this code which was helpful for merge-insertion sort, but it will only work for a small array of items, i need to be able to sort arrays of integers up to size 50,000. i added further logic to take a list of the items, randomize them, sort and then write the sorted integers into another file. not sure what the issue is. i messed with the value of k but no luck there. .. import blank.io.bufferedwriter;. import blank.io.file;. import blank.io.filenotfoundexception;. import blank.io.filewriter;. import blank.io.ioexception;. import blank.io.printwriter;. import blank.util.arrays;. import blank.util.random;. import blank.util.scanner;.. public class hybridsort . {..  public static final int k = 5;.  public static void insertionsort(int arr[], int p, int q) {.   for (int i = p; i &lt; q; i++) {.    int tempval = arr[i + 1];.    int j = i + 1;.    while (j &gt; p &amp;&amp; arr[j - 1] &gt; tempval) {.        arr[j] = arr[j - 1];.        j--;.    }.    arr[j] = tempval;.}.int[] temp = arrays.copyofrange(arr, p, q +1);.// arrays.stream(temp).foreach(i -&gt; system.out.print(i + "" ""));.system.out.println();.}..public static void merge(int arr[], int p, int q, int r) {.int n1 = q - p + 1;.int n2 = r - q;.int[] la = arrays.copyofrange(arr, p, q +1);.int[] ra = arrays.copyofrange(arr, q+1, r +1);.int ridx = 0;.int lidx = 0;.for (int i = p; i &lt; r - p + 1; i++) {.    if (ridx == n2) {.        arr[i] = la[lidx];.        lidx++;.    } else if (lidx == n1) {.        arr[i] = ra[ridx];.        ridx++;.    } else if (ra[ridx] &gt; la[lidx]) {.        arr[i] = la[lidx];.        lidx++;.    } else {.        arr[i] = ra[ridx];.        ridx++;.    }.}.}..public static void sort(int arr[], int p, int r) {.if (r - p &gt; k) {.    int q = (p + r) / 2;.    sort(arr, p, q);.    sort(arr, q + 1, r);.    merge(arr, p, q, r);.} else {.    insertionsort(arr, p, r);.}.}..public static void main(string string[]) {..long starttime= system.nanotime(); .system.out.println(starttime);..int arr[] = new int[10];.int y = 0;.int nums;.try {.        scanner scan = new scanner(new file(""randomnum""));.        while (scan.hasnextint()).        {.            nums = scan.nextint();.            arr[y] = nums;.            y++; .        }.    scan.close();   .} .catch (filenotfoundexception e) .{.    // todo auto-generated catch block.    e.printstacktrace();.}..random rand = new random();..for (int i = 0; i &lt; arr.length; i++) {.    int randomindextoswap = rand.nextint(arr.length);.    int temp = arr[randomindextoswap];.    arr[randomindextoswap] = arr[i];.    arr[i] = temp;.}....//int[] a = { 2, 5, 1, 6, 7, 3, 8, 4, 9, 15, 12, 10, 11, 20, 1, 7, 6, 10};.sort(arr, 0, arr.length - 1);...try {.    filewriter fr = new filewriter(""sortedlist"");.    bufferedwriter br = new bufferedwriter(fr);.    printwriter out = new printwriter(br);.    for(int i=0; i&lt;arr.length; i++).    {.          out.write(integer.tostring(arr[i]));.          out.write(""n"");   .    }.    out.close();.}..catch(ioexception e){. system.out.println(e);   .}... long endtime=system.nanotime();. system.out.println(endtime);.. long runtime = endtime-starttime; .  system.out.println(runtime);...  //  arrays.stream(a).foreach(i -&gt; system.out.print(i + "" ""));.   }.   }"
