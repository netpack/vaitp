"why bufferedwriter write() method does not autocast to string i came this behavior of blank which for me seems a bit strange...while i was checking this post i did realize that the write() method of bufferedwriter is not applicable for long objects:..bufferedwriter writer = new bufferedwriter(new filewriter(outfile));.long l1 = new long(1);.writer.write(l1); // &lt;- this won't work as it is...while i have been using bufferedwriter a lot, it has been in the format to write multiple values using separators:..writer.write(l1 + "",""); //&lt;- this works fine....so, i am guessing the part that makes a difference is the + "","" part which virtually calls l1.tostring() + "","" before providing it as input to bufferedwriter...my question is why blank does not apply autocasting to string to these cases. i mean what problem would there be since write() expects:...either an int in a method implemented in bufferedwriter.or an array of characters.or a string in writer class....would there be any ambiguity regarding the desired result?..in a similar (according to my perceptive) system.out.print() in printstream works flawlessly:..system.out.println(l1); // &lt;- this works fine...printstream does not contain a println(long) method either. does this mean it is converted first to long and then it is used this method (out.print(long)) and so this step cannot be completed in the case of bufferedwriter?"
