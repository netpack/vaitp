"is there a blank collection that allows for a one-key-to-multiple-values relationship? i have a need for a collection type that allows for a multiple values to be associated with multiple keys.  ideally, i would use it like map, but map is intended for a given key to yield a single value.  ..below is an example of how i would like to use this:..@test.public void multipleitems() {.    index&lt;string, string&gt; index = new index&lt;string, string&gt;();.    index.add(""key1"", ""value1"");.    index.add(""key2"", ""value2"");.    index.add(""key1"", ""value3"");.    index.add(""key2"", ""value4"");.    index.add(""key1"", ""value5"");..    list&lt;string&gt; values = index.get(""key2"");..    assertequals(2, values.size());.    assertequals(""value2"", values.get(0));.    assertequals(""value4"", values.get(1));.}...i am not aware of any implementation in the jvm.  i could implement this myself, but i am hoping to find an existing implementation...recommendations?..solution..based on the recommendations below, i ended up using the guava (and wrapping it as i didn't want to expose this to the rest of my app in case i found a better solution...i used these settings for including through my gradle scripts:  'com.google.guava:guava-collections:r03'..my ""wrapper"" class looks like this:..public class indexes&lt;k, v&gt; {..    private hashmultimap&lt;k, v&gt; keytovaluesmap = hashmultimap.create();..    public void put(k key, v value) {.        this.keytovaluesmap.put(key, value);.    }..    public set&lt;v&gt; get(k key) {.        return this.keytovaluesmap.get(key);.    }..}"
