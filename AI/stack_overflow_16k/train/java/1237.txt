"which strategy is better to validate a csv line? for simplicity, given a csv line with two fields: login and score from 0 by 100 for some passed test.  ..csv line examples  ..cool;95  .clever;900  .loser;10;-1  .freak;ten  .;50  ...the task is to validate a csv line..i have two beans for a test result and a csv line..i see 3 low level strategies for a csv line parsing.  ..strategy 1. all checks are inside the csv line bean. ..class csvline {.    private string csvline;..    //constructors.    ... ..    public result getresult() throws lineexception {.        string[] fields = csvline.split("";"");.        if(fields.length != 2) {.            throw new lineexception();.        }.        //other possible checks with csvline and its fields.        ....        //in the case everything is ok.        return new result(login, score);        .    }.}..class result {.    private string login; .    private int score;..    //trivial constructor.    public result(string login, int score) {.        this.login = login;.        this.score = score;.    }.    ....}...strategy 2. all checks are inside the result bean.   ..class csvline {.    ... .    public result getresult() throws lineexception {.        return new result(csvline);     .    }.}..class result {.    ....    public result(string csvline) throws lineexception {.        string[] fields = csvline.split("";"");.        if(fields.length != 2) {.            throw new lineexception();  //own exception.        }.        this.login = getlogin(fields[0]);   //private method with checks.        this.score = getscore(fields[1]);   //conversion and checks.    }.    ....}...strategy 3. checks for the line structure are inside the csv line bean and checks for fields validness are inside the result bean. ..class csvline {.    ... .    public result getresult() throws lineexception {.        string[] fields = csvline.split("";"");.        if(fields.length != 2) {.            throw new lineexception();.        }.        try {.            return new result(fields[0], new integer(fields[1]).intvalue());.        } catch(illegalargumentexception e) {.            throw new lineexception();.        }.    }.}..class result {.    ....    public result(string login, int score) {.        if("""".equals(login)) {.            throw new illegalargumentexception();.        }.        if(score &lt; 0 || score &gt; 100) {.            throw new illegalargumentexception();.        }.        this.login = login;.        this.score = score;.    }.}...complete validation of a csv line is located inside one and the same bean in strategies 1 and 2..but each bean contains checks for its own fields and for fields of associated bean..meanwhile, in strategy 3, validation is located in proper way, but separated.  ..what to prefer?.or do both approaches make sense?"
