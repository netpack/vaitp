"trying to change a label on an event or board state hello fellow nerds i have a question!.i am working on a project which is due wednesday and i am stuck about half way through. the game is a two player game where each player takes a turn selecting from a list of 16 nodes which, when clicked add the hidden value to the players score. the project was given with a label which reads ""player 1's turn"" by default and this part of the assignment asks us to make it change text to represent who's turn it is currently. the turn changes after the current player guesses a square. there is also a ""hold"" button so the current player can skip the turn (there is a ""bust"" square hidden which sets the current player's score to zero). i think i can figure that part out after i get this part done. could you guys please help point me in the right direction? please don't solve it for me. i really want to learn this stuff, i just need some direction/advise. ..here is what it looks like when it runs:.image..thanks for all your help, this site is amazing!.here is the relevant code:..public class guicodebehind {..  private viewmodel theviewmodel;..  private list&lt;button&gt; buttons;.  private list&lt;node&gt; boardnodes;..  @fxml.    private gridpane boardgridpane;..  @fxml.    private button holdbutton;..  @fxml.    private label gamestatuslabel;..  @fxml.    private textfield player1scoretextfield;..  @fxml.    private textfield player2scoretextfield;..  public guicodebehind() {.    this.theviewmodel = new viewmodel();.    this.createbuttons();.  }..  /**.   * initializes the gui components, binding them to the view model properties.   * and setting their event handlers..   */.  @fxml.  public void initialize() {.    this.bindguicomponentstoviewmodel();.    this.addbuttonstoboard();.    this.boardnodes = this.boardgridpane.getchildren();.    this.seteventactions();.  }..  private void createbuttons() {.    this.buttons = new arraylist&lt;button&gt;();.    for (int i = 0; i &lt; 16; i++) {.      this.buttons.add(this.createbuttonwithid(i));.    }.  }..  private button createbuttonwithid(int id) {.    string buttonid = """" + (id + 1);.    button abutton = new button(""   ?   "");.    abutton.setmaxwidth(double.max_value);.    abutton.setid(buttonid);.    return abutton;.  }..  private void addbuttonstoboard() {.    for (int row = 0; row &lt; 4; row++) {.      this.addarow(row);.    }.  }..  private void addarow(int row) {.    for (int column = 0; column &lt; 4; column++) {.      this.boardgridpane.add(this.buttons.remove(0), column, row);.    }.  }..  private void bindguicomponentstoviewmodel() {.    this.player1scoretextfield.textproperty()..      bindbidirectional(this.theviewmodel.player1scoreproperty());.    this.player2scoretextfield.textproperty()..      bindbidirectional(this.theviewmodel.player2scoreproperty());.  }..  private void seteventactions() {.    for (node abutton: this.boardnodes) {.      abutton.setonmouseclicked(event -&gt; this.handleboardbuttonclick(abutton));.    }.  }..  private void handleboardbuttonclick(node abutton) {.    abutton.setdisable(true);.    this.holdbutton.requestfocus();.    this.theviewmodel.play(abutton.getid());.    ((button) abutton).settext(this.theviewmodel.selectedsquaredescription());.  }..}...the viewmodel:../**. * viewmodel defines the view model for the play-or-hold application.. */.public final class viewmodel {..  private string descriptionofselectedsquare;.  private final player player1;.  private final player player2;.  private final gameboard theboard;.  private final gamecontroller thegamecontroller;.  private stringproperty player1score;.  private stringproperty player2score;.  private stringproperty gamestatus;..  /**.   * creates a new viewmodel instance..   * .   * @precondition none.   * @postcondition the object and its properties exist.   */.  public viewmodel() {.    this.descriptionofselectedsquare = """";..    this.player1 = new regularplayer();.    this.player2 = new privilegedplayer();..    gameboardfactory factory = new onedoublepointsboardfactory(true);.    this.theboard = factory.getgameboard();..    this.thegamecontroller = new gamecontroller(this.theboard, this.player1, this.player2);..    this.player1score = new simplestringproperty(""0"");.    this.player2score = new simplestringproperty(""0"");.  }..  /**.   * returns the property that represents the score for player 1..   * .   * @precondition none.   * @return the property .   */.  public stringproperty player1scoreproperty() {.    return this.player1score;.  }..  /**.   * returns the property that represents the score for player 2..   * .   * @precondition none.   * @return the property .   */.  public stringproperty player2scoreproperty() {.    return this.player2score;.  }..  /**.   * tells the game controller to carry out the current.   * player's move..   * .   * @precondition 1 &lt;= gamesquareid &lt;= 16.   * @postcondition the current player's score reflects this move, &amp;&amp;.   *     currentmovevalue() returns the value of the.   * @param gamesquareid the id of the selected control in the gui.   */.  public void play(string gamesquareid) {.    int squareindex = integer.parseint(gamesquareid) - 1;.    this.thegamecontroller.play(squareindex);.    this.descriptionofselectedsquare = this.theboard.getsquare(squareindex).getdescription();.    this.player1score.setvalue("""" + this.player1.getscore());.    this.player2score.setvalue("""" + this.player2.getscore());..  }..  /**.   * returns the value of the current ""move""..   * .   * @precondition none.   * @return the value of the selected game board item .   */.  public string selectedsquaredescription() {.    return this.descriptionofselectedsquare;.  }..  public stringproperty gamestatusstringproperty() {.    return this.gamestatus;.  }..}"
