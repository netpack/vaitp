"avoiding instanceof with overloaded mutators i have two classes that inherit from player: simpleplayer and interleavedplayer...class b has these methods: setplayer(simpleplayer player) and setplayer(interleavedplayer player)..class a has a player field, which is designed to be either a simpleplayer or interleavedplayer. class a wants to call b.setplayer() on these players, without concerning itself with what subclass of player the object is...i overloaded b.setplayer() for the subclasses in order to avoid using instanceof in a generalized b.setplayer(player player) method. ..but on a's call to b.setplayer(), i get a symbol not found error referring to b.setplayer(player)...what design approach should i use here to resolve the issue? (a actually creates the players, so it in theory ""knows"" what it's passing to b. however, because of the way a indiscriminately treats it's player it seems to make sense just having a player that it does stuff to, rather than having to distinguish between simpleplayer and interleavedplayer)."
