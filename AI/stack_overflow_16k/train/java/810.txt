"graph implementing a comparable node blank for one of my projects in my computer science class, i have to implement a directed, weighted graph. since we are only allowed to use an adjacency list and not an adjacency matrix, i decided to create a node class that will contain my data, as well as a treeset to hold all of its edges, since the project stipulates that the edges must be sorted using the natural ordering of whatever data my graph is instantiated with. my node class looks like this: ..private class node&lt;v extends comparable&lt;v&gt;&gt; {.  private v data;.  private treeset&lt;edge&gt; edges = new treeset&lt;edge&gt;();..  public node(v data) {.      this.data = data;.  }.}...my graph itself is also a treeset that contains objects of type node. i cannot, however, add to the graph using my add method which is as follows: ..private boolean addvertex(v vertex) {.    iterator iter = graph.iterator();.    node check;..    while (iter.hasnext()) {.        check = (node) iter.next();.        if (check.data.compareto(vertex) == 0).            return false;.    }..    node n = new node(vertex);.    graph.add(n);.    return true;.}...how can i make it so that my code adds nodes to my graph class using the natural ordering of the data that the node class is instantiated with?..**edit.so based on what peter said, i was able to come up with a solution (sort of) to my problem. since my edges, per project stipulation, must be iterated over in the natural order of the data held in the nodes, i created a compareto method in my edge class that works by using the data's compareto method. it looks something like this: ..private class edge&lt;v extends comparable&lt;v&gt;&gt; implements comparable&lt;v&gt; {.  private int weight;.  private boolean visited;.  //this is the data held in the node the edge ends at.  private v endnode;..  public edge(v dest, int weight) {.      visited = false;.      endnode = dest;.      this.weight = weight;.  }..public int compareto(edge&lt;v&gt; e) {.    if (endnode.compareto((v) e.endnode) &lt; 0).        return -1;.    else if (endnode.compareto((v) e.endnode) == 0).        return 0;.    else.        return 1;.}.}...unfortunately, when i try and do this, i get two errors. one of them says ""the type parameter v is hiding the type v"" and the other says i must implement the comparable.compareto(v) method even though i explicitly do it in my code. i was able to find some information on the first error, which said that i could be getting that error because i used v as a concrete type somewhere in my code, however, that does not really help me much since i don't fully understand it. i did that in my node class and nothing happened, so why am i getting errors in my edge class? any help would be greatly appreciated...also the class that both node and edge are declared in is defined as ..public class graph&lt;v extends comparable&lt;v&gt;&gt;...if that helps anyone"
