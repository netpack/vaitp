"can the main method invokelater be created differently than it normally is in a blank main method? can the invokelater be coded so that you can create an instance of runnable and then @override the method run() and then send that runnable variable into the method...i am wanting to see if you can change how the code is generated and still get the same results because that is how i start figuring out how things really work in a programming language. ..code:..import blankx.swing.*;.public class ddhsimpleprogram {..    jframe f = new jframe(""a simple swing program"");.    jlabel l = new jlabel(""swing powers the modern gui!"");..    public ddhsimpleprogram() {.        f.setlocation(300, 300);.        f.setsize(500, 500);.        f.setdefaultcloseoperation(jframe.exit_on_close);.        f.getcontentpane().add(l);.        f.pack();.        f.setvisible(true);.    }..    public void run() {.        new ddhsimpleprogram();.    }..    public static void main(string[] args) {.        runnable r = null; .        swingutilities.invokelater(r);.    }.}...this code works:..the code below works with the program implementing the runnable interface and then creates the gui in the zero argument constructor. the invokelater creates a new instance of the object as an anonymous class. the run method actually does not do anything other than write a message to the console. i still think that this is an interesting part of the object oriented design structure that seems odd to me sometimes still because you can actual have the method to anything you want it to do. ..import blankx.swing.*;.public class ddhsimpleprogram implements runnable {.    jframe f = new jframe(""a simple swing program"");.    jlabel l = new jlabel(""swing powers the modern gui!"");..    public ddhsimpleprogram() {.        f.setlocation(300, 300);.        f.setsize(500, 500);.        f.setdefaultcloseoperation(jframe.exit_on_close);.        f.getcontentpane().add(l);.        f.pack();.        f.setvisible(true);.    }..    @override.    public void run() {.        system.out.println(""run method"");.    }..    public static void main(string[] args) {.        swingutilities.invokelater(new ddhsimpleprogram());.    }.}"
