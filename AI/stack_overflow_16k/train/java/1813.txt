"is the order of operations in a constructor guaranteed? this is a question about the behaviour of blank's default constructors. in the following code snipped..public class localidsupplier implements idsupplier {.private bimap&lt;bmtpropertycontainer, string&gt; localid = hashbimap.create();.private bimap&lt;string, bmtpropertycontainer&gt; inverse = localid.inverse();..    //some methods.}...two instance variables are initialised, yet one depends on the other, so is it guaranteed for all jvm's that the default constructor will initialise these two variables in the order in which they are declared? obviously one could insure it by creating an explicit constructor, but the compiler does not have a problem with this. is there any problem with this type of dependency in initialisation?"
