"how to monitor asynchronous requests in blank i have 2 classes. one (a) collects some data and the other (b) sends the data to tcp/ip clients. the process is asynchronous with refresh rates from nearly zero to a few seconds..note that this application has no gui so i won't be able to use many built in ""onchange"" listeners...in normal conditions i would simply write the code so that a calls a ""send"" method on b, passing the data, no problems here...now, assume that the rate a collects data is critical (real time) and that a cannot wait for b to complete the sending process (note that b uses tcp, not udp). the way i implemented this is...a places the data in a field in b.b has a continuous loop that checks if the data is new or now. if new, it will send it out....if during the send the data is updated a few times it doesn't matter, as long as it doesn't slow down a..spawning a new thread for each send would in principle not slow down a but it's likely gonna result in a mess...you can see that b is working in synchronous mode (but a isn't) and it's implemented with a while loop with a thread.sleep() call. my questions are:...should i use a timer task instead of the while loop? i know that most people hate the thread.sleep() call but ultimately the only thing i'm interested is in keeping cpu low..isn't there a more elegant way than the synchronous approach? in some cases the data refresh of a is about 1 second and it would be nice if i could just have a listener that would act on an event. in such case a sleep time of 25ms would be a waste of cycles. in other cases it's very fast and i'd like no sleep at all....*example: imagine that a is submitting screenshots from your screen and b is sending them to the clients. only the last one matters and b is gonna go as fast as possible *..any ideas or suggestions? please keep things as simple and low cpu as possible..thanks a lot!"
