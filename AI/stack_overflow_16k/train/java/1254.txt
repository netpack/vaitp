"overriding writestreamheader() to append objects to a single file i need to append multiple objects in a single file in multiple sessions. ..i searched for a fair amount of time and i got two solutions from here...1) using list to get already written  objects from the file, add new objects to the list and rewriting the file...2) overriding writestreamheader()..i followed the second method i.e., overriding writestreamheader()...he stated that...  a workaround is to subclass objectoutputstream and override.  writestreamheader(). the overriding writestreamheader() should call.  the super writestreamheader method if it is the first write to the.  file and it should call objectoutputstream.reset() if it is appending.  to a pre-existing objectoutputstream within the file....so i tried this..class objectoutput extends objectoutputstream.{.    protected objectoutput(outputstream os) throws ioexception, securityexception {.        super(os);.    }..    protected void writestreamheader() throws ioexception.    {.        file file = new file(""abc.txt"");.        if(file.exists()).        {.            reset();.        }.        else.        {.            file.createnewfile();.            super.writestreamheader();.        }..    }..}...when i try to read the objects from the file there is an exception..exception in thread ""main"" blank.io.streamcorruptedexception: invalid stream header: 79737200.    at blank.io.objectinputstream.readstreamheader(objectinputstream.blank:806).    at blank.io.objectinputstream.&lt;init&gt;(objectinputstream.blank:299).    at get.main(get.blank:11)...then i tried this solution..now, it worked perfectly!..so, what's wrong with the first code? i called the super.writestreamheader() when there is no file and the second method also calls the same method in the same scenario...so,is there anything i am missing?..thank you."
