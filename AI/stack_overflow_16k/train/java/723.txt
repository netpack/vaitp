"trying to simulate a solar system, but the accelerations are wrong i  have to produce a simulation of our solar system for my physics course. i have made a pretty basic code that simulates sol and the earth going around each other using euler's equation...however, the produced accelerations using newtons law of gravitation are wrong, and i have not a clue why...public class solarsystemsim.{..    public static void main(string[] args).    {..        physicsvector earthpos= new physicsvector(4.39e10,1.42e11,-2.44e7);.        physicsvector earthvel= new physicsvector(-2.89e4,8.71e3,-8.36e-1);.        double earthmass= 5.972e24;..        physicsvector sunpos= new physicsvector(2.93e8,8.96e8,-1.85e7);.        physicsvector sunvel= new physicsvector(-9.75,9.01,2.34e-1);.        double sunmass= 1.989e30;..        /**physicsvector mercurypos= new physicsvector(5.791e10,0,0);.        physicsvector mercuryvel= new physicsvector(0,47400,0);.        double mercurymass= 3.285e23;**/..        particle earth= new particle(earthpos,earthvel,earthmass);.        particle sun= new particle(sunpos,sunvel, sunmass);.        //particle mercury= new particle(mercurypos,mercuryvel,mercurymass);..        scanner s1= new scanner(system.in);.        system.out.println(""enter a timestep i.e 1 second"");.        double timestep= s1.nextdouble();.        system.out.println(""enter a total time i.e there are 86400 seconds in a day"");.        double finaltime=s1.nextdouble();..        particle[]planets={sun,earth/**mercury**/};.        physicsvector acc= new physicsvector();.        physicsvector[]planetaccelerations= new physicsvector[planets.length];..        for(int t=0;t&lt;finaltime/timestep;t++).        {..            for(int k=0;k&lt;planets.length;k++).            {.                physicsvector planetpos= planets[k].getpos();.                acc= new physicsvector(0,0,0);..                for(int i=0;i&lt;planets.length;i++).                {.                    physicsvector r= physicsvector.subtract(planetpos,planets[i].getpos());..                    system.out.println(planets[k].getmass());.                    system.out.println(planets[i].getmass());..                    gravity grav= new gravity();.                    acc.increaseby(grav.gravitysim(r,planets[i].getmass()));..                    acc.print();.                }..            planetaccelerations[k]=acc;..            }..            for(int j=0;j&lt;planets.length;j++).            {.                physicsvector ac= new physicsvector();.                ac= planetaccelerations[j];..                planets[j].euler(timestep,ac);..            }.        }..        planets[0].getpos().print();.        planets[1].getpos().print();.        //planets[2].getpos().print();.    }.}..public class physicsvector {  ..    private static final int  vectorsize=3;.    private double[]  vectorcomponents = new double[vectorsize];..    public physicsvector().    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] =0.;.        }.    }..    public physicsvector(double x, double y).    {.        vectorcomponents[0] = x;.        vectorcomponents[1] = y;.        vectorcomponents[2] = 0.;.    }..    public physicsvector(double x, double y, double z).    {.        vectorcomponents[0] = x;.        vectorcomponents[1] = y;.        vectorcomponents[2] = z;.    }..    public physicsvector(double [] x).    {.        if (x.length == vectorsize){.            for (int i=0; i&lt;vectorcomponents.length; i++).                {vectorcomponents[i] = x[i];}.        }.        else if (x.length == vectorsize-1 ) {.            for (int i=0; i&lt;x.length; i++).                {vectorcomponents[i] = x[i];}.            vectorcomponents[vectorcomponents.length-1] = 0.;.        }.        else {this.setvector(new physicsvector());.            system.out.println(.                ""warning: physicsvector(double [] x) "" +.                ""requires an array of length "" + vectorsize);.        }.    }..    public physicsvector(physicsvector v).    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] = v.vectorcomponents[i];.        }.    }..    public void print().    {.        string text = this.returnstring();.        system.out.println(text);.    }..    public void setvector(double x, double y, double z).    {.        vectorcomponents[0] = x;.        vectorcomponents[1] = y;.        vectorcomponents[2] = z;.    }..    public void setvector(double x, double y).    {.        vectorcomponents[0] = x;.        vectorcomponents[1] = y;.        vectorcomponents[2] = 0.;.    }..    public void setvector(physicsvector v).    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] = v.vectorcomponents[i];.        }.    }..    public void increaseby(physicsvector v).    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] += v.vectorcomponents[i];.        }.    }..    public void decreaseby(physicsvector v).    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] -= v.vectorcomponents[i];.        }.    }..    public double magnitude().    {.        double mag = dot(this,this);.        mag = math.sqrt(mag);.        return mag;.    }..    public double getx().    {.        return vectorcomponents[0];.    }..    public double gety().    {.        return vectorcomponents[1];.    }..    public double getz().    {.        return vectorcomponents[2];.    }..    public physicsvector getunitvector().    {.        physicsvector unit = new physicsvector(this);.        double magnitude = this.magnitude();..        if (math.abs(magnitude) &gt; 1.e-34)..            {unit.scale(1/magnitude);}.        else .            {unit = new physicsvector();}.        return unit;.    }..    public void scale(double x).    {.        for (int i=0; i&lt;vectorcomponents.length; i++).        {.            vectorcomponents[i] *= x;.        }.    }..    public static physicsvector scale(double x, physicsvector v).    {.        physicsvector scaled = new physicsvector(v);.        for (int i=0; i&lt;(scaled.vectorcomponents).length; i++).        {.            scaled.vectorcomponents[i] *=x;.        }.        return scaled;.    }..    public static physicsvector subtract(physicsvector u, physicsvector v).    {.        physicsvector sum = new physicsvector(u);.        sum.decreaseby(v);.        return sum;.    }..    public static double sumarray(double[] a).    {.        double sum= 0;.        for(int i=0;i&lt;a.length;i++).        {.            sum+=a[i];.        }.        return sum;.    }..    public static void printarray(physicsvector[] b).    {.        for(int i=0;i&lt;b.length;i++).        {.            b[i].print();.        }.    }..}..public class gravity.{.    private double g=6.67408e-11;.    private physicsvector position= new physicsvector();.    private double mass;..    public gravity(physicsvector x, double m).    {.        position=  new physicsvector(x);.        double mass= m;.    }..    public gravity().    {.        position= new physicsvector();.        double mass= 0.0;.    }..    public physicsvector gravitysim(physicsvector r, double m).    {..        if(r.magnitude()!=0).        {.            double g=-(g*m)/(r.magnitude()*r.magnitude());..            physicsvector acc=new physicsvector(r.getunitvector());.            acc.scale(g);..            return acc;.        }..        else.        {.            physicsvector zero= new physicsvector(); .            return zero;.        }..    }..}..public class particle.{.    private physicsvector velocity= new physicsvector();.    private physicsvector position= new physicsvector();.    private physicsvector tempv= new physicsvector();.    private physicsvector tempv1= new physicsvector();.    private physicsvector tempv2= new physicsvector();.    private physicsvector tempp= new physicsvector();.    private physicsvector tempp1= new physicsvector();.    private double mass;..    public particle().    {.        position= new physicsvector();.        velocity= new physicsvector();.        mass= 0.0;.    }..    public particle(physicsvector x,physicsvector y,double m).    {.        position=new physicsvector(x);.        velocity=new physicsvector(y);.        mass=m;.    }..    public void euler(double t,physicsvector ac).    {   .        position.increaseby(physicsvector.scale(t,velocity));.        velocity.increaseby(physicsvector.scale(t,ac));.    }..    public physicsvector getpos().    {.        return position;.    }..    public double getmass().    {.        return mass;.    }.}...i've been doing simulations at timestep=1 and finaltime=2, and getting the results:...sun acceleration= 5.6e-9 m/s^2.earth acceleration= -1.8e-3 m/s^2...when they should be:...sun acceleration= 1.8e-8 m/s^2.earth acceleration=-5.9e-3 m/s^2"
