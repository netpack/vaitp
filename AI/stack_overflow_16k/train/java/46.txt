"writing blank methods that use a combination of an interface and a separate class this is an assignment working with blank interfaces. in total there are 3 classes and an interface: seller, sellerimpl, sellertestdriver, and product.   i am to implement the seller interface in the sellerimpl class and test the output with code i write in the sellertestdriver class. so far only one method gives the result i want – getname().   the other methods seem to call on the product class but i have been unable write any code that will work. what i want are the methods to read: ..name – baker (it does so already); ..product - bread; provide product – true; ..sellproduct() – just a line of text summarizing the seller and product.  ..any assistance will be appreciated!..the seller interface:..     public interface seller.{.public string getname();.public product getproduct();.public boolean provideproduct(string productname);.public product sellproduct();.}...the sellerimpl class:..    public class sellerimpl implements seller.{.protected string name;.protected product product;..// todo: complete this constructor.public sellerimpl(string name, product product).    {.    this.name = name;.    this.product = product;.    }..// todo: complete these methods .public string getname().    {.    return name;.    }..public product getproduct().    {.    return product;.    }.public boolean provideproduct(string productname).    {.    if (productname.length() == 0) {.    return null != null;.    }.    else {.    return true;.    }.    }...public product sellproduct().    {.    return product;.    }...}..sellertestdriver class:..    public class sellerimpltestdriver.{.    public static void main(string[] args).        {.        seller seller = new sellerimpl(""baker"", new product(""bread"", 1.95));.        // todo: write a test for the getname() method.        system.out.println(""seller is a: "" + seller.getname());..        // todo: write a test for the getproduct() method.        system.out.println(""seller offers: "" + seller.getproduct());..        // todo: write a test for the provideproduct() method.        system.out.println(""does this seller supply this item? "" + seller.provideproduct(""bread""));..        // todo: write a test for the sellproduct() method.        system.out.println(seller.getname() +"" sells "" );           }...product class (that i am not instructed to touch at all): ..    public class product.{.protected string itemname;.protected double itemprice;..public product(string name, double price).    {.    itemname = name;.    itemprice = price;.    }.public string getname().    {.    return itemname;.    }.public void setname(string itemname).    {.    this.itemname = itemname;.    }..public double getprice().    {.    return itemprice;.    }.public void setprice(double itemprice).    {.    this.itemprice = itemprice;.    }.}...my current results: ..seller is a: baker      - i like this, it is correct..seller offers: seller.product@7a3e72..does this seller supply this item? false..buyer will purchase seller.product@7a3e72"
