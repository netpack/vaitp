"is simulating structs in blank a good way to go or not? once i worked for a big tech company. we programed in blank. guys there are amazingly smart and they like simulating struct in c/c++ in blank. to make myself clear, they advocate to create classes that act as ""data holder"":..public class bookinformation {.    public final list&lt;string&gt; authors;.    public final string booktitle;.    public bookinformation(list&lt;string&gt; authors, string booktitle) {.        this.authors = authors;.        this.booktitle = booktitle;.    }.    @override.    public string tostring() { ... }..    @override.    public int hashcode() { ... }..    @override.    public boolean equals(object obj) { ... }.}...as we can see, the purpose of this class is simply holding data. although we violate many enterprise programming rules, such as not exposing class fields directly and defensive copying, this kind of class does gain benefits such as concise coding. instead of calling getters and setters, we can directly call field names...the thing that annoys me is that this kind of class is hard to maintain and extend. it is hard to maintain because there is no way to make sure the states of the objects are legal. business logic may say, a book must have a title and at least one author. but in real world, the objects can have empty title, null title, empty author list or null author list and we simply cannot control it. it is hard to extend. for example, what if the data source is changed to provide first name, last name separately for author name? i have to use two string lists instead of one. worse, the data structure change affects and interface. since i don't have a getauthornames() interface, i potentially have to change codes in many places...i have to admit that the above scenarios are not happening. i have to admit that all code uses the class is under the control of the team so interface change doesn't sound that bad as writing for other teams/companies to use. so is it ok to have such coding standard even if we are using blank, a pure oo language, coding in enterprise level?..i know there probably isn't a ""right"" answer. i'd like to hear personal opinions. speak loud on behalf of yourself!..edit:..ok. i should rephrase the core of my question: is it wise to sacrifice some of the textbook coding rules to gain simplicity? will the sacrifice bit you later when the code base grows and team grows? personal opinions matter, especially it is from wise persons and in many cases, there isn't right or wrong questions and we all just follow the convincing opinions. i am sorry stackoverflow is designed only for right-and-wrong questions. in that case this question should just be closed."
