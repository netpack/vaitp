"blank code for average word length and average sentence length ok, so, i'm a relatively new programmer and i'm having major difficulty with this assignment. the assignment is to create a 2 class blank code that will read in a file, a book specifically, and will analyze that to count average sentence length and average word length. the correct output should look something like this:..&gt; blank wordmapdriver.enter name of a file.    analyzed text: /users/moll/cs121/aliceinwonderland.txt.    words of length 1: 7.257%.    words of length 2: 14.921%.    words of length 3: 24.073%.    words of length 4: 20.847%.    words of length 5: 12.769%.    words of length 6: 7.374%.    words of length 7: 6.082%.    words of length 8: 3.012%.    words of length 9: 1.812%.    words of length 10: 0.820%.    words of length 11: 0.501%.    words of length 12: 0.236%.    words of length 13: 0.134%.    words of length 14: 0.083%.    words of length 15 or larger: 0.001%.    average sentence length: 16.917...i have been working on this code for a while but when i run it, i just get a lot of angry red error messages. here is the long list of complaints:..blank.lang.stringindexoutofboundsexception: string index out of range: 239.    at blank.lang.string.charat(unknown source).    at wordmap.processline(wordmap.blank:26).    at echo.readlines(echo.blank:16).    at wordmapdriver.main(wordmapdriver.blank:10).    at sun.reflect.nativemethodaccessorimpl.invoke0(native method).    at sun.reflect.nativemethodaccessorimpl.invoke(unknown source).    at sun.reflect.delegatingmethodaccessorimpl.invoke(unknown source).    at blank.lang.reflect.method.invoke(unknown source).    at edu.rice.cs.drblank.model.compiler.blankccompiler.runcommand(blankccompiler.blank:272).    at sun.reflect.nativemethodaccessorimpl.invoke0(native method).    at sun.reflect.nativemethodaccessorimpl.invoke(unknown source).    at sun.reflect.delegatingmethodaccessorimpl.invoke(unknown source).    at blank.lang.reflect.method.invoke(unknown source).    at edu.rice.cs.dynamicblank.symbol.blankclass$blankmethod.evaluate(blankclass.blank:362).    at edu.rice.cs.dynamicblank.interpreter.expressionevaluator.handlemethodcall(expressionevaluator.blank:92).    at edu.rice.cs.dynamicblank.interpreter.expressionevaluator.visit(expressionevaluator.blank:84).    at koala.dynamicblank.tree.staticmethodcall.acceptvisitor(staticmethodcall.blank:121).    at edu.rice.cs.dynamicblank.interpreter.expressionevaluator.value(expressionevaluator.blank:38).    at edu.rice.cs.dynamicblank.interpreter.expressionevaluator.value(expressionevaluator.blank:37).    at edu.rice.cs.dynamicblank.interpreter.statementevaluator.visit(statementevaluator.blank:106).    at edu.rice.cs.dynamicblank.interpreter.statementevaluator.visit(statementevaluator.blank:29).    at koala.dynamicblank.tree.expressionstatement.acceptvisitor(expressionstatement.blank:101).    at edu.rice.cs.dynamicblank.interpreter.statementevaluator.evaluatesequence(statementevaluator.blank:66).    at edu.rice.cs.dynamicblank.interpreter.interpreter.evaluate(interpreter.blank:77).    at edu.rice.cs.dynamicblank.interpreter.interpreter.interpret(interpreter.blank:47).    at edu.rice.cs.drblank.model.repl.newjvm.interpreterjvm.interpret(interpreterjvm.blank:246).    at edu.rice.cs.drblank.model.repl.newjvm.interpreterjvm.interpret(interpreterjvm.blank:220).    at sun.reflect.nativemethodaccessorimpl.invoke0(native method).    at sun.reflect.nativemethodaccessorimpl.invoke(unknown source).    at sun.reflect.delegatingmethodaccessorimpl.invoke(unknown source).    at blank.lang.reflect.method.invoke(unknown source).    at sun.rmi.server.unicastserverref.dispatch(unknown source).    at sun.rmi.transport.transport$1.run(unknown source).    at sun.rmi.transport.transport$1.run(unknown source).    at blank.security.accesscontroller.doprivileged(native method).    at sun.rmi.transport.transport.servicecall(unknown source).    at sun.rmi.transport.tcp.tcptransport.handlemessages(unknown source).    at sun.rmi.transport.tcp.tcptransport$connectionhandler.run0(unknown source).    at sun.rmi.transport.tcp.tcptransport$connectionhandler.run(unknown source).    at blank.util.concurrent.threadpoolexecutor.runworker(unknown source).    at blank.util.concurrent.threadpoolexecutor$worker.run(unknown source).    at blank.lang.thread.run(unknown source)...and here is my code. any help i can get is greatly appreciated:..1 import blank.util.scanner;.2 import blank.io.*;.3.4 public class echo{.5 string filename; // external file name.6 scanner scan; // scanner object for reading from external file.7  .8  public echo(string f) throws ioexception.9  {.10   filename = f;.11  scan = new scanner(new filereader(filename));.12}.13.14 public void readlines(){ // reads lines, hands each to processline.15    while(scan.hasnext()){.16    processline(scan.nextline());.17  }.18  scan.close();.19 }.20.21 public void processline(string line){ // does the real processing work.22  system.out.println(line);.23}.24}.___________________.1 import blank.util.*;.2 import blank.io.*;.3 public class wordmap extends echo {.4  string filename; //external text file name.5  scanner scan; //scanner object to read external text.6  int sentencecount = 0;.7  int wordcount = 0;.8  int charcount = 0;.9  //creates an array that will be used to count average word length.10  double[] wlength = new double[15];.11  int fifteenless = 0;.12  int fifteenplus = 0;.13  public wordmap(string f) throws ioexception.14  {.15    super(f);}.16  .17  public void processline(string line).18 //creates a string array of every word.19  {string [] words = line.split(""\s+"");.20    for(int a = 0; a &lt; words.length; a++){.21      words[a] = words[a].replaceall(""[\w]"","""");}.22    .23 //counts words.24    wordcount = words.length;.25    .26 //counts sentences by searching for sentence enders.27    for(int c = 0; c &lt; line.length(); c++){.28      char ca = line.charat(c);.29      if((line.charat(ca) == '.')|| (line.charat(ca) =='!') || (line.charat(ca) =='?')); .30      sentencecount++ ;}.31    .32 //if wordlength matches, adds one to wlength at d and to words less than 15 chars.33    for(int d = 1; d &lt; 15; d++){ .34      for(int g = 0; g &lt; words.length; g++){ .35        string temp = words[g]; .36        if(d == temp.length()){.37          wlength[d]++;.38          fifteenless++;}}}}.39  .40  public void calculatepercentages(){.41    {//calculate percentages with words of 15 or more characters.42      fifteenplus = wordcount - fifteenless;.43      fifteenplus = fifteenplus / wordcount;.44      fifteenplus = fifteenplus*100;}.45    .46 //calculate percentages for words with 1-14 characters     .47    for(int h = 1; h&lt;15; h++){.48      wlength[h] /= wordcount;.49      wlength[h]*=100;}.50  }.51  public void reportlength(){ .52 //prints out average sentence length.53    double length = wordcount / sentencecount;.54    system.out.printf(""average sentence length: ""+ ""%5.3f"",length);}.55  .56  public void getwordlength(){.57    //prints out word of length percentages with a loop for 1-14 and a final one for 15+.58    for(int i = 1; i &lt;15; i++){.59      system.out.printf(""words of length "" + i + "": %5.3f%%n"",wlength[i]);}.60    system.out.printf(""words of 15 or more characters length: "" + ""%5.3f%%n"",fifteenplus);.61  }}._______.    1 import blank.util.*;.2 public class wordmapdriver {.3  public static void main(string[] args) { .4    try{.5    string filename;.6    scanner textfile = new scanner(system.in);.7    system.out.println(""enter name of file"");.8    filename = textfile.nextline(); //scans in file.9      wordmap k = new wordmap(filename);//creates wordmap object.10    k.readlines(); //processes.11   k.calculatepercentages();.12    k.getwordlength(); //reports all wordlength percentages.13    k.reportlength(); //prints out average sentence length.14  }.15    catch(exception e) //catches the ioexception.16    {e.printstacktrace();.17   }}}...*edit: i added line numbers. also, this may be dumb, but i don't know what sscce.**edit2: ok, so i followed advice and now it prints this followed by more angry red messages:..words of length 1: 50620.000%.words of length 2: 15690.000%.words of length 3: 2020.000%.words of length 4: 300.000%.words of length 5: 620.000%.words of length 6: 70.000%.words of length 7: 20.000%.words of length 8: 10.000%.words of length 9: 0.000%.words of length 10: 10.000%.words of length 11: 10.000%.words of length 12: 10.000%.words of length 13: 10.000%.words of length 14: 0.000%.words of 15 or more characters length: blank.util.illegalformatconversionexception: f != blank.lang.integer"
