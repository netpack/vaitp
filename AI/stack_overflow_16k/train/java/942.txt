"blank permutations i am trying to run my code so it prints cyclic permutations, though i can only get it to do the first one at the moment. it runs correctly up to the point which i have marked but i can't see what is going wrong. i think it has no break in the while loop, but i'm not sure. really could do with some help here...package permutation;..public class permutation {.static int default = 100;..public static void main(string[] args) {.    int n = default;.    if (args.length &gt; 0).        n = integer.parseint(args[0]);..    int[] oa = new int[n];.    for (int i = 0; i &lt; n; i++).        oa[i] = i + 1;..    system.out.println(""the original array is:"");.    for (int i = 0; i &lt; oa.length; i++).        system.out.print(oa[i] + "" "");.    system.out.println();..    system.out.println(""a permutation of the original array is:"");.    oa = generaterandompermutation(n);.    printarray(oa);.    printpemutation(oa);.}..static int[] generaterandompermutation(int n)// (a).{.    int[] a = new int[n];.    for (int i = 0; i &lt; n; i++).        a[i] = i + 1;..    for (int i = 0; i &lt; n; i++) {.        int r = (int) (math.random() * (n));.        int swap = a[r];.        a[r] = a[i];.        a[i] = swap;.    }.    return a;.}..static void printarray(int a[]) {.    for (int i = 0; i &lt; a.length; i++).        system.out.print(a[i] + "" "");.    system.out.println();.}..static void printpemutation(int p[])// (b).{.    system.out.            .println(""the permutation is represented by the cyclic notation:"");.    int[] b = new int[p.length];.    int m = 0;.    while (m &lt; p.length)// this is the point at which my code screws up.    {.        if (!check(b, m)) {.            b = parenthesis(p, m);.            printparenthesis(b);.            m++;.        } else.            m++;.    }// if not there are then repeat.}..static int[] parenthesis(int p[], int i) {.    int[] b = new int[p.length];.    for (int a = p[i], j = 0; a != b[0]; a = p[a - 1], j++) {.        b[j] = a;.    }.    return b;.}..static void printparenthesis(int b[]) {.    system.out.print(""( "");.    for (int i = 0; i &lt; b.length &amp;&amp; b[i] != 0; i++).        system.out.print(b[i] + "" "");.    system.out.print("")"");.}..static boolean check(int b[], int m) {.    int i = 0;.    boolean a = false;.    while (i &lt; b.length || !a) {.        if ((ispresent(m, b, i))){.            a = true;.            break;.        }.        else.            i++;.    }.    return a;.}..static boolean ispresent(int m, int b[], int i) {.    return m == b[i] &amp;&amp; m &lt; b.length;.}.}"
