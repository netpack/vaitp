"introducing serializable to existing code i believe this should be a really common case, yet i can't find any best practices. assume i have the following class:..public class equation {..    private operator operator;.    private object leftvalue;.    private object rightvalue;..    // getters and setters.}..public enum operator  {...}...this class has been with us for some years already and is well used. now i need to make it serializable. how do i do that?..just add implements serializable..in that case, the equation class only works as long as the values are serializable. since equations only really work on numbers (maybe dates and strings?) that might work. but the values could be any kind of object, so there has to be a better way...make values serializable..public class equation implements serializable{..    private operator operator;.    private serializable leftvalue;.    private serializable rightvalue;..    // getters and setters .}...this works in any case, but these changes are an api break. and no matter what i do i need to change all the code using the class, which leads to potentially even more api breaks. for a big software system that might take ages...make values serializable, leave getters and setters as is..public void setleftvalue(object leftvalue) {.    if (!(leftvalue instanceof serializable)) .        throw new illegalargumentexception(""value must be serializable!"");.    this.leftvalue = leftvalue;.}...this code breaks no existing api, but changes how the code behaves. yet if i assume that all the values are serializable anyways, i feel like this might be the way to go. i can even put the new setters next to the old ones and deprecated them to make it obvious to future developers what objects to use...make values transient:..at least that's what sonar suggests. yet it leads to an unusable class, at least in all the cases where we actually need equation to be serializable...create implementation that is serializable:..public class serializableequation extends equation implements serializable{..    private serializable leftvalue;.    private serializable rightvalue;..    // override getters and setters.}...that way we would have to use an entire different class for serialization purposes, which seems kind of ugly, doesn't it?..question:..what is a good way to handle this use case? i ideally don't want to break the api. and seeing as blank has yet to break the api there must be a way to handle cases like this."
