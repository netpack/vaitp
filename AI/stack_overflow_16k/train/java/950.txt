"i get hit with ""comparison method violates its general contract!"" exception when i create/add more than a certain number of objects i'm learning blank at college and this is from my assignment. the task is to create a x by y grid of color squares that each run in a separate thread and every k ms either change it's color to a random one or average the color of it's neighbours...now, if i create a 30 by 30 grid everything runs fine. however, if i try it with 40 by 40, i get the following exception once when the app starts and once when i close it. apart from that it appears to run correctly, although the grid appears to be positioned within the window slightly wrongly (it's narrower than it should be)...exception in thread ""awt-eventqueue-0"" blank.lang.illegalargumentexception: comparison method violates its general contract!.    at blank.util.timsort.mergelo(timsort.blank:747).    at blank.util.timsort.mergeat(timsort.blank:483).    at blank.util.timsort.mergecollapse(timsort.blank:410).    at blank.util.timsort.sort(timsort.blank:214).    at blank.util.timsort.sort(timsort.blank:173).    at blank.util.arrays.sort(arrays.blank:659).    at blank.util.collections.sort(collections.blank:217).    at blankx.swing.sortingfocustraversalpolicy.enumerateandsortcycle(sortingfocustraversalpolicy.blank:136).    at blankx.swing.sortingfocustraversalpolicy.getfocustraversalcycle(sortingfocustraversalpolicy.blank:110).    at blankx.swing.sortingfocustraversalpolicy.getfirstcomponent(sortingfocustraversalpolicy.blank:435).    at blankx.swing.layoutfocustraversalpolicy.getfirstcomponent(layoutfocustraversalpolicy.blank:166).    at blankx.swing.sortingfocustraversalpolicy.getdefaultcomponent(sortingfocustraversalpolicy.blank:515).    at blank.awt.focustraversalpolicy.getinitialcomponent(focustraversalpolicy.blank:169).    at blank.awt.defaultkeyboardfocusmanager.dispatchevent(defaultkeyboardfocusmanager.blank:380).    at blank.awt.component.dispatcheventimpl(component.blank:4731).    at blank.awt.container.dispatcheventimpl(container.blank:2287).    at blank.awt.window.dispatcheventimpl(window.blank:2719).    at blank.awt.component.dispatchevent(component.blank:4687).    at blank.awt.eventqueue.dispatcheventimpl(eventqueue.blank:729).    at blank.awt.eventqueue.access$200(eventqueue.blank:103).    at blank.awt.eventqueue$3.run(eventqueue.blank:688).    at blank.awt.eventqueue$3.run(eventqueue.blank:686).    at blank.security.accesscontroller.doprivileged(native method).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:76).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:87).    at blank.awt.eventqueue$4.run(eventqueue.blank:702).    at blank.awt.eventqueue$4.run(eventqueue.blank:700).    at blank.security.accesscontroller.doprivileged(native method).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:76).    at blank.awt.eventqueue.dispatchevent(eventqueue.blank:699).    at blank.awt.sequencedevent.dispatch(sequencedevent.blank:128).    at blank.awt.eventqueue.dispatcheventimpl(eventqueue.blank:727).    at blank.awt.eventqueue.access$200(eventqueue.blank:103).    at blank.awt.eventqueue$3.run(eventqueue.blank:688).    at blank.awt.eventqueue$3.run(eventqueue.blank:686).    at blank.security.accesscontroller.doprivileged(native method).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:76).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:87).    at blank.awt.eventqueue$4.run(eventqueue.blank:702).    at blank.awt.eventqueue$4.run(eventqueue.blank:700).    at blank.security.accesscontroller.doprivileged(native method).    at blank.security.protectiondomain$1.dointersectionprivilege(protectiondomain.blank:76).    at blank.awt.eventqueue.dispatchevent(eventqueue.blank:699).    at blank.awt.eventdispatchthread.pumponeeventforfilters(eventdispatchthread.blank:242).    at blank.awt.eventdispatchthread.pumpeventsforfilter(eventdispatchthread.blank:161).    at blank.awt.eventdispatchthread.pumpeventsforhierarchy(eventdispatchthread.blank:150).    at blank.awt.eventdispatchthread.pumpevents(eventdispatchthread.blank:146).    at blank.awt.eventdispatchthread.pumpevents(eventdispatchthread.blank:138).    at blank.awt.eventdispatchthread.run(eventdispatchthread.blank:91)...here's my code:.the main class symulacja:..import blank.awt.borderlayout;.import blank.awt.gridlayout;.import blankx.swing.jframe;.import blankx.swing.jpanel;.import blank.util.random;..// main class.@suppresswarnings(""serial"").public class symulacja extends jpanel {.    public symulacja(int x, int y, int k, double p) {.        super();.        field.delay = k;.        field.p = p;.        field.random = new random();..        setlayout(new gridlayout(y, x));..        //creating field objects and adding them to the panel.        field fv[][] = new field[y][];.        for (int i = 0; i&lt;y; i++){.            fv[i] = new field[x];.            for (int j = 0; j&lt;x; j++){.                fv[i][j] = new field();.                add(fv[i][j]);.            }.        }..        //setting the neighbours in all field objects.        for (int i = 0; i&lt;y; i++){.            for (int j = 0 ; j&lt;x; j++){.                field fv2[] = {fv[(i+1)%y][j], fv[(i+y-1)%y][j], fv[i][(j+1)%x], fv[i][(j+x-1)%x]};.                fv[i][j].setarr(fv2);.            }.        }..        //starting the threads.        for (int i = 0; i&lt;y; i++){.            for (int j = 0 ; j&lt;x; j++){.                new thread(fv[i][j]).start();.            }.        }..    }..    public static void main(string[] args) {.        symulacja s = new symulacja(30,30,100,0); //works.        //symulacja s = new symulacja(40,40,100,0); //throws exception.        jframe f = new jframe();.        f.setlayout(new borderlayout());.        f.add(s, borderlayout.center);.        f.setdefaultcloseoperation(jframe.exit_on_close);.        f.setvisible(true);.        f.setsize(400, 400);.    }..}...the field class (a single grid element):..import blank.awt.canvas;.import blank.awt.color;.import blank.awt.graphics;.import blank.awt.event.mouseadapter;.import blank.awt.event.mouseevent;.import blank.util.random;..@suppresswarnings(""serial"").class field extends canvas implements runnable.{.    field().    {.        color = nextint();.        randflag = false;..        //zmiana koloru na losowy po kliknięciu myszą.        addmouselistener(new mouseadapter() .        {.            public void mouseclicked(mouseevent e).            {.                randflag = true;.            }.        });.    }...    void setarr(field[] a).    {.        fieldarr = a;.    }...    public void run().    {.        while (true){.            double rand = nextdouble();.            int newcolor;.            if (rand &lt;= p || randflag){ // losowy kolor lub kliknięcie myszą.                newcolor = nextint();.                randflag = false;.            }.            else{ // uśredniony kolor.                newcolor = 0;.                for (field f: fieldarr).                    newcolor+=f.getcolor()/4;.            }..            if (newcolor!=getcolor()){.                setcolor(newcolor);.                repaint();.            }..            try {.                thread.sleep((long)((nextdouble() + 0.5)*delay));.            } catch (interruptedexception e) {.                return;.            }.        }.    }...    public void paint(graphics g).    {.        g.setcolor(new color(getcolor()));.        g.fillrect(0, 0, getwidth(), getheight());.        g.dispose();.    }...    synchronized public int getcolor().    {.        return color;.    }...    synchronized private void setcolor(int color).    {.        this.color = color;.    }...    private int nextint().    {.        synchronized (random) {.            return random.nextint();.        }.    }...    private double nextdouble().    {.        synchronized (random) {.            return random.nextdouble();.        }.    }..    static public int delay;.    static public double p;..    field fieldarr[];.    private int color;..    boolean randflag;.    static random random;.}"
