"an efficient way to get and store the shortest paths when i say efficient i mean code that isn't cpu intensive...the problem:.i have a field of blocks. like in the following image:....every single one of these blocks represents an instance of a self-made block class. this block class has a list&lt;block&gt; neighbours, where the neighbours of the block are stored. so every single block in the image knows which blocks are next to it...what i want to do is to pick any block from this image, and compute how many ""steps"" away this block is. for example if i pick the block in the top left, i want to have a map&lt;block, integer&gt; representing how many ""steps"" away each block is from the picked block. like this:....now before you say ""just store it's position x and y in the block class and calculate the difference x + difference y"", that wouldn't work because the field can have gaps(represented by red color) between them like the following image:....and as you might notice, the block next to the gap that was first 4 steps away, is now 6 steps away. thus the best way(i presume) to get how many steps away the other blocks are is by using a recursive algorith that makes use of the neighbour info. i couldn't make an efficient one myself and i was hoping someone might know something that works well. ..several problems i came across are the fact that because all blocks know their neighbours, the recursive algorithm would go indefinately back and forth between the first and second block. or the fact that when using the algorithm on a 11x11 field, there were 3284 method calls, which seems waaay too high for an 11x11 field...question:.so the question i have is: what is an efficient way, using the knowledge of what neighbours each block has, to get how many steps away each block is...code:.this is the current code that i have incase anyone wants to see it...public class block.{.    list&lt;block&gt; neighbours;.    public block(list&lt;block&gt; neighbours).    {.        this.neighbours = neighbours;.    }.    public map&lt;block, integer&gt; getstepsaway().    {.        map&lt;block, integer&gt; path = new hashmap&lt;block, integer&gt;();.        getpaths(path, 0, 100);.        return path;.    }.    public void getpaths(map&lt;block, integer&gt; path, int pathnumber, int maxpathnumber).    {           .        if(pathnumber &lt;= maxpathnumber).        {.            for(block block : neighbours).            {.                integer thepathnumber = path.get(block);.                if(thepathnumber != null).                {.                    if(pathnumber &lt; thepathnumber).                    {.                        path.put(block, pathnumber);.                        block.getpaths(path, pathnumber + 1, maxpathnumber);.                    }.                }.                else.                {.                    path.put(block, pathnumber);.                    block.getpaths(path, pathnumber + 1, maxpathnumber);.                }.            }.        }.    }.}"
