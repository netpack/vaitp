"settimeout not working properly inside a constructor function method i am trying to create an amateur mmorpg blank browser game, multiplayer actually. this is a mmorpg so i am going to generate enemies randomly (doesn't matter now), the point is i have made a constructor function which creates a separate object, not linked to the prototype (which is nice). this separate object will be some individual npc, the amount will depend on how many we generate...function myenemy(posx,posy) {.    this.uuid = 'aa1b05',.    this.health = 2000,.    this.shield = 2000,.    this.posx = posx,.    this.posy = posy,.    this.speed = 320,.    this.damage = 80,.    this.ratio = 1000,.    //this.target = 'uuid',.    this.aggro = true,.    this.strike = function() {.        this.health -= this.damage.        console.log(this.health).        //if(this.aggro === true) { settimeout(this.strike(), this.ratio); }.    }.    this.attack = function() {.        if(this.aggro === true) { settimeout(this.strike(), this.ratio); }.    }.};...don't bother about the uuid, it's work in progress..the enemy does have some basic stats, health, position, speed, etc. i have removed some methods from this example for simplicity...this code here spawns an enemy:.let enemy = new myenemy(0,0)..in this example i am just reducing the enemy's health each time it strikes, because i haven't implemented the targeting system yet. it's working fine, the problem comes once this.attack() is executed it's it only strikes once...the other problem is the reason why i commented that line in this.strike(), instead of repeating the action each second it repeats the action so fast that it crashes my computer...as far as i have gone, no matter what i try, settimeout doesn't work...my goal is to have the enemy do the strike function while aggro is = true, i have also tried do while loops without any success, the problem is settimeout...update..this is not a duplicate, i have also tried to remove the () from the strike function without success, it attacks once and then returns nan, stopping the loop."
