"object.create(proto, propertiesobject) polyfill for ie support mdn has specified a polyfill for object.create using 1 argument:..if (!object.create) {.    object.create = (function(){.        function f(){}..        return function(o){.            if (arguments.length != 1) {.                throw new error('object.create implementation .                                 only accepts one parameter.');.            }.            f.prototype = o.            return new f().        }.    })().}...but i would like to make use of the second argument and make something like this work in ie &lt; 9:..o = object.create(object.prototype);...// example where we create an object with a couple of sample properties..// (note that the second parameter maps keys to *property descriptors*.).o = object.create(object.prototype, {.  // foo is a regular ""value property"".  foo: { writable:true, configurable:true, value: ""hello"" },.  // bar is a getter-and-setter (accessor) property.  bar: {.    configurable: false,.    get: function() { return 10 },.    set: function(value) { console.log(""setting `o.bar` to"", value) }.}});...my guess it that there is no solution to this, just as it's impossible to use object.defineproperty in ie &lt; 9 (except for dom elements)...so, my question is: is there any non-hacky solution to recreate this behavior in ie7+8?..and by ""hacky"" i mean something like this:..var myobject = document.createelement('fake');"
