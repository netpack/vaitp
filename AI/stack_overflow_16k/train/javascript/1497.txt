"preventing food from generating inside my snake can someone tell me how i can make it so the food doesn't generate inside my snake? i've tried using a for loop that checks every index of the snake to see if it's matching with the position of the food but this still doesn't work. ..also, i sped up the speed of the game and the amount of units that are added to the snake upon eating a food to speed up the results and to check and see if the method actually works.....const canvas = document.queryselector('#canvas');.const ctx = canvas.getcontext('2d');..//set canvas dimension equal to css dimension.canvas.width = 768;.canvas.height = 512;..//now put those dimensions into variables.const cvsw = canvas.width;.const cvsh = canvas.height;..//create snake unit.const unit = 16;..//create snake array.let snake = [{x: cvsw/2, y: cvsh/2}];..//delcare global variable to hold users direction.let direction;..//create food object.let food = {. x : math.floor(math.random()*((cvsw/unit)-1)+1)*unit,. y : math.floor(math.random()*((cvsh/unit)-1)+1)*unit.}..//read user's direction.document.addeventlistener('keydown', changedirection);..function changedirection(e) {. //set direction. if (e.keycode == 37 &amp;&amp; direction != 'right') direction = 'left';. else if (e.keycode == 38 &amp;&amp; direction != 'down') direction = 'up';. else if (e.keycode == 39 &amp;&amp; direction != 'left') direction = 'right';. else if (e.keycode == 40 &amp;&amp; direction != 'up') direction = 'down';.}..function draw() {. //refresh canvas. ctx.clearrect(0, 0, cvsw, cvsh);. //draw snake. for(let i = 0; i &lt; snake.length; i++) {.  ctx.fillstyle = 'limegreen';.  ctx.fillrect(snake[i].x, snake[i].y, unit, unit);. }.. //grab head position. let headx = snake[0].x;. let heady = snake[0].y;.. //posistion food on board. ctx.fillstyle = 'red';. ctx.fillrect(food.x, food.y, unit, unit);.. //send the snake in chosen direction. if(direction == 'left') headx -= unit;. else if(direction == 'up') heady -= unit;. else if(direction == 'right') headx += unit;. else if(direction == 'down') heady += unit;.. // //check if snake hit wall. // if(headx &lt; 0 || heady &lt; 0 || headx &gt; (cvsw-unit) || heady &gt; (cvsh-unit)) {. //  clearinterval(rungame);. // }.. if (headx &lt; 0) headx = cvsw - unit;. else if (headx &gt; cvsw - unit) headx = 0;. else if (heady &lt; 0) heady = cvsh - unit;. else if(heady &gt; cvsh - unit) heady = 0;.. // for(let i = 0; i &lt; snake.length; i++) {. //  if(headx == snake[i].x &amp;&amp; heady == snake[i].y) {. //   clearinterval(game);. //  }. // }.. //create new head. let newhead = {x: headx, y: heady}.. //if snake eats food -do this. if(headx == food.x &amp;&amp; heady == food.y) {.  //create new food position.  while(!checksnakeforfood()) {.    food = {.    x : math.floor(math.random()*((cvsw/unit)-1)+1)*unit,.    y : math.floor(math.random()*((cvsh/unit)-1)+1)*unit.   }.  }.  .  //add 3 units to the snake.  for (let i = 30; i &gt; 0; i--) {.   snake.unshift(newhead);.  }. }. else {.  //remove tail.  snake.pop();. }.. //add head to snake. snake.unshift(newhead);.}..//run game engine.let rungame = setinterval(draw, 40);..function checksnakeforfood() {. for(let i = 0; i &lt; snake.length; i++) {.  if(snake[i].x === food.x &amp;&amp; snake[i].y === food.y) return false;. }. return true;.}.&lt;!doctype html&gt;.&lt;html lang=""en""&gt;.&lt;head&gt;. &lt;meta charset=""utf-8""&gt;. &lt;title&gt;snake game&lt;/title&gt;. &lt;style&gt;.  body {.   background-color: #333;.  }..  canvas {.   background-color: #4d4d4d;.   margin: auto;.   display: block;.   position: absolute;.   left: 0;.   right: 0;.   top: 0;.   bottom: 0;.   width: 750px;.   height: 500px;  .  }. &lt;/style&gt;.&lt;/head&gt;.&lt;body&gt;. &lt;canvas id=""canvas""&gt;&lt;/canvas&gt;. &lt;script src=""script.js""&gt;&lt;/script&gt;.&lt;/body&gt;.&lt;/html&gt;"
