"argument juggling impossible because arguments.length also increases when undefined is passed i have a scale function which has the following signatures:..scale (xy, cx = 0, cy = 0).scale (x, y, cx = 0, cy = 0)...my function definition looks like this:..function scale (x, y = x, cx = 0, cy = 0)...to make sure that the case scale (xy, cx = 0, cy = 0) works i need to do arguments juggling. i used to do it that way:..if (arguments.length == 3) {.  // juggle.}...however, when this function is used from another function which only relays its parameters it gets problematic:..function scalefoo(x, y, cx, cy) {.    return scale (x, y, cx, cy).}...scalefoo doesnt care if its parameters are valid. it just relays everything..but in that case arguments.length is always 4. even if cy is undefined...i am aware that i can use scale.call to solve this but i need to pass a this in that case which i really would like to avoid. i would prefer a solution which uses a better if branch."
