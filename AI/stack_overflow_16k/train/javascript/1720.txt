"dynamically set property of nested object if they exist. recreate _.extend i am looking to recreate the following as seen below, dynamically without having manually define where the matches are in the object's properties...desired outcome..const obj = {.  levelone: {.    somefun: () =&gt; {},.    leveltwo: {.      anarray: [],.      something: 'asas',.      levelthree: {.        stay: 'the same',.        name: 'set this one!',.      },.    },.  },.}..const updatedobj = {.  ...obj,.  levelone: {.    ...obj.levelone,.    leveltwo: {.      anarray: [],.      ...obj.levelone.leveltwo,.      levelthree: {.        ...obj.levelone.leveltwo.levelthree,.        name: 'updated prop!',.      },.    },.  },.}..console.info(updatedobj).{. levelone: {.   somefun: () =&gt; {},.   leveltwo: {.     something: 'asas',.       levelthree: {.         stay: 'the same',.         name: ""updated prop!"",.       },.     },.   },. }...so far..const inputoriginal = {.  levelone: {.    leveltwo: {.        something: 'asas',.        levelthree: {.        name: ""original input!"".      }.    }.  }.}.const newinput = {.  levelone: {.    leveltwo: {.      levelthree: {.        name: ""updated prop!"".      }.    }.  }.}..const mergeobjects = function(overwrite, original){.    return object.entries(original).reduce( (acc, [ key, item ]) =&gt; {.        if(typeof item === 'object' &amp;&amp; overwrite[key]) {.            mergeobjects(overwrite[key], item).            acc = {.                ...acc,.                [key]: item.            }.        } else if(overwrite[key]) {.            acc = {.                ...acc,.                [key]: overwrite[key].            }.        }.        return acc.    }, {}).}.const merged = mergeobjects(inputoriginal,newinput) //merged.levelone.leveltwo.levelthree = ""updated prop!""...however i can see there is an error logic in my code that, when it comes back out of the recursion, it overwrites the changes values with its self, which has the original values...how can i create a function that will do the same as 'desired outcome'?"
