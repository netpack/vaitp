"is there a way to convert a string to a base 10 number for encryption? note: i found a similar question, but it is in python...i've been trying to think of an algorithm or native method for this, and i'm stumped...this is what i have so far:..encode=function(n,f){.    return (n).tostring(f).}.decode=function(s,f){.    return parseint(s,f).}...basically, i need a way to convert a string, like 'hello world!' to a base 10 (hexadecimal will work as well) number, like 14438792758793754875, and i am wondering if there's a proper way to do it before i possibly waste my time with something like:..str='hello world'.returnstring=''.for(var i in str){.    returnstring+=(.        str[i]=='a'?'0'.        :str[i]=='b'?'1'.        etc....    ).}...not only would that be very time consuming, but i have no idea how i would possibly convert it back, as once i get into numbers like 11 for l, a for loop wouldn't do, and would return bb...the reason i am asking this is because i plan to use it in the future for more efficient and secure, encrypted storage. for example, something like:..//save.numstr=encodetonumber(inputelement.value).b36str=encode(numstr,36).storage['items'].push(b36str).localstorage['app data']=json.stringify(storage)..//load.if(localstorage['app data']){.    storage=json.parse(localstorage['app data']).}else{.    storage={.        items:[],.        config:{.            etc.        }.    }.}.//assuming storage.items looks like this: ['rgie', 'zyy', '2il7'].for(i in storage['items']){.    b36str=storage['items']//rgie, zyy, 2il7.    numstr=decode(b36str,36)//1281110, 46618, 117403.    container.innerhtml+='&lt;hr&gt;'+decodefromnumber(numstr)//milk, eggs, bread.}..//output.milk.eggs.bread...i actually did spend several minutes manually encrypting 'milk', 'eggs', and 'bread' to their base36 counterparts so it could be accurate.....update: aadit m shaw gave a function that produces hexadecimal strings from strings, and i reverse engineered it to my needs and got this:..en=function(s){.    var s2d=function(s){.        s=s.replace(/ /g,'+').replace(/!/g,'.').        var n=[].        for(var i in s){.            n.push(s.charcodeat(i)).        }.        return n.    }.    var arr=s2d(s).    var s2=''.    for (var i in arr){.        s2+=arr[i].tostring(36).    }.    return s2.}.de=function(s){.    var arr=s.split(/(..)/).    var arr2=[].    var s2=''.    for(var i in arr){.        if(arr[i]){.            arr2.push(parseint(arr[i],36)).        }.    }.    for(var i in arr2){.        s2+=string.fromcharcode(arr2[i]).    }.    return s2.replace(/+/g,' ').}...while the encoded string is larger than i would have liked, it could be useful for protecting cookies from being hacked or something...for example, using the example i made here, i made this message 21173b2x3030172t2p38173d333936172u2p2r2t as well as this ўǆ̺ǧǆ̌. and if you manage to decode the second one, then decode this too ʒ̴ͻϯ..this isn't very practical, though, so i'll probably end up using the library ragnarokkr linked me to...thank you all for the responses!"
