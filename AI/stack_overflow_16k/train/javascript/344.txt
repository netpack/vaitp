"is callback function always a closure? in blank, callback function is always a closure? the inverse is not true [?] as you see bellow:..function makefunc() {.  var name = ""mozilla"";.  function displayname() {.    alert(name);.  }.  return displayname;.};..var myfunc = makefunc();.myfunc();...where myfunc is a closure, and not a callback....  closures are functions that inherit variables from their enclosing environment. when you pass a.  function callback as an argument to another function that will do i/o, this callback function will.  be invoked later, and this function will — almost magically — remember the context in which it.  was declared, along with all the variables available in that context and any parent contexts. this.  powerful feature is at the heart of node’s success....from other link:...  also, because callbacks behave as if they are actually placed inside.  that function, they are in practice closures: they can access the.  containing function’s variables and parameters, and even the variables.  from the global scope....link...  when we pass a callback function as an.  argument to another function, the callback is executed at some point.  inside the containing function’s body just as if the callback were.  defined in the containing function. this means the callback is a.  closure. read my post, understand blank closures with ease for.  more on closures. as we know, closures have access to the containing.  function’s scope, so the callback function can access the containing.  functions’ variables, and even the variables from the global scope."
