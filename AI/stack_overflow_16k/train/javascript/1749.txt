"why receive event as arg in callback when event object works regardless? i know this probably sounds duplicatish, but i've looked everywhere on stack and elsewhere and haven't found a clear explanation...i get what the event object is, and why it's 'passed' as an argument to your dom event callback function. what i realized recently however is that regardless of whether i pass e to my callback function, i can call the event object and get the same exact results. so this click event callback function:..function notfunky(e) { .    e.preventdefault();.    console.log(e.target);.}...gives same result as:..function funky() { .    event.preventdefault();.    console.log(event.target);.}...every post i've read states that when you need access to the event object, you must receive it in the callback function... ..the only difference i could find is that all the event methods (preventdefault etc) exist a bit further down the prototype chain."
