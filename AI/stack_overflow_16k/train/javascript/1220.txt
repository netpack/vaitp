"async function execution order vs regular function execution order as i understand async functions will always return a promise and i can use await only inside an async function...for my question lets take this code example:..async function test1(data){.//do something.await funcreturnspromise();.await funcreturnspromise2();.//do something.}...and the exact same function but not async:..function test2(data){.//do something.funcreturnspromise();.funcreturnspromise2();.//do something.}...now in the second function (the regular one) if i will call it, it will start executing and when it will reach the funcreturnspromise...it will start executing it also until it will return the promise and it will continue (in here i'm not waiting for the promise) to the second call and that's it. ..both funcreturnspromise and funcreturnspromise2 execute some statements and than execute async xhr request and returns the promise, the first statements in each of those functions is vital to me and needs to be executed in an sync order. ..so my question is if i can write my async function like this:..async function test1(data,wait){.//do something.if(wait)await funcreturnspromise();.else funcreturnspromise();.if(wait) await funcreturnspromise2();.else funcreturnspromise2();.//do something.} ...and if i will call it like this test1(somedata,false)  the function will be executed as if it was a regular function? or should i declare both async and regular functions for both of my use cases?"
