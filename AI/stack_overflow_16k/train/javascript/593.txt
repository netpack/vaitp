"whatâ€™s happening in this code with number objects holding properties and incrementing the number? a recent tweet contained this snippet of blank...can someone please explain what is happening in it step by step?..&gt; function dis() { return this }.undefined.&gt; five = dis.call(5).number {[[primitivevalue]]: 5}.&gt; five.wtf = 'potato'.""potato"".&gt; five.wtf.""potato"".&gt; five * 5.25.&gt; five.wtf.""potato"".&gt; five++.5.&gt; five.wtf.undefined.&gt; five.wtf = 'potato?'.""potato?"".&gt; five.wtf.undefined.&gt; five.6...in particular, it is not clear to me:...why the result of dis.call(5) is a number with some kind of a [[primitivevalue]] property, but the results of five++ and five * 5 appear to just be the plain numbers 5 and 25 (not numbers).why the five.wtf property disappears after the five++ increment.why the five.wtf property is no longer even settable after the five++ increment, despite the five.wtf = 'potato?' assignment apparently setting the value."
