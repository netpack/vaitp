"how to programmatically distinguish an arrow function from a regular function? there is no obvious difference between an arrow function and a regular function...({}).tostring.call(function () {}).""[object function]"".({}).tostring.call(() =&gt; {}).""[object function]""...or....console.dir( (function () {}) ).....function anonymous().    arguments: null.    caller: null.    length: 0.    name: """".    prototype: object.    __proto__: ().    &lt;function scope&gt;.....console.dir( (() =&gt; {}) ).....function anonymous().    arguments: (...).    caller: (...).    length: 0.    name: """".    __proto__: ().    &lt;function scope&gt;.....the behaviour of the two is different though and there is a valid use case for being able to tell the two apart...how to programmatically distinguish an arrow function from a regular function?"
