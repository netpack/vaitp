"how to delete nested objects with a particular value? given a nested object like:..var x = {.    'name': 'a',.    'testobj': {.        'blah': 8,.        'testobj2': { // delete this obj.            'blah2': 9,.            'blah3': 'c'.            }.        },.    'level': 1,.    'children': [{.        'name': 'b',.        'level': 2,.        'children': [{ // delete this obj.            'name': 'c',.            'level': 3.        }]}].};...how does one go about deleting a nested object if it contains a property with a value (in my example, the string 'c') one specifies within a function?  with the end result being like this:..var x = {.    'name': 'a',.    'testobj': {.        'blah': 8,.        },.    'level': 1,.    'children': [{.        'name': 'b',.        'level': 2,.        'children': []}].};...here's my code thus far:..function recursiveiteration(obj, callback) {.    var k;.    if (obj instanceof object) {.        for (k in obj){.            if (obj.hasownproperty(k)){.                recursiveiteration( obj[k], callback );  .            }                .        }.    } else {.        callback(obj); // this is the non-object val.    }.}.function deleteobjbyvalue(object, word) {.    return recursiveiteration(object, function(val) {.        if (word === val){.            // here i want to delete the nested object (not the whole object) that contains the property with this val assigned to it.        }else {.            return false;.        }.    });.}.deleteobjbyvalue(x, 'c');"
