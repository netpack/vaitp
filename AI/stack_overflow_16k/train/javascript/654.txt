"how to add count for the same week using reduce blank? i am trying to implement a function using reduce that allows me to group an array of objects { date: '2019-03-11', count: 8 } by weeks. so far, i was able to group dates by weeks but i am having trouble to add together count if the date falls in the same week...const dates = [.  { date: '2019-03-11', count: 8 },.  { date: '2019-03-12', count: 7 },.  { date: '2019-03-09', count: 6 },.  { date: '2019-02-27', count: 10 },.  { date: '2019-02-26', count: 11 },.  { date: '2019-02-22', count: 12 },.  { date: '2019-04-21', count: 3 },.  { date: '2019-04-18', count: 2 },.  { date: '2019-04-17', count: 4 },.  { date: '2019-04-19', count: 5 }.];.date.prototype.getweek = function() {.  const onejan = new date(this.getfullyear(), 0, 1);.  return math.ceil(((this - onejan) / 86400000 + onejan.getday() + 1) / 7);.};..const groups = dates.reduce(function(acc, item) {.  const today = new date(item.date);.  const weeknumber = today.getweek(today);.  // check if the week number exists.  if (typeof acc[weeknumber] === 'undefined') {.    acc[weeknumber] = [];.  }..  acc[weeknumber].push(item.date, item.count);..  return acc;.}, {});..console.log(groups);...current result....desired result..[.  { weekstart: '2019-02-17', count: 12 },.  { weekstart: '2019-02-24', count: 21 },.  { weekstart: '2019-03-03', count: 6 },.  { weekstart: '2019-03-10', count: 15 },.  { weekstart: '2019-04-14', count: 11 },.  { weekstart: '2019-04-21', count: 21 }.]...where weekstart is the first date of the week (sunday) by which it was grouped..solution..const dates = [.  { date: '2019-02-24', count: 10 },.  { date: '2019-02-25', count: 11 },.  { date: '2019-02-26', count: 12 },.  { date: '2019-03-09', count: 8 },.  { date: '2019-03-10', count: 7 },.  { date: '2019-03-11', count: 6 },.  { date: '2019-04-14', count: 3 },.  { date: '2019-04-15', count: 2 },.  { date: '2019-04-16', count: 4 },.  { date: '2019-04-22', count: 5 }.];../**. * returns the week number for this date.  dowoffset is the day of week the week. * ""starts"" on for your locale - it can be from 0 to 6. if dowoffset is 1 (monday),. * the week returned is the iso 8601 week number.. * @param int dowoffset. * @return int. */.date.prototype.getweek = function(dowoffset) {.  /*getweek() was developed by nick baicoianu at meanfreepath: http://www.epoch-calendar.com */..  dowoffset = typeof dowoffset == 'int' ? dowoffset : 0; //default dowoffset to zero.  var newyear = new date(this.getfullyear(), 0, 1);.  var day = newyear.getday() - dowoffset; //the day of week the year begins on.  day = day &gt;= 0 ? day : day + 7;.  var daynum =.    math.floor(.      (this.gettime() -.        newyear.gettime() -.        (this.gettimezoneoffset() - newyear.gettimezoneoffset()) * 60000) /.        86400000.    ) + 1;.  var weeknum;.  //if the year starts before the middle of a week.  if (day &lt; 4) {.    weeknum = math.floor((daynum + day - 1) / 7) + 1;.    if (weeknum &gt; 52) {.      nyear = new date(this.getfullyear() + 1, 0, 1);.      nday = nyear.getday() - dowoffset;.      nday = nday &gt;= 0 ? nday : nday + 7;.      /*if the next year starts before the middle of.           the week, it is week #1 of that year*/.      weeknum = nday &lt; 4 ? 1 : 53;.    }.  } else {.    weeknum = math.floor((daynum + day - 1) / 7);.  }.  return weeknum;.};..function getweekstart(date) {.  var offset = new date(date).getday();.  return new date(new date(date) - offset * 24 * 60 * 60 * 1000).    .toisostring().    .slice(0, 10);.}..function groupweeks(dates) {.  const groupsbyweeknumber = dates.reduce(function(acc, item) {.    const today = new date(item.date);.    const weeknumber = today.getweek();..    // check if the week number exists.    if (typeof acc[weeknumber] === 'undefined') {.      acc[weeknumber] = [];.    }..    acc[weeknumber].push(item);..    return acc;.  }, []);..  return groupsbyweeknumber.map(function(group) {.    return {.      weekstart: getweekstart(group[0].date),.      count: group.reduce(function(acc, item) {.        return acc + item.count;.      }, 0).    };.  });.}..console.log(groupweeks(dates));"
