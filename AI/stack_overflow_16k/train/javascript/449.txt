"the difference between constructors i am working through testfirst blank and hit a wall of confusion.  both of these code snippets pass the tests but i am confused on the difference or if there is even a main difference between these two solutions.  overall, i believe what the test is asking me to create is a 'constructor' function...tests cases: ..describe(""calculator"", function() {..  var calculator;..  beforeeach(function() {.    calculator = new calculator();.  });..  it(""initially has 0"", function() {.    expect(calculator.value()).toequal(0);.  });..    it(""can add a number"", function() {.        calculator.add(2);.    expect(calculator.value()).toequal(2);.    });..    it(""can add two numbers"", function() {.        calculator.add(2);.        calculator.add(3);.    expect(calculator.value()).toequal(5);.    });..    it(""can add many numbers"", function() {.        calculator.add(2);.        calculator.add(3);.        calculator.add(4);.    expect(calculator.value()).toequal(9);.    });..    it(""can subtract a number"", function() {.        calculator.subtract(2);.    expect(calculator.value()).toequal(-2);.    });..    it(""can add and subtract"", function() {.        calculator.add(3);.        calculator.subtract(2);.    expect(calculator.value()).toequal(1);.    });.});...solution 1:..var calculator = function(){..  this.accumulator = 0;..  this.value = function(){.    return this.accumulator;.  };..  this.add = function(operand){.    this.accumulator += operand;.  };..  this.subtract = function(operand){.    this.accumulator -= operand;.  };..};...solution 2:..function calculator() {.    this.num = 0;.};..calculator.prototype = {.    value: function() {.        return this.num;.    },.    add: function() {.        for (var i = 0; i &lt; arguments.length; i++){.            this.num += arguments[i];.        }.    },.    subtract: function() {.        for (var i = 0; i &lt; arguments.length; i++){.            this.num -= arguments[i];.        }       .    }.};...my main question is in solution 1, this is a constructor function.  what i don't know is if when we create a new calculator with it, ex:..var calculatorsolone = new calculator();...are all the properties on calculatorsolone or are they inheriting these properties from the prototype of calculator?..using solution 2, where are the properties stored, i believe for solution 2 they are stored on the calculator.prototype and the only value on the actual object is the number value (the rest of the properties have to look at calculator.prototype and get their properties from the prototype object)."
