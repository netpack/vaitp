"need to add an event listener for on click i've made this viewer which is technically an ecatalog...what i'm now trying to do is track the clicks made on the icons. so all i really need to do right now is be able to execute a function on click of an icon...however i can't figure out where in the code to do it...please help me identify which one is correct?.a simple alert(""works""); on click would be wonderful!..my initial guesses were:..        // add an event listener for thumbnailpagebutton click events.        thumbnailpagebutton.addeventlistener(""click"", onthumbnailpagebutton, false);...and:../* event handler for s7sdk.event.assetevent.item_selected_event events dispatched by pageview to switch pages .           for pageview item selections. */..    function onpageviewselected(event){.        switchtopage(event);.    }...but that did not seem to work...an example of it is here:....&lt;style type=""text/css"" media=""screen""&gt;./* alert('should be receiving the url');var s = '$$'; $.colorbox({""href"": s}); $.colorbox.resize();*/../*************************************************************************/../* the following styles overwrites the default styles defined by s7sdk to provide.      custom look and feel. */../*************************************************************************/../* document body */..body {.  padding: 0;.  margin: 0;.  overflow: hidden;.}./*************************************************************************/../* container */../* this example specifies default size of the entire ecatalog viewer */...s7container {.  width: 760px;.  height: 334px;.  background-color: rgb(221, 221, 221);.}./*************************************************************************/../* tooltip */...s7tooltip {.  display: none !important;.  -moz-border-radius: 3px 3px 3px 3px;.  -webkit-border-radius: 3px 3px 3px 3px;.  border-radius: 3px 3px 3px 3px;.  border-color: #999999;.  background-color: #000000;.  color: #ffffff;.  font-family: arial, helvetica, sans-serif;.  font-size: 11px;.}./*************************************************************************/../* pageview */...s7pageview {.  position: absolute;.  top: 0px;.  left: 0px;.}./* icon effect */...s7pageview .s7iconeffect {.  display: none !important;.  width: 100px;.  height: 100px;.  background-size: contain;.}..s7pageview .s7iconeffect[media-type='standard'] {.  display: none !important;.  background-image: url(images/iconeffect_zoom.png);.}..s7pageview .s7iconeffect[media-type='multitouch'] {.  background-image: url(images/iconeffect_pinch.png);.}./*************************************************************************/../* thumbnailgridview that displays thumbnails for all pages. */...s7thumbnailgridview {.  width: 1024px;.  height: 768px;.  top: 40px;.  left: 0px;.  position: absolute;.}..s7thumbnailgridview .s7thumb {.  width: 120px;.  height: 85px;.  background-color: rgb(255, 255, 255);.  border: solid 1px #999999;.}..s7thumbnailgridview .s7thumb[state=""selected""] {.  border: solid 2px #666666;.}..s7thumbnailgridview .s7thumbcell {.  margin-left: 5px;.  margin-bottom: 5px;.  margin-right: 5px;.  margin-top: 5px;.}..s7thumbnailgridview .s7scrollbar {.  background-color: rgba(102, 102, 102, 0);.  position: absolute;.  top: 8px;.  bottom: 8px;.  right: 8px;.  width: 28px;.}..s7thumbnailgridview .s7scrollbar .s7scrolltrack {.  width: 28px;.  background-color: rgba(102, 102, 102, 0.5);.}..s7thumbnailgridview .s7scrollbar .s7scrollthumb {.  display: none !important;.  visibility: hidden !important;.  width: 28px;.  height: 45px;.}..s7thumbnailgridview .s7scrollbar .s7scrollthumb[state='up'] {.  background-image: url(images/thumbnailscrollthumb_dark_up.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollthumb[state='over'] {.  background-image: url(images/thumbnailscrollthumb_dark_over.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollthumb[state='down'] {.  background-image: url(images/thumbnailscrollthumb_dark_down.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollthumb[state='disabled'] {.  background-image: url(images/thumbnailscrollthumb_dark_up.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollupbutton {.  width: 28px;.  height: 32px;.}..s7thumbnailgridview .s7scrollbar .s7scrollupbutton[state='up'] {.  background-image: url(images/thumbnailscrollupbutton_dark_up.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollupbutton[state='over'] {.  background-image: url(images/thumbnailscrollupbutton_dark_over.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollupbutton[state='down'] {.  background-image: url(images/thumbnailscrollupbutton_dark_down.png);.}..s7thumbnailgridview .s7scrollbar .s7scrollupbutton[state='disabled'] {.  background-image: url(images/thumbnailscrollupbutton_dark_up.png);.}..s7thumbnailgridview .s7scrollbar .s7scrolldownbutton {.  width: 28px;.  height: 32px;.}..s7thumbnailgridview .s7scrollbar .s7scrolldownbutton[state='up'] {.  background-image: url(images/thumbnailscrolldownbutton_dark_up.png);.}..s7thumbnailgridview .s7scrollbar .s7scrolldownbutton[state='over'] {.  background-image: url(images/thumbnailscrolldownbutton_dark_over.png);.}..s7thumbnailgridview .s7scrollbar .s7scrolldownbutton[state='down'] {.  background-image: url(images/thumbnailscrolldownbutton_dark_down.png);.}..s7thumbnailgridview .s7scrollbar .s7scrolldownbutton[state='disabled'] {.  background-image: url(images/thumbnailscrolldownbutton_dark_up.png);.}./*************************************************************************/../* controlbar containing both thumbnailpagebutton and fullscreenbutton */../* mvs - hide tool bar at top */...s7controlbar {.  display: none !important;.  visibility: hidden !important;.  position: absolute;.  left: 0;.  top: 0px;.  width: 100%;.  height: 36px;.  position: absolute;.  display: block;.  z-index: 1;.  background-color: rgb(0, 0, 0);.  /*whithout alpha*/.  background-color: rgba(0, 0, 0, 0.5);.  z-index: 2;.}./*************************************************************************/../* imagemapeffect */...s7imagemapeffect .s7mapoverlay {.  height: 17px;.  width: 17px;.  background-repeat: no-repeat;.  background-position: center;.  background-size: contain;.  display: block;.  background-image: url(images/circle-white-bold.png);.}..s7imagemapeffect .s7mapoverlay[state=""default""] {.  opacity: 1;.}..s7imagemapeffect .s7mapoverlay[state=""active""] {.  opacity: 1;.}./*************************************************************************/../* fullscreenbutton */...s7fullscreenbutton {.  position: absolute;.  bottom: 4px;.  right: 5px;.  width: 28px;.  height: 28px;.  background-size: contain;.}..s7fullscreenbutton[selected='true'][state='up'] {.  background-image: url(images/minscreenbutton_dark_up.png);.}..s7fullscreenbutton[selected='true'][state='over'] {.  background-image: url(images/minscreenbutton_dark_over.png);.}..s7fullscreenbutton[selected='true'][state='down'] {.  background-image: url(images/minscreenbutton_dark_down.png);.}..s7fullscreenbutton[selected='true'][state='disabled'] {.  background-image: url(images/minscreenbutton_dark_disabled.png);.}..s7fullscreenbutton[selected='false'][state='up'] {.  background-image: url(images/fullscreenbutton_dark_up.png);.}..s7fullscreenbutton[selected='false'][state='over'] {.  background-image: url(images/fullscreenbutton_dark_over.png);.}..s7fullscreenbutton[selected='false'][state='down'] {.  background-image: url(images/fullscreenbutton_dark_down.png);.}..s7fullscreenbutton[selected='false'][state='disabled'] {.  background-image: url(images/fullscreenbutton_dark_disabled.png);.}./*************************************************************************/../* thumbnailpagebutton */...s7thumbnailpagebutton {.  position: absolute;.  bottom: 4px;.  left: 5px;.  width: 20px;.  height: 20px;.  background-size: contain;.}..s7thumbnailpagebutton[selected='false'][state='up'] {.  background-image: url(images/thumbnailpagebutton_dark_up.png);.}..s7thumbnailpagebutton[selected='false'][state='over'] {.  background-image: url(images/thumbnailpagebutton_dark_over.png);.}..s7thumbnailpagebutton[selected='false'][state='down'] {.  background-image: url(images/thumbnailpagebutton_dark_down.png);.}..s7thumbnailpagebutton[selected='false'][state='disabled'] {.  background-image: url(images/thumbnailpagebutton_dark_disabled.png);.}..s7thumbnailpagebutton[selected='true'][state='up'] {.  background-image: url(images/thumbnailpagebutton_dark_over.png);.}..s7thumbnailpagebutton[selected='true'][state='over'] {.  background-image: url(images/thumbnailpagebutton_dark_over.png);.}..s7thumbnailpagebutton[selected='true'][state='down'] {.  background-image: url(images/thumbnailpagebutton_dark_over.png);.}..s7thumbnailpagebutton[selected='true'][state='disabled'] {.  background-image: url(images/thumbnailpagebutton_dark_disabled.png);.}./*************************************************************************/../* infopanelpopup */...s7infopanelpopup {.  position: absolute;.  top: 0px;.  left: 0px;.  background-color: rgba(0, 0, 0, 0.75);.  z-index: 6000;.}..s7infopanelpopup .s7overlay {.  left: 50%;.  top: 50%;.  width: 300px;.  height: 200px;.  margin-left: -150px;.  margin-top: -100px;.  padding-top: 40px;.  padding-right: 10px;.  padding-bottom: 10px;.  padding-left: 10px;.  background-color: rgb(221, 221, 221);.  -moz-border-radius: 10px 10px 10px 10px;.  -webkit-border-radius: 10px 10px 10px 10px;.  border-radius: 10px 10px 10px 10px;.  background-size: 100% 100%;.  -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.25);.  -moz-box-shadow: 0 0 5px rgba(0, 0, 0, 0.25);.  box-shadow: 0 0 5px rgba(0, 0, 0, 0.25);.}..s7infopanelpopup .s7closebutton {.  position: absolute;.  width: 28px;.  height: 28px;.  top: 5px;.  right: 5px;.  padding: 0px;.  visibility: inherit;.}..s7infopanelpopup .s7closebutton[state=""up""] {.  background-image: url(images/infopanelpopup_closebutton_dark_up.png);.}..s7infopanelpopup .s7closebutton[state=""over""] {.  background-image: url(images/infopanelpopup_closebutton_dark_over.png);.}..s7infopanelpopup .s7closebutton[state=""down""] {.  background-image: url(images/infopanelpopup_closebutton_dark_up.png);.}..s7infopanelpopup .s7closebutton[state=""disabled""] {.  background-image: url(images/infopanelpopup_closebutton_dark_up.png);.}./*************************************************************************/../* pagescrubber  */...s7pagescrubber {.  height: 0px !important;.  width: 1024px;.  bottom: 20px;.  left: 0px;.  position: absolute;.  z-index: 3;.}./* track component of the pagescrubber */...s7pagescrubber .s7track {.  display: none !important;.  visibility: hidden !important;.  width: 760px;.  padding-top: 200px;.}.&lt;/style&gt; &lt;/head&gt;.&lt;!doctype html&gt;.&lt;html&gt;..&lt;head&gt;.  &lt;meta http-equiv=""content-type"" content=""text/html; charset=utf-8"" /&gt;.  &lt;!-- removed height=device-height, --&gt;.  &lt;meta name=""viewport"" content=""user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0"" /&gt;.  &lt;title&gt;adobe scene7 viewer sdk ecatalog example&lt;/title&gt;..  &lt;script language=""blank"" type=""text/blank"" src=""http://s7d1.scene7.com/s7sdk/2.9/js/s7sdk/utils/utils.js""&gt;&lt;/script&gt;.  &lt;script language=""blank"" type=""text/blank""&gt;.    s7sdk.util.lib.include('s7sdk.common.button');.    s7sdk.util.lib.include('s7sdk.common.controlbar');.    s7sdk.util.lib.include('s7sdk.common.container');.    s7sdk.util.lib.include('s7sdk.set.pageview');.    s7sdk.util.lib.include('s7sdk.set.pagescrubber');.    s7sdk.util.lib.include('s7sdk.set.thumbnailgridview');.    s7sdk.util.lib.include('s7sdk.image.imagemapeffect');.    s7sdk.util.lib.include('s7sdk.info.infopanelpopup');.    s7sdk.util.lib.include('s7sdk.set.mediaset');.  &lt;/script&gt;.  &lt;script src=""https://www.ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js""&gt;&lt;/script&gt;.  &lt;script src=""../jquery.colorbox.js""&gt;&lt;/script&gt;...  &lt;body&gt;.    &lt;script type=""text/blank""&gt;.      function myfunction(receivehreffroms7) {...        // store the received parameter from s7.        var quickviewlink = receivehreffroms7;..        //or else it will execute within the iframe..        $(function() {..          parent.test(quickviewlink);.        });..      }.    &lt;/script&gt;.    &lt;script language=""blank"" type=""text/blank""&gt;.      // call the s7sdk.util.init() method to initialize the s7sdk libraries..      s7sdk.util.init();..      /* create an instance of the parametermanager component to collect.      components' configuration that can come from a viewer preset, url, or the html page itself. the parametermanager .      component also sends a notification s7sdk.event.sdk_ready when all needed files are loaded and the configuration .      parameters are processed. the other components should never be initialized outside of this handler. after  .      defining the handler for the s7sdk.event.sdk_ready event, it is safe to initiate .      configuration initialization by calling parametermanager.init(). */.      var params = new s7sdk.parametermanager();..      /* variables for component objects */.      var container, pageview, pagescrubber, controls, mediaset, imagemapeffect, infopanelpopup,.        thumbnailpagebutton, gridview, fullscreenbutton;..      /* event handler for s7sdk.event.sdk_ready dispatched by parametermanager to initialize various components of .      this viewer. */.      function initviewer() {.        /* explicitly specify default modifiers in the viewer code by calling push()..       specify the default video by pushing serverurl, videoserverurl and asset..       'serverurl' should refer to the image server where your company assets reside..       'asset' should be assigned with an asset id..       both 'serverurl' and 'asset' can be omitted or overriden if they were pass as url parameters.       (serverurl=...) and (asset=...) */.        params.push(""serverurl"", ""http://s7d5.scene7.com/is/image/"");. ....        // create mediaset to manage assets and add event listener to the notf_set_parsed event.        mediaset = new s7sdk.set.mediaset(null, params, ""s7mediaset"");.        // add mediaset event listener.        mediaset.addeventlistener(s7sdk.event.assetevent.notf_set_parsed, onsetparsed, false);..        /* disable info panel by default, append imagemapeffect.rollover=1 to enable..       when enabled, the info panel will display the template string when the mouse is over a map region. */.        params.push(""imagemapeffect.rollover"", ""0"");.        /* define template and variable mappings for content of info panel.  in this example,.       the template string is defined for all the hotspot is: value of &lt;b&gt;var1&lt;/b&gt; for the map region is &lt;b&gt;$var1$&lt;/b&gt;,.       where $var1$ will be substituted by the value defined in the &lt;var /&gt; element of that region, or assume the .       global default definition..       in this example, .       the global default value for var1 is defined as ""adobe scene7"",.       the default value for var1 for map region 1-1 is not defined and will assume the global default value,.       the default value for var1 for map region 2-1 is defined as ""dynamic imaging solution"",.       the default value for var1 for map region 2-2 is defined as ""ecatalog solution"",.       the default value for var1 for map region 3-1 is defined as ""visual configurators solution"", and.       the default value for var1 for map retion 3-2 is defined as ""targeted email &amp; print solution"".    */.        params.push('template', '&lt;info&gt;&lt;var name=""var1""&gt;&lt;![cdata[adobe scene7]]&gt;&lt;/var&gt;&lt;var name=""var1"" rollover=""2-1""&gt;&lt;![cdata[dynamic imaging solution]]&gt;&lt;/var&gt;&lt;var name=""var1"" rollover=""2-2""&gt;&lt;![cdata[ecatalog solution]]&gt;&lt;/var&gt;&lt;var name=""var1"" rollover=""3-1""&gt;&lt;![cdata[visual configurators solution]]&gt;&lt;/var&gt;&lt;var name=""var1"" rollover=""3-2""&gt;&lt;![cdata[targeted email &amp; print solution]]&gt;&lt;/var&gt;&lt;![cdata[value of &lt;b&gt;var1&lt;/b&gt; for this map region is &lt;b&gt;$var1$&lt;/b&gt;]]&gt;&lt;/info&gt;'); //template for info panel popup..        /* create a viewer container as a parent component for other ui components that are part of the viewer application and.       associate event handlers for resize and fullscreen notification. .       the advantage of using container as the parent is the component's ability to resize and bring itself and its .       children to full screen. */.        container = new s7sdk.common.container(null, params, ""s7container"");.        container.addeventlistener(s7sdk.event.resizeevent.component_resize, resizeviewer, false);.        container.addeventlistener(s7sdk.event.resizeevent.fullscreen_resize, oncontainerfullscreen, false);..        // create the pagescrubber component object.        pagescrubber = new s7sdk.set.pagescrubber(container, params, ""s7pagescrubber"");..        // create the pageview component object.        pageview = new s7sdk.set.pageview(container, params, ""s7pageview"");..        // create the thumbnailgridview component object.        gridview = new s7sdk.set.thumbnailgridview(container, params, ""s7gridview"");..        // create the controlbar component object.        controls = new s7sdk.common.controlbar(container, params, ""s7controls"");..        // create the imagemapeffect component object.        imagemapeffect = new s7sdk.image.imagemapeffect(""s7pageview"", params, ""s7imagemapeffect"");.        // add event listeners for image map rollover and target events.        imagemapeffect.addeventlistener(s7sdk.event.rolloverkeyevent.rollover_activated, rolloverkeyhandler, false);.        imagemapeffect.addeventlistener(s7sdk.event.rolloverkeyevent.rollover_deactivated, rolloverkeyhandler, false);.        imagemapeffect.addeventlistener(s7sdk.event.rolloverkeyevent.target_index, rolloverkeytargethandler, false);..        infopanelpopup = new s7sdk.info.infopanelpopup(container, params, ""s7infopanelpopup"");..        // attach the pageview, gridview and imagemapeffect objects to the controlbar.        controls.attachview(pageview);.        controls.attachview(gridview);.        controls.attachview(imagemapeffect);..        // create the thumbnailpagebutton component object.        thumbnailpagebutton = new s7sdk.common.thumbnailpagebutton(""s7controls"", params, ""s7thumbnailbutton"");..        // create the thumbnailpagebutton component object.        fullscreenbutton = new s7sdk.common.fullscreenbutton(""s7controls"", params, ""s7fullscreenbutton"");..        // hide the thumbnailgridview by default - this usage will be deprecated, use setcss() in the following release.        gridview.getobj().style.visibility = ""hidden"";..        // add an event listener for pageview selection events.        pageview.addeventlistener(s7sdk.event.assetevent.item_selected_event, onpageviewselected, false);..        // add an event listener for thumbnailgridview swatch selection events.        gridview.addeventlistener(s7sdk.event.assetevent.swatch_selected_event, ongridviewswatchselected, false);..        window.addeventlistener(""load"", function() {...          // add an event listener for thumbnailpagebutton click events.          thumbnailpagebutton.addeventlistener(""click"", onthumbnailpagebutton, false);...        });..        // add an event listener for fullscreenbutton click events.        fullscreenbutton.addeventlistener(""click"", onfullscreenbuttonclick, false);..        // add an event listener for pagescrubber selection events.        pagescrubber.addeventlistener(s7sdk.event.assetevent.item_selected_event, onpagescrubberselected, false);.      }..      /* event handler for s7sdk.event.assetevent.item_selected_event events dispatched by pageview to switch pages .      for pageview item selections. */.      function onpageviewselected(event) {.        switchtopage(event);.      }..      /* event handler for s7sdk.event.assetevent.swatch_selected_event events dispatched by thumbnailgridview to .      switch pages for thumbnailgridview swatch selections. */.      function ongridviewswatchselected(event) {.        switchtopage(event);.      }..      /* event handler for click events dispatched by thumbnailpagebutton to update the visibility of ui elements. */.      function onthumbnailpagebutton(event) {.        updateui();.        alertsomething();.      }....      /* updates visibility state of different ui elements */.      function updateui() {.        // show/hide pageview - this usage will be deprecated, use setcss() in the following release.        pageview.getobj().style.visibility = thumbnailpagebutton.isselected() ? ""hidden"" : ""inherit"";.        // show/hide thumbnailgridview - this usage will be deprecated, use setcss() in the following release.        gridview.getobj().style.visibility = thumbnailpagebutton.isselected() ? ""inherit"" : ""hidden"";.        // show/hide pagescrubber.        pagescrubber.setcss(""s7pagescrubber"", ""visibility"", (!thumbnailpagebutton.isselected()) ? ""inherit"" : ""hidden"");.      }..      function alertsomething() {.        alert('hi');.      }..      /* event handler for s7sdk.event.assetevent.item_selected_event events dispatched by pagescrubber to .      switch pages for pagescrubber item selections. */.      function onpagescrubberselected(event) {.        switchtopage(event);.      }..      /* event handler for click events dispatched by fullscreenbutton to switch between normal and full screen modes. */.      function onfullscreenbuttonclick(event) {.        if (!container.isfullscreen()) {.          container.requestfullscreen();.        } else {.          container.cancelfullscreen();.        }.      }..       // define an event handler function to activate the infopanelpopup for image map rollovers.      function rolloverkeyhandler(event) {.        if (event.s7event.rolloverkey != null) {.          infopanelpopup.activaterollover(event.s7event.rolloverkey);.        }.      }..      function rolloverkeytargethandler(event) {.        if (event.s7event.frame) {.          var frameindex = event.s7event.frame;.          var orientation = self.getorientation();.          if (orientation == 0 || orientation == 180) {.            //portrait.            frameindex = this.landscapetoportraithash[frameindex];.          }.          pageview.setcurrentframeindex(frameindex);.        }.      }..      /**.       * define a function to deal with the popup for image map.       */.      function loadproduct(href) {.        var new_window = window.open(href);.        try {.          new_window.focus();.        } catch (err) {}.      }..      /* define a function to update all components to display the currently selected page */.      function switchtopage(event) {.        infopanelpopup.setitem(event.s7event.asset);.        pageview.setcurrentframeindex(event.s7event.frame);.        gridview.selectswatch(event.s7event.frame, true);.        pagescrubber.setcurrentframeindex(event.s7event.frame);.        // if the thumbnailgridview is showing, hide it and deselect the thumbnailpagebutton.        if (thumbnailpagebutton.isselected()) {.          thumbnailpagebutton.setselected(false);.          updateui();.        }.      }..      /* add event handler for the s7sdk.event.sdk_ready event dispatched by the parametermanager when all modifiers are .      processed and it is safe to initialize the viewer. */.      params.addeventlistener(s7sdk.event.sdk_ready, initviewer, false);..      /* initiate configuration initialization of parametermanager. */.      params.init();..      /* event handler for s7sdk.event.resizeevent.component_resize events dispatched by container to resize.      various view components included in this viewer. */.      function resizeviewer(event) {.        pageview.resize(event.s7event.w, event.s7event.h);.        infopanelpopup.resize(event.s7event.w, event.s7event.h);.        gridview.resize(event.s7event.w, event.s7event.h - 40);.        pagescrubber.resize(event.s7event.w, 55);.      }..      /* event handler for s7sdk.event.resizeevent.fullscreen_resize events dispatched by container to update.      the appearance of the fullscreenbutton. */.      function oncontainerfullscreen(event) {.        fullscreenbutton.setselected(container.isfullscreen());.      }..      /* event handler for the s7sdk.event.assetevent.notf_set_parsed event dispatched by mediaset to.      assign the asset to the pageview, pagescrubber and thumbnailgridview when parsing is complete. */.      function onsetparsed(event) {.        // set media set for various components to display.        var mediaset = event.s7event.asset;.        pageview.setmediaset(event.s7event.asset);.        pagescrubber.setmediaset(event.s7event.asset);.        gridview.setmediaset(event.s7event.asset);.      }.    &lt;/script&gt;.  &lt;/body&gt;..&lt;/html&gt;"
