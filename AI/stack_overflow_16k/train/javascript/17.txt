"replace prototype dynamically by changing constructor property i am trying to make some good code example to experience blank's ""classlessness"". this is what i have come up with so far:..function one() {}.function two() {}..one.prototype.a = 5;.two.prototype.b = 4;..var obj = new one();.print(""1) ctor ="", obj.constructor, ""a ="", obj.a, "" b ="", obj.b);.obj.constructor = two;.print(""1) ctor ="", obj.constructor, ""a ="", obj.a, "" b ="", obj.b);..var objtwo = new obj.constructor();.print(""2) ctor ="", objtwo.constructor, ""a ="", objtwo.a, "" b ="", objtwo.b);...and these are corresponding prints:..1) ctor = function one() {.} a = 5  b = undefined.1) ctor = function two() {.} a = 5  b = undefined.2) ctor = function two() {.} a = undefined  b = 4...my question is why prototype chain does not work here by the book? i run my example in ideone with blank (spidermonkey) (spidermonkey-1.7). it looks like in real life prototype is accessed somehow else than constructor.prototype?..p.s. further experimentation shows that assigning to obj.constructor adds new property, which shadows the original one. why?.."
