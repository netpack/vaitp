"replacing `string.prototype.valueof` in blank i'm building a dsl which would benefit from being able to hack some js internals. i understand this is a very bad idea in general js usage, but for my purposes it's okay. the following code works fine:..var str = new string(""blah"");.str.valueof = function() { return 10 }.console.log(str * 10); // outputs 100...but this doesn't:..var str = ""blah"";.str.valueof = function() { return 10 }.console.log(str * 10); // outputs nan (because str === ""blah"")...can someone who understands the internals a bit explain what's happening here? what's the underlying difference between these two examples?..and now what if i want to change the string prototype itself, so i can set the valueof method of all strings, no matter when/where/how they are created? is this possible? unfortunately this doesn't seem to work:..string.prototype.valueof = function() { return 10 }.console.log(""blah"" * 10); // nan...though this does:..string.prototype.valueof = function() { return 10 }.console.log(""blah"".valueof() * 10); // 100...and so does this:..string.prototype.valueof = function() { return 10 }.console.log(new string(""blah"") * 10); // 100...why does the js engine treat ""blah"" and new string(""blah"") differently? thanks!..by the way, here is a good article that sort of led me to explore this stuff."
