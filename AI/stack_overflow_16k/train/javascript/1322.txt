"in prototype inheritance program when a property not found in a specified object all, after reading this post, and did some test based on it ...        function shape() {.            this.x = 0;.            this.y = 0;.        };..        shape.prototype.move = function(x, y) {.            this.x += x;.            this.y += y;.            console.log(""shape moved."");.        };..        // rectangle - subclass.        function rectangle() {.            //shape.call(this); //call super constructor..        };..        rectangle.prototype = object.create(shape.prototype);..        var rect = new rectangle();.                    alert(rect.x);...if i commented the code shape.call(this); in the rectangle, i found the rect.x is underfined instead of the value 0...and what make me confused is that i found in the best answer of the post said:..""in blank, every object has a secret link to the object which created it,forming a chain. when an object is asked for a property that it does not have,its parent object is asked... continually up the chain until the property is found or until the root object is reached.""..so i can't understand why the rect can't found x in the prototype chain. the rect is already inherited form shape. if the x doesn't exist in the rect, it supposed be found in his parent. right ?.and in my understanding .if using shape.call(this); , it just add a new x property to the rect, well ,that would not be a code reusing the original x from parents. it just like the override property in the classical inheritance . that is add a new property into the sub class which have the same name and type as the one in the base class..i don't know if my understanding is right , if not . please correct me .or was i missing something i didn't noticed ? thanks...edit..below is my understanding based on the thilo and arun p johny 's answers. please correct me if it is not right...before inheritance happen.....after inheritance executed.....so the x only belong to the instance constructed by shape. thanks"
