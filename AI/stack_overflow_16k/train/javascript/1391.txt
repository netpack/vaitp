"confusion with how js engine runs promises? i am new to js and was learning promises. so, let's say we have this code: ..new promise(function(resolve, reject) {..  settimeout(() =&gt; resolve(1), 1000); // (*)..}).then(function(result) { // (**)..  alert(result); // 1.  return result * 2;..})...as you can see the code above, when promise is invoked, settimeout is run via callback queue. the question is when settimeout is sent to a browser, will js engine omit .then() and continues running the rest of the code until the promise resolves? secondly, async/await example:..async function showavatar() {..  // read our json.  let response = await fetch('/article/promise-chaining/user.json');.  let user = await response.json();..  // read github user.  let githubresponse = await fetch(`https://api.github.com/users/${user.name}`);.  let githubuser = await githubresponse.json();..  // show the avatar.  let img = document.createelement('img');.  img.src = githubuser.avatar_url;.  img.classname = ""promise-avatar-example"";.  document.body.append(img);..  // wait 3 seconds.  await new promise((resolve, reject) =&gt; settimeout(resolve, 3000));..  img.remove();..  return githubuser;.}..showavatar();...when showavatar function is called, js engine will encounter let response = await fetch('/article/promise-chaining/user.json'); and sends fetch to the browser to handle. the second question is will js engine wait until fetch gets resolved or will js engine continue executing  let user = await response.json(); and the rest of the code inside showavatar function? if so, how can js engine handle response.json() since response is not received? hope you got my point)))."
