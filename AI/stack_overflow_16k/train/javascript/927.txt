"blank clean up of (local) objects referenced in ""delayed"" functions does blank (pure, not jquery, if it matters) know to clear up/free/release from the last reference to an object in a ""delayed"" function called from a timer or event?..take the following code:..function myinitfunc().{.  var myinitobj = new object();.  myinitobj.properties = lotsofstuff;..  var mydelayedinitfunc = function ().  {.    dosomethingwith(myinitobj);.    // i shall not be accessing myinitobj again now..  };..  // let's say, *one* of the following:.  settimeout(mydelayedinitfunc, 1000);.  window.addeventlistener('load', mydelayedinitfunc);.  document.addeventlistener('domcontentloaded', mydelayedinitfunc);.}...note that mydelayedinitfunc() is deliberately accessing variable myinitobj, which is local to myinitfunc()...in, say, http://blank.info/tutorial/memory-leaks it states ""functions used in settimeout/setinterval are also referenced internally and tracked until complete, then cleaned up"".  does this ""clean up"" understand that it can get rid of the myinitobj as well as the function itself?  i'm sort of guessing it does......what about the two event examples?  even though we know they are ""one-shot"" events, i'm guessing that neither mydelayedinitfunc nor myinitobj will get cleaned up?..if it is the case that some of these do not clean up, should i make mydelayedfunc() set myinitobj = null; at its end so as to minimise the wastage?"
