"blank stranges lag finding a key in a map i have a real time application with a pretty simple data structure : a map going from a time (in seconds) to a state (the state of my system). and for each frame i get a given time and i want to retrieve the state for this time...for example if i have 3 states : ...0.3a -> state_a.0.7 -> state_b.1.1 -> state_c...if i am given t=0.5 i should return state_b because 0.7 is the minimum key such that k >= t..now here is my implementation (in pseudo code) :..var states // my map [time -&gt; state].var t // the time.var keys = keysof(states) // get the key set of the states.var correctkeys = filter(keys, (k) -&gt; k &gt;= t) // removes all keys less than t.var selectedkey = min(correctkeys) // the best key.return states[selectedkey] // return the state we want to render...this code works perfectly is decently fast. the problem it breaks in some cases. in fact in blank keys are always strings. so when i filter them and find the minimum i am using the alphabetical order and not the number order and then we have 19 &lt; 2..i fixed it by doing this at program startup: ..keys = map(keys, parsefloat) //convert all keys to floats ...now everything is perfect but it is insanely slow (just by adding this line of code)..i tried to find out where it could come from and my ideas are : ...comparing floats is slower than comparing strings which is false according to my benchmarks (sorry i'm not able to post them as jsperf is down and their herokuapp does not seem to work).accessing a map using a float is slower than accessing it with a string. according to my benchmarks it is true (17x slower on nodejs, but only 1.3x on firefox 39)...what do you think about this problem ?..am i missing a simple way to solve this ? ..thank you very much"
