"maximum call stack on non recursive function hello i'm running on a problem with this function that results in a maximum call stack exceeded error. this function is not recursive, so i don't really understand why it is exceeding the call stack...i copied this function from some blog (maybe stackoveflow), it converts a word array to a byte array to use in pako.js...it's used to inflate a zlib compressed string...when the string is small it doesn't exceed the call stack, but with longer strings it exceeds it...i've tried rewriting it with settimeout, but it becomes very slow..do any of you have any suggestions?..thanks...const wordtobytearray = function (word, length) {.    let ba = [];.    let i;.    let xff = 0xff;..    if (length &gt; 0).        ba.push(word &gt;&gt;&gt; 24);.    if (length &gt; 1).        ba.push((word &gt;&gt;&gt; 16) &amp; xff);.    if (length &gt; 2).        ba.push((word &gt;&gt;&gt; 8) &amp; xff);.    if (length &gt; 3).        ba.push(word &amp; xff);..    return ba;.};..const wordarraytobytearray = function(wordarray, length) {.    if (wordarray.hasownproperty(""sigbytes"") &amp;&amp; wordarray.hasownproperty(""words"")) {.        length = wordarray.sigbytes;.        wordarray = wordarray.words;.    }..    let result = [];.    let bytes;.    let i = 0;..    while (length &gt; 0) {.        bytes = wordtobytearray(wordarray[i], math.min(4, length));.        length -= bytes.length;.        result.push(bytes);.        i++;.    }..    return [].concat.apply([], result);.};...solution.thanks for the answers bellow, this was the solution...    ....    while (length &gt; 0) {.        bytes = wordtobytearray(wordarray[i], math.min(4, length));.        length -= bytes.length;.        bytes.foreach(function (byte) {.            result.push(byte);.        });.        i++;.    }..    return result;.};"
