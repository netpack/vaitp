"writing a js library - should i duplicate class methods and static methods? suppose i am writing a library foo.js and i have a class bar with a method baz()..suppose there is also an instance variable on bar this.val..this.baz = () =&gt; this.val + 1.i want the api to be such that a user can instantiate const bar = new bar(), and then invoke bar.baz(), which will refer implicitly to the instance val. no problem. however, i also want a static method static baz = val =&gt; val + 1 which can be used like bar.baz(1)..in other words, if the instance method is invoked, it uses an instance variable, but there is also a static method where the user can explicitly pass in a value...class bar {.  constructor() {.    this.val = 0;.  }.  baz() {.    return bar.baz(this.val);.  }.  static baz(val) {.    return val + 1;.  }.}...e.g., the immutable.js api exhibits this. if i is an immutable map, then i can either do i.get('a'), or immutable.get(i, 'a'). so, get appears to be a class method and a static method...i have no technical problem in implementing this, and it works fine, but i was simply wondering if this is good/common practice when designing a library, or if there is some alternative pattern i'm missing."
