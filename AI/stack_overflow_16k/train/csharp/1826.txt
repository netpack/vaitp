"enforce an interface via parameter to an attribute we have a need for a custom attribute and it takes in a type..e.g...[attributeusage(attributetargets.class, allowmultiple=true)].public class mycustomattribute : attribute.{.    public type bindinginterface { get; }.    public mycustomattribute(type bindinginterface).    {.        this.bindinginterface = bindinginterface;.    }.}...what i would like to be able to do is ensure that the user has implemented the interface where the attribute is used. it is also possible that the user implemented it through hierarchy, but i need the check where the attribute is applied...for example,..public abstract class somebase : isomeinterface.{.}..[mycustomattribute(typeof(isomeinterface))].public class implementation : somebase.{.}...if however the user did not implement the interface i want a compilation error. is this possible?..[mycustomattribute(typeof(isomeinterface))].public class incorrectusageasitdoesnthavethebindinginterface.{.}...[edit].just want to point out that the reason this was closed is not legitimate. it is not the same as the question linked for multiple reasons..this is to target a class not a property. this attribute has access to the binding type and is not trying to force a primitive type. these are important differences. i am keeping it closed purely because of the commentary which did in fact answer my question. specifically lasse vågsæther karlsen's comment offers a path."
