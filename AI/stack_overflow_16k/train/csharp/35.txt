"why use sealed on a method or property whenever the current class is a subclass why shall we use sealed keyword on a method or property whenever the current class once inherited from a super class? suppose we made a class and tend to expose one or more of its methods to the object user but not letting it being inherited at all and use sealed to solve the issue. then, why not? and what's the reason behind sealing just a  current-inherited class's methods or properties?"
