how to ensure only a class can create an a.b instance? i have a broker class that issues request objects and expects them to be delivered back to it with a couple properties changed to sensible values. the problem is that the consumers of said broker must never change a couple readonly properties of that object nor be able to create a different request instance to cheat that readonly protection or the broker will break and throw an exception. i want to find a way to make the compilation fail if any class save for the broker tries to create a request object...i think sealing the instantiation of the request objects so it can only be done from inside the broker itself is a neat idea coupled with readonly properties so request processors can never cheat the system but i am having a hard time doing so. i tried a child class with a private constructor like this:..public class permissionsrequestbroker {.    public permissionsrequest test() {.        return new permissionsrequest();.    }..    private class permissionsrequest {.        private permissionsrequest() {..        }.    }.}...but it fails because the broker cannot create the request object...i tried a similar approach but with an interface like this:..public class permissionsrequestbroker {.    public ipermissionsrequest test() {.        return new permissionsrequest();.    }..    public interface ipermissionsrequest {..    }..    private class permissionsrequest : ipermissionsrequest {.        public permissionsrequest() {..        }.    }.}...but the request processors can implement ipermissionsrequest and cheat the system that way. sure i could implement a runtime check so the object returned is still the broker's permissionrequest object but that's still a runtime check and will throw an exception...i'm all for exceptions but i feel there must be some way to enforce that contract at compile time without installing any ide extension or nuget package of any kind.
