"why is my dynamically valued dictionary iteration ( in parallel ) throwing away my locally scoped variables? follow up from:..how do i iterate through a dynamically valued dictionary in parallel?..if i run a function using a locally scoped variable, my program eventually just throws away the value - which has left me utterly confused. ..why is this happening?..simple example:..using system;.using system.collections.generic;.using system.linq;.using system.text;.using system.threading.tasks;.using system.data;..namespace consoleapplication.{.    class program.    {.        static void main(string[] args).        {.            dictionary&lt;string, object&gt; dict = new dictionary&lt;string, object&gt;() {.                { ""1"",  new dictionary&lt;string, object&gt;() { .                    {""columns"",new object[1]{ ""name""} }.                }},.                 { ""2"",  new dictionary&lt;string, object&gt;() { .                    {""columns"",new object[1]{ ""name""} }.                }}..            };.            int i = 0;.            foreach (keyvaluepair&lt;string, object&gt; record in dict).            {..                var _recordstored = record; //this is(was) supposed to fix my woes!!!.                new system.threading.timer(_ =&gt; {.                    i++;.                    //if i comment the next line, the code ""works"" ( albeit doing nothing really"" ).                    processfile((dictionary&lt;string, object&gt;)_recordstored.value, new list&lt;object&gt;{});.                    console.writeline(""val: "" + _recordstored.key + "" threadid: "" + system.threading.thread.currentthread.managedthreadid+ "" ""+ i);.                }, null, timespan.zero, new timespan(0, 0,0,0,1));.            }..            for (; ; ).            {.                system.threading.thread.sleep(10000);.            }.        }..        public static void processfile(dictionary&lt;string, dynamic&gt; record, list&lt;object&gt; filedata).        {..            datatable dt = new datatable(""table"");.            foreach (string column in record[""columns""]).            {.                dt.columns.add(column, typeof(string));.            }.        }.    }.}...which has the output:..val: 1 threadid: 12.val: 2 threadid: 11.val: 1 threadid: 11.val: 2 threadid: 12.val: 2 threadid: 12.val: 1 threadid: 11.val: 2 threadid: 12...but will eventually ( after ~880) iterations just start printing ..val: 2 threadid: 10.val: 2 threadid: 12.val: 2 threadid: 10.val: 2 threadid: 12.val: 2 threadid: 10.val: 2 threadid: 12...the wierdest thing about all this is, that when i remove the call to processfile the code will always execute perfectly."
