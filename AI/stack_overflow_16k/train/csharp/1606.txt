"string compression in blank language i have a c program which does the string compression successfully in c language and it's a brute force approach there in c language.for example if input is aabccccdddddddddddaa then output should be a2b1c3d11a2...i solved this in c language by taking each character and counting number of its occurrences and then printing that character and it's count...i am trying to convert this to blank language. i am wondering it should be easy to do in the blank language because of so many string and char built in methods...is there a way we can do this in blank by using lambda expressions or built in methods of string or char type in very few lines?..my c code is :..        char *encode(char *src).    {     .          int recurringlen;.          char count[max_rlen];.          char *dest;.          int i, j = 0, k;.          int len = strlen(src);..         // _itoa_s(34,c,10);.          /* if all characters in the source string are different, .            then size of destination string would be twice of input string..            for example if the src is ""abcd"", then dest would be ""a1b1c1d1"".            for other inputs, size would be less than twice. .            test for the scenarios where abababababababababababa bcos output here is a16b11..            aabbbcccd.            */.           dest = (char *)malloc(sizeof(char)*(len*2 + 1));...          /* traverse the input string one by one */.          for(i = 0; i &lt; len; i++).          {..            /* copy the first occurrence of the new character */.            dest[j++] = src[i];..            /* count the number of occurrences of the new character */.            recurringlen = 1;     .            while(i + 1 &lt; len &amp;&amp; src[i] == src[i+1]).            {.              recurringlen++;.              i++;.            }   ..            /* store rlen in a character array count[] */.            sprintf_s(count, ""%d"", recurringlen);..            /* copy the count[] to destination */.            for(k = 0; *(count+k); k++, j++).            { .              dest[j] = count[k]; .            } .          }  ..          /*terminate the destination string */.          dest[j] = '0';.          return dest;.    }"
