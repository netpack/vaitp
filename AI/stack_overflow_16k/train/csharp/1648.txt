"using reflection in .net 3.0 i have an class ..public class usertype.{.    public string firstname;.    public string lastname;.    public string emailaddress;.    public vehicletype vehicle;.    public addresstype address;.    public jobtype job;.}..public class vehicletype.{.    public string make;.    public string model;.}..public class addresstype.{.    public string housenumber;.    public string streetname;.    public string town;.    public string postcode;.}..public class jobtype.{.    public string description;.    public int salary;.    public managertype manager;.    public departmenttype department;.}..public class managertype.{.    public string name;.    public managertype manager;.}..public class departmenttype.{.    public string name;.    public buildingtype building;.}..public class buildingtype.{.    public string name;.    public addresstype address;.}...i need to write a recursion program which has to populate these classes from the xml using reflection...the input is the xml which would get the value and update it to t class. if it is a simple type then it works but for complext type the object is lost..i have highlighted where the issue is. this code has to work in blank3.5..private static object getobject(string typename, string propertyname, xmlnode inputs, assembly assembly ).{.    var type = assembly.getexportedtypes().firstordefault(t =&gt; t.name == typename);.    if (type == null).        throw new argumentexception(string.format(""type {0} is not found."", typename));..    var obj = activator.createinstance(type);.    var doc = xdocument.parse(inputs.outerxml);.    string childnode = """";.    foreach (var prop in type.getproperties(bindingflags.instance | bindingflags.public | bindingflags.declaredonly | bindingflags.setproperty)).    {.        if (!prop.name.equals(""extensiondata"")).        {.            //prop.setvalue(obj,.            //              prop.propertytype.isprimitive().            //                  ? inputs[propertyname].childnodes[0].value.            //                  : getobject(prop.propertytype.name, prop.propertytype.name, inputs, assembly), null);..            if (prop.propertytype.isprimitive()).            {.                var childnodesproplst = doc.descendants(propertyname);.                foreach (xelement childnodeprop in childnodesproplst).                {.                    xelement childelement = childnodeprop.element(prop.name);.                    if (childelement != null).                    {.                        childnode = childelement.value;.                        prop.setvalue(obj, childnode, null);.                        break;.                    }.                }.            }.            else.            {.                **getobject(prop.propertytype.name, prop.name, inputs, assembly);**.            }.            //prop.setvalue(obj, childnode, null);.        }.    }..    return obj;            .}...my current program supports blank3.0...&lt;inputs&gt; &lt;user&gt; &lt;firstname&gt;string&lt;/firstname&gt; &lt;lastname&gt;string&lt;/lastname&gt; &lt;emailaddress&gt;string&lt;/emailaddress&gt; &lt;vehicle&gt; &lt;make&gt;string&lt;/make&gt; &lt;model&gt;string&lt;/model&gt; &lt;/vehicle&gt; &lt;address&gt; &lt;housenumber&gt;string&lt;/housenumber&gt; &lt;streetname&gt;string&lt;/streetname&gt; &lt;town&gt;string&lt;/town&gt; &lt;postcode&gt;string&lt;/postcode&gt; &lt;/address&gt;&lt;job&gt; &lt;description&gt;string&lt;/description&gt; &lt;salary&gt;32&lt;/salary&gt; &lt;manager&gt; &lt;name&gt;string&lt;/name&gt; &lt;manager&gt;&lt;/manager&gt; &lt;/manager&gt; &lt;department&gt; &lt;name&gt;string&lt;/name&gt; &lt;building&gt; &lt;name&gt;string&lt;/name&gt; &lt;address&gt; &lt;housenumber&gt;string&lt;/housenumber&gt; &lt;streetname&gt;string&lt;/streetname&gt; &lt;town&gt;string&lt;/town&gt; &lt;postcode&gt;string&lt;/postcode&gt; &lt;/address&gt; &lt;/building&gt; &lt;/department&gt; &lt;/job&gt; &lt;/user&gt;&lt;/inputs&gt;"
