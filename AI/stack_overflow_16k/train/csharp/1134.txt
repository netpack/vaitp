"breadth first search (bfs) - print each path in a line and read graph from text file i have the bfs which prints all paths from a defined node as a sequence (in one line). i want to print each path in a line. for example:if i have a directed graph like..a b.a f.b c.b d...i want to have the path from node a like..bc.bd.f...my current script out put is bcdf, which put the all paths together as a sequence...also, how i can change it to read a graph from a text file. since i do not want to copy all graph's edges in the scipt..my bfs script..using system;.using system.collections.generic;.using system.linq;.using system.text;..namespace bfs.{.    class graph.    {.        private int _v;                                     //it shows the number of nodes.        private bool _directed;                             //if _directed is true, it means that the graph is a directed one.        linkedlist&lt;int&gt;[] _adj;..        public graph(int v, bool directed).        {.            _adj = new linkedlist&lt;int&gt;[v];..            for (int i = 0; i &lt; _adj.length; i++).            {.                _adj[i] = new linkedlist&lt;int&gt;();.            }..            _v = v;.            _directed = directed;.        }..        public void addedge(int v, int w).        {.            _adj[v].addlast(w);..            if (!_directed).            {.                _adj[w].addlast(v);.            }.        }..        public void breadthfirstsearch(int s)               //s is the checked node.        {.            bool[] visited = new bool[_v];.            for (int i = 0; i &lt; _v; i++).                visited[i] = false;..            // create a queue for bfs.            linkedlist&lt;int&gt; queue = new linkedlist&lt;int&gt;();..            visited[s] = true;                             //if a node is visited we swith its value to true.            queue.addlast(s);..            while (queue.any()).            {.                // dequeue a vertex from queue and print it.                s = queue.first();.                console.write(s + "" "");.                queue.removefirst();..                linkedlist&lt;int&gt; list = _adj[s];..                foreach (var val in list).                {.                    if (!visited[val]).                    {.                        visited[val] = true;.                        queue.addlast(val);.                    }.                }.            }.        }..    }..    class program.    {.        static void main(string[] args).        {.            graph g = new graph(1400, true); //the number should be the same or more than the number of nodes.            g.addedge(1, 2);.            g.addedge(2, 4);.            g.addedge(2, 5);.            g.addedge(2, 3);.            console.write(""breadth first traversal from vertex 2:n"");.            g.breadthfirstsearch(2); //the number here shows the starting node  .            console.read();..        }.    }.}"
