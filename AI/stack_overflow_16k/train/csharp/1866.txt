"where should i put the associated methods of a list<t> of datarows? preface: read this question. let's say that i have all my stuff in a data structure described by skeet. now i want to write some methods dealing with this kind of data. this is what i have come up with: ideally this kind of data should be in its own class. so i have decided to wrap the list of datapoints...public class meteodatapoint.{.    private readonly datetime timestamp;.    public datetime timestamp { get { return timestamp; } }..    private readonly double temperature;.    public double temperature { get { return temperature; } }..    private readonly double airpressure;.    public double airpressure { get { return airpressure; } }..    public meteodatapoint(datetime timestamp,.                          double temperature,.                          double airpressure).    {.        this.timestamp = timestamp;.        this.temperature = temperature;.        this.airpressure = airpressure;.    }.}..public class meteodatapointlist.{.    private list&lt;meteodatapoint&gt; list;.    public meteodatapointlist() { list = new list&lt;meteodatapoint&gt;(); } ..    // expose some of list's functionality.    public void add(meteodatapoint p) { list.add(p); }.    public bool remove(meteodatapoint p) { return list.remove(p); }.    public void removeat(int i) { list.removeat(i); }.    public int count { get { return list.count; } }.    public meteodatapoint this [int i]  {  get { return list[i];  } }..    // and now i can wrtie my custom methods specific to my data.    public double averagetemperature().    {.        double sum=0;.        foreach (meteodatapoint m in list) { sum += m.temperature;  }.        return sum / list.count;..    }.}...what do you think? how can i improve on this? is there a better way (maybe subclassing list or just a class with static methods for manipulating a list of meteodatapoint)? should i care about a destructor?..note: sorry if the question is too trivial, i have been doodling around with csharp, but this will be the first time i have to create something useful, and as the language provides so many ways to accomplish the same task i often find myself at crossroads wondering which way is the best."
