"inconsistent accessibility less accessible i've searched for answers on similar errors, but haven't been able to find any. also i know how to fix the error (make all public - which i don't really want to do), but i don't really understand why this is not allowed. .anyway - i'm getting...  inconsistent accessibility: property type.  'e7xlibrary.base.multisegmentbase' is less accessible than property.  'e7xlibrary.e7xgroupbase.groupsegment'...my multisegmentbase class is declared as an internal class (and so is the segmentbase class):..internal class multisegmentbase : segmentbase...i’m using a multisegmentbase instance as a protected abstract property in my public e7xgroupbase class:..public abstract class e7xgroupbase.{.    internal abstract uint64 length { get; }.    protected abstract multisegmentbase groupsegment { get; }..    internal virtual void wrap(binarywriter writer).    {.        groupsegment.length = this.length;.        groupsegment.wrap(writer);.    }.}...and lastly i have a devided public class e7xsessiongroup class that implements the abstract e7xgroupbase, like this..public class e7xsessiongroup : e7xgroupbase.{.    #region properties.    private sessiongroupsegment _groupsegment = null;.    protected override multisegmentbase groupsegment.    {.        get.        {.            if (_groupsegment == null).                _groupsegment = new sessiongroupsegment();.            return _groupsegment;.        }.    }...as i said, i know that if i just declare multisegmentbase as a public class instead of internal, i wouldn’t have this error, but since i’m making an api i don’t want to expose multisegmentbase and then further all the classes that derive from from multisegmentbase...basically, my quistion is why does multisegmentbase needs to be as accessible as e7xgroupbase and e7xsessiongroup, when i only use multisegmentbase in a protected property? and do any of you have a good workaround?"
