"slidingexpiration and memorycache looking at the documentation for memorycache i expected that if an object was accessed within the expiration period the period would be refreshed. to be honest i think i inferred from the name 'sliding' as much as anything.  ..however, it appears from this test ..   [test].    public void slidingexpirynotrefreshedontouch().    {.        var memorycache = new memorycache(""donkey"").        {.            {.                ""1"",.                ""jane"",.                new cacheitempolicy {slidingexpiration = timespan.fromseconds(1) }.            }.        };.        var enumerable = enumerable.repeat(""1"", 100).            .takewhile((id, index) =&gt;.            {.                thread.sleep(100);.                return memorycache.get(id) != null; // i.e. it still exists.            }).            .select((id, index) =&gt; (index+2)*100.0/1000); // return the elapsed time.        var expires = enumerable.last(); // gets the last existing entry .        expires.should().begreaterthan(1.0);.    }...it fails and exhibits the behavior that the object is ejected once the timespan is complete whether or not the object has been accessed. the linq query is executed at the enumerable.last(); statement, at which point it will only take while the cache has not expired. as soon as it stops the last item in the list will indicate how long the item lived in the cache for. ..for clarity this question is about the behaviour of memorycache. not the linq query...is this anyone else's expectation (i.e. that the expiration does not slide with each touch)? .is there a mode that extends the lifetime of objects that are 'touched'? ..update i found even if i wrote a wrapper around the cache and re-added the object back to the cache every time i retrieved it, with another slidingexpiration its still only honored the initial setting. to get it to work the way i desired i had to physically remove it from the cache before re-adding it! this could cause undesirable race conditions in a multi-threaded environment."
