"method signature pass parameter as ienumerable<t> or as list<t> the language i use is blank...as i have read, it is better if a method of an object returns an enumerable type like a list, to state it its signature as bellow:..private ienumerable&lt;int&gt; listofnumbers().{.   // here goes the code of the method.}...rather than..private list&lt;int&gt; listofnumbers().{.  //  here goes the code of the method.}...let now that we want to pass as a parameter a list of objects of type a...when we write..private ienumerable&lt;int&gt; listofnumbers(list&lt;a&gt; list).{.  // here goes the code of the method.}...it is easier to access the elements of the list and do any calculations with them rather than writing..private ienumerable&lt;int&gt; listofnumbers(ienumerable&lt;a&gt; list).{.    // here goes the code of the method..}...in the second case, in order to access the elements of the list, that implements the interface ienumerable, we should convert the list to a list, inside the code of the method. ..i am bit confused about the best way to pass as a parameter a type tha implements the ienumerable interface. what's the best approach between the above two? is there any better way?..thanks in advance for any help."
