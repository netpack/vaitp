"blank avoiding duplicated logic suppose i had a base class a, with subclasses b, c and d. i have a class, myclass which contains an overload for each of them. i want a counter to increment any time one of these methods is invoked from anywhere other than inside myclass. this can be accomplished with a few simple helper methods:..public class myclass.{.   int counter;..   public dosomethingexternal(b b) {counter++; dosomething(b);}.   public dosomethingexternal(c c) {counter++; dosomething(c);}.   public dosomethingexternal(d d) {counter++; dosomething(d);}..   private dosomething(b b) {...}.   private dosomething(c c) {...}.   private dosomething(d d) {...}.}...this really bothers the dev in me. is there no way better way we can write those helper methods so that we don't have duplicated logic for every subclass? the solution i envision is something like:..// magically, we know which type we are and call the correct dosomething.public dosomethingexternal(a a) {counter++; dosomething(a);} ...i think this kind of generalization could be accomplished with reflection, but i have heard that reflection is generally slow and can be complicated to understand. i am curious if there is a more conventional pattern i am overlooking that solves this logic-duplication issue."
