"do we get any benefit from adding null check if we are already using catch all exception handler? this is specific to .net.i am writing a code piece where i have to use catch all exception handler. i call a series of function which may return null. i do not want to continue if any of them return null as i have an alternate but costly method to get the same result. i want to know if i should be using the series of null checks or not..my code looks something like:..    var some_info = null;.    try{.        var a = geta();.        if(a != null){.            var b = a.getb();.            if(b != null){.                var c = getc(b);.                if(c != null){.                    some_info = c.getsomeinfo();.                }.            }.        }.        catch(exception e){.            // cant do anything here but i need above code to be silent.        }.    if(some_info == null).        some_info = getsomeinfofromheavymethod();...in blank if we try to use null reference it throws an exception so if any of the variables above will be null a nullreferenceexception will be thrown. therefore we can write the above code like..    var some_info = null;.    try{.            var a = geta();.            var b = a.getb();.            var c = getc(b);.            some_info = c.getsomeinfo();.        }.        catch(exception e){.            // cant do anything here but i need above code to be silent.        }.    if(some_info == null).        some_info = getsomeinfofromheavymethod();...my question is, should i use null checks here or let exception handler work here? my gut feeling says i should use the null check as it is good practice but, i have a doubt as i have to use catch all exception handler here and i already have to bear cost of try/catch block."
