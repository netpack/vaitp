"starting psexec process fails in windows form so i have created a form to allow our marketing team to restart a computer that displays a slideshow/important information for visitors etc ..the plan is to deploy this to other user comptuers and then they can do one of the three following tasks:.restart now.timed/scheduled restart.cancel timed/scheduled restart..the application works fine on my computer just fine in debug and in build..when installing on other people's computers it seems as if it is launching psexec but then not doing anything...i added some catch exceptions in at which point it shows me the following error:...  standardout has not been redirected...however when researching into this i seem to already have the code most people suggest to fix this issue...my code is as below:..using system;.using system.collections.generic;.using system.componentmodel;.using system.data;.using system.drawing;.using system.linq;.using system.text;.using system.threading.tasks;.using system.windows.forms;.using system.diagnostics;.using system.io;..namespace media_wall_restart_scheduler.{..public partial class frm_mediawall_startform : form.{..    public frm_mediawall_startform().    {.        initializecomponent();.        input_time.value = datetime.now;...    }.    static class programmability.    {.        /* secure credential store - this is for remote reboots */.        public static readonly string mediawallcomputername = @""\computername"";.        public static readonly string adminusername = ""computeraccount"";.        public static readonly string admindomainame = ""domainname"";.        public static readonly string adminpassword = ""computeraccountpassword"";.        public static readonly string addadminpassword = "" -p "" + adminpassword;.        public static readonly string adminuseraccount = admindomainame + @"""" + adminusername;.        public static readonly string addadminuseraccount = "" -u "" + admindomainame + @"""" + adminusername;.        public static readonly string restartnow = mediawallcomputername + addadminuseraccount + addadminpassword + "" shutdown -r -t 30"";.        public static readonly string cancelshutdown = mediawallcomputername + addadminuseraccount + addadminpassword + "" shutdown -a"";.        public static readonly string psexecpath = path.getfullpath(path.combine(appcontext.basedirectory, ""resources"", ""psexec.exe""));.        /* end secure credential store  */.    }..    private void btn_restart_now_click(object sender, eventargs e).    {.        /* quick and simple restart now command */.        process restart_now = new process();.        restart_now.startinfo.useshellexecute = false;.        restart_now.startinfo.redirectstandardoutput = true;.        restart_now.startinfo.redirectstandarderror = true;.        restart_now.startinfo.redirectstandardinput = true;.        restart_now.startinfo.filename = programmability.psexecpath;.        var restartnow_args = new list&lt;string&gt; { programmability.mediawallcomputername, programmability.addadminuseraccount, programmability.addadminpassword, ""shutdown -s -t 30"" };.        restart_now.startinfo.arguments = string.join("" "", restartnow_args);.        {.            restart_now.start();.            string output = restart_now.standardoutput.readtoend();.            string errormessage = restart_now.standarderror.readtoend();.            restart_now.waitforexit();..        }....    }..    public void btn_scheduled_restart_click(object sender, eventargs e).    {.        /* gets the current time */.        datetime timenow = datetime.now;.        datetime restarttime = input_time.value;.        /* takes the scheduled time and subtracts from now time above */.        var scheduledrestarttime = math.ceiling((restarttime - timenow).totalseconds);.        /* run the command to restart the media wall at the specifed time */.        process timed_restart = new process();.        timed_restart.startinfo.useshellexecute = false;.        timed_restart.startinfo.redirectstandardoutput = true;.        timed_restart.startinfo.redirectstandarderror = true;.        timed_restart.startinfo.redirectstandardinput = true;.        timed_restart.startinfo.filename = programmability.psexecpath;.        var timedrestart_args = new list&lt;string&gt; { programmability.mediawallcomputername, programmability.addadminuseraccount, programmability.addadminpassword, ""shutdown -r"", $""-t {scheduledrestarttime}"" };.        timed_restart.startinfo.arguments = string.join("" "", timedrestart_args);.        {.            timed_restart.start();.            string output = timed_restart.standardoutput.readtoend();.            string errormessage = timed_restart.standarderror.readtoend();.            timed_restart.waitforexit();.        }...    }....    private void btn_stop_restart_click(object sender, eventargs e).    {.        process stop_restart = new process();.        stop_restart.startinfo.useshellexecute = false;.        stop_restart.startinfo.redirectstandardoutput = true;.        stop_restart.startinfo.redirectstandarderror = true;.        stop_restart.startinfo.redirectstandardinput = true;.        stop_restart.startinfo.filename = programmability.psexecpath;.        var cancel_args = new list&lt;string&gt; { programmability.mediawallcomputername, programmability.addadminuseraccount, programmability.addadminpassword, ""shutdown -a"" };.        stop_restart.startinfo.arguments = string.join("" "", cancel_args);.        {.            stop_restart.start();.            string output = stop_restart.standardoutput.readtoend();.            string errormessage = stop_restart.standarderror.readtoend();.            stop_restart.waitforexit();.        }...    }.....      }.}...i added the following changes when trying to catch the error but this has not helped me get any further. i will add just one of the controls for show here but it has been applied to each button ..private void btn_stop_restart_click(object sender, eventargs e).    {.        try.        {.            process stop_restart = new process();.            stop_restart.startinfo.useshellexecute = false;.            stop_restart.startinfo.redirectstandardoutput = true;.            stop_restart.startinfo.redirectstandarderror = true;.            stop_restart.startinfo.redirectstandardinput = true;.            stop_restart.startinfo.filename = programmability.psexecpath;.            var cancel_args = new list&lt;string&gt; { programmability.mediawallcomputername, programmability.addadminuseraccount, programmability.addadminpassword, ""shutdown -a"" };.            stop_restart.startinfo.arguments = string.join("" "", cancel_args);.            using (var stopreader = stop_restart.standardoutput).            {.                stop_restart.beginoutputreadline();.                stop_restart.start();.                string output = stop_restart.standardoutput.readtoend();.                string errormessage = stop_restart.standarderror.readtoend();.                stop_restart.waitforexit();.                var stopconsoleout = stopreader.readtoend();.                messagebox.show(stopconsoleout, ""success"", messageboxbuttons.ok);.            }.        }.        catch (exception).        {.            messagebox.show($""running psexec failed as {programmability.psexecpath}"", ""error"", messageboxbuttons.ok);.            throw;.        }.    }"
