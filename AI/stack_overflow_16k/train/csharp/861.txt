"how can i dispose of an arbitrary dependency when a stream is disposed? i'm creating a .net api and one of my methods returns a stream. i need to ensure that some other class is disposed when the caller disposes the stream that i return...the only way i can think to do this is to create a wrapper class that inherits from stream and tacks on the functionality i need, delegating everything else to the underlying stream...i don't like having to decorate a framework class simply because it may get new members in future .net releases that i would need to update my api to support...is there a better way to do this?..example..here is a concrete example for your pondering...keep in mind that one of the requirements of this class is that it cannot require disposal, referring to the contentsource class in the example...public class contentsource.{.    public stream openread().    {.        var entry = getentry();..        // todo: ensure that when the stream we return is disposed, we also dispose of `entry.archive`..        return entry.open();.    }..    private ziparchiveentry getentry().    {.        ziparchive archive = null;.        try.        {.            archive = new ziparchive(_zipcontent.openread(), ziparchivemode.read, false);.            var entry = archive.getentry(_entryname);.            if (entry == null).            {.                throw new invalidoperationexception(""specified entry was not found in the zip archive. "" + _entryname);.            }..            return entry;.        }.        finally.        {.            if (archive != null).            {.                archive.dispose();.            }.        }.    }.}...stream wrapper example..this is the solution i can think of that i'm not happy with...public sealed class dependencydisposingstreamwrapper : stream.{..    private readonly stream _stream;.    private readonly idisposable _dependency;.    private bool _disposed;..    public dependencydisposingstreamwrapper(stream stream, idisposable dependency).    {.        _stream = stream;.        _dependency = dependency;.    }..    # region - overrides of all stream members, delegating to underlying stream -..    // .....    #endregion..    protected override void dispose(bool disposing).    {.        if (!_disposed).        {.            if (disposing).            {.                _dependency.dispose();.            }..            base.dispose(disposing);..            _disposed = true;.        }.    }..}"
