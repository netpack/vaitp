"is this method returning a system.object class an anti-pattern? i work an an automation team designing tests for electronic components. one thing our framework sorely needs is a single source point for our driver objects for the various pieces of test equipment at a workbench (right now, driver object creation is very wild-west). ..basically, the idea would be there would be one object, constructed based on a configuration file(s), which is the single place all other test code looks to to get the driver objects, based on a name string. i'll call it a ""driversource"" here...the problem is, these drivers do not present similar interfaces at all. one might be a power supply (with methods like ""setvoltage"" and ""setcurrentlimit""), while another might be a digital multimeter (with methods like ""readvoltage"" or ""readcurrent"")...the best solution i've come up with is to have a method with the following declaration:..public object getdriver(string name);...then, the test code using my ""driversource"" object would call that method, and then cast the system.object to the correct driver type (or more accurately, the correct driver interface, like ipowersupply). ..i think casting like that is acceptable because whatever test code is about to use this driver had better know what the interface is. but i was hoping to get some input on whether or not this is an anti-pattern waiting to bite me. any better pattern for solving this issue would also be greatly appreciated...a final note: i think this is obvious, but performance is essentially a non-issue for this problem. fetching the drivers is something will happen less than 100 times in a test run that can last hours."
