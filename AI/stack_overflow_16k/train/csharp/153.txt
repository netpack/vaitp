"""deep"" convert an object i have the following method that i can use to convert an object to a given type:..public static ttarget convert&lt;ttarget&gt;(object source) where ttarget : new().{.    var target = new ttarget();..    type targettype = typeof (ttarget);.    foreach (propertyinfo sourceproperty in source.gettype().getproperties()).    {.        if (!sourceproperty.canread || (sourceproperty.getindexparameters().length &gt; 0)).            continue;..        propertyinfo targetproperty = targettype.getproperty(sourceproperty.name);..        if ((targetproperty != null) &amp;&amp; (targetproperty.canwrite)).            targetproperty.setvalue(target, sourceproperty.getvalue(source, null), null);.    }.    return target;.}...it works fine for simple classes with properties being value types and so on, but complex properties, that need to be mapped to another class, it's not quite clear how to go about it. if i store the mappings into a static property:..private static dictionary&lt;type, type&gt; mappings;..static typeconverter().{.    mappings = new dictionary&lt;type, type&gt;.        {.            {typeof (dbspace), typeof (dmsspace)},.            {typeof (dbdirectory), typeof (dmsdirectory)},.            {typeof (dbfile), typeof (dmsfile)}.        };.}...i don't seem to find a way to find a way to utilize this information for converting complex properties..how do i go about using the above mappings to convert complex properties?..the crux of the problem is:  how can i call new if i only have a type object?"
