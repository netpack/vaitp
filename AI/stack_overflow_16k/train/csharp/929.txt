"project euler #3 stuck i really didn't want it to come to this, the point of course of pe is that i should try to solve the problems myself. ..the first two i managed in less than an hour, unfortunately i am completely stuck on problem 3.  now i have tried the traditional method of division by trial, of course this is too slow, i've tried to optimize the division by trial by dividing by sqrt(n) but it is still way too slow to get the highest prime factor of 600,851,475,143. ..now i've even tried to use the sieve of eratosthenes for this, which i have to admit i barely understand, but it's still not cutting it, first of all the amount of ""marked"" numbers causes an exception to be thrown because the amount of entries becomes gigantic when you try to generate all primes up to 600,851,475,143. ..i'm stuck and quite frankly i'm in a place wher ei'm starting to get annoyed with this right now.. ..here's my code:..class program.    {.        // the prime factors of 13195 are 5, 7, 13 and 29..        // what is the largest prime factor of the number 600851475143 ?.        static void main(string[] args).        {..            console.writeline(gethighestprimefactor(600851475143).tostring());.            console.readkey();.        }..        static list&lt;long&gt; generateprimenumbers(long n).        {.            // let's use the sieve of eratosthenes for this.            var markednumbers = new list&lt;long&gt;();.            var primes = new list&lt;long&gt;();..            for (long i = n / 2; i &lt; n; i++).            {.                // if this is false then this is a prime number, add it to the list of primes.                if (!markednumbers.contains(i)) .                {.                    primes.add(i);..                    for (long j = i; j &lt;= n; j+= i).                    {.                        markednumbers.add(j);.                    }.                }.            }..            return primes;.        }..        static long gethighestprimefactor(long n).        {.            var primes = generateprimenumbers(n);..            // loop backwards and return when we hit the first prime number.            for (long i = n / 2; i &gt; 1; i--).            {.                if (n % i == 0).                {.                    if (primes.contains(i)).                    {.                        return i;.                    }.                }.            }..            //code should not reach this point of execution.            return -1;.        }"
