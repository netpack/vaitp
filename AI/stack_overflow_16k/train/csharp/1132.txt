"convenient way for conditional logging logging is taking resources. especially to create log messages..to save runtime resources i do this:..if (logfile!=null) log(logfile, ""some message ""+somemethod());...it eliminates calling somemethod when logging is not required...is there more convenient way to code it? like..logger.logger?.log(""some message ""+somemethod());...logger is static class and logger is delegate... unfortunately it doesn't work in my vs2012...update: main purpose of this question is how to simplify code look and feel and reduce runtime spending. in my original approach method somemethod() is not called if logging is not necessary, but code stays the same. checking for null is only suggested approach to avoid calling extra methods...update2: some example:..    public class example {      .        public class logger .            {.                public static void log(string message).                {.                    console.writeline(message);.                }.            }..            public static logger logger;..            public static void test().            {.                // has compilation error ""invalid expression term '.'.                logger?.log(""this ""+""should ""+""be ""+""not invoked""); .                logger = new logger();.                logger?.log(""this should ""+""be logged"");.            }.}"
