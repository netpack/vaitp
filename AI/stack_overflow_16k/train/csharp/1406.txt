"how to avoid using a number or enum when implementing business logic i'm working on implementing come business logic in my blank application..i'm having trouble fitting the logic into a sane piece of code..the logic to implement goes like this:..there is a tree of elements, let's say: project, country, region, city. a single project contains countries. countries contains regions, region contains cities and cities contain data entries. we'll be populating the elements with data entries based on what information is available....if country, region, and city information is available, push the data to the project and use the info to know where to insert the data entries..if country info is not available, create a new country and use region and city info to insert the data entries..if only city info is available, create a new region inside a new country and use city info to put data there..if no info is available, create a new city inside a new region inside a new country and put the data there..if any info is not available out of order (for example country and region are available but not city) we have to fall back to the more general case (creating new country, region and city in this case). ...additionally:...when you create a leaf class, you have to provide the parent in the constructor..querying about what info is available is expensive..i would like to avoid repeating the code that creates new classes..i cannot change the implementation of classes country, region, city....my solution below works, but it's ugly and using an integer to control app flow gives me shivers...how can i improve the code snippet below?..country country = null;.region region = null;.city city = null;..int level;..if (!iscityinfoavailable()).{.    // we have to make a new country, region and city.    level = 3;.}.else if (!isregioninfoavailable()).{.    // we have to make a new country and region.    level = 2;.}.else if (!iscountryregionavailable()).{.    // we have to make a new country.    level = 1;.}.else.{.    // we have all the info we need.    level = 0;.}..idataentrytarget target;..if (level &gt; 0).{.    country = new country(project, ""unnamed country"");.    target = country;.}.if (level &gt; 1).{.    region = new region(country, ""unnamed region"", region.defaultregionsettings);.    target = region;.}.if (level &gt; 2).{.    city = new city(region, ""unnamed city"", 0);.    target = city;.}..// ... proceed with data entry code using `target`..."
