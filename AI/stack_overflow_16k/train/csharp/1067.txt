"i get the error: unable to read memory blank my currentfloor is -1. when i push the button to start on -1 i get the error ""unable to read memory"". can anybody help me?..when i push the other buttons it works perfect...    public class lift.    {..        public event liftactiehandler stoppendevent;.        public event liftactiehandler verdiepingbereiktevent;.        public event liftactiehandler startingevent;.        public delegate void liftactiehandler(liftactieeventargs e);..        private int hoogsteverdieping;  //houdt de hoogste verdieping bij.        private int laagsteverdieping;  //houdt de laagste verdieping bij.        public int huidigeverdieping = -1;.        private int? volgendeverdieping;.        public liftdirection richting { get; set; }.        public liftstatus status { get; set; } = liftstatus.stopped;.        private list&lt;request&gt; requests = new list&lt;request&gt;();.        private timer beweging = new timer(4000); // 4 seconden tussen 2 //verdiepen....        public lift(int hoogsteverdieping, int laagsteverdieping).        {.            this.hoogsteverdieping = hoogsteverdieping;.            this.laagsteverdieping = laagsteverdieping;..            beweging.elapsed += verdiepingbereikt;...        }...        //public void doetest().        //{.        //    // test.        //    requests.add(new request(2));.        //    requests.add(new request(1));.        //    requests.add(new request(0));.        //    startlift();.        //}....        /// &lt;summary&gt;.        /// voorbeeldfunctie waarmee aan het liftsysteem kenbaar wordt gemaakt ///dat er een.        /// nieuw doel moet toegevoegd worden aan de wachtrij. wordt aangeroepen ///door de binnenbediening..        /// &lt;/summary&gt;.        /// &lt;param name=""doelverdieping""&gt;&lt;/param&gt;.        public void verdiepingaanvragen(int doelverdieping).        {.            requests.add(new request(doelverdieping));.            startlift();.        }..        /// &lt;summary&gt;.        /// voorbeeldfunctie waarmee aan het liftsysteem kenbaar wordt gemaakt ///dat er bepaalde richting.        /// wordt aangevraagd op een verdieping. wordt aangeroepen door de ///buitenbediening..        /// &lt;/summary&gt;.        /// &lt;/summary&gt;.        /// &lt;param name=""aanvragendeverdieping""&gt;&lt;/param&gt;.        /// &lt;param name=""richting""&gt;&lt;/param&gt;.        public void richtingaanvragen(int aanvragendeverdieping, liftdirection richting).        {.            requests.add(new request(aanvragendeverdieping, richting));.            startlift();.        }..        private void startlift().        {.            if (status == liftstatus.moving || requests.count == 0) { return; }..            bepaalvolgendeverdieping(richting);.            bijwerkenrichting();.            status = liftstatus.moving;.            beweging.start();.            startingevent(new liftactieeventargs(huidigeverdieping, richting));.        }..        public string geefwachtrij().        {.            string wachtrij = """";..            foreach (request aanvraag in requests).            {.                wachtrij += aanvraag.doelverdieping + "","";.            }..            if (wachtrij.length &gt; 0).            {.                // verwijder laatste komma uit text.                wachtrij = wachtrij.substring(0, wachtrij.length - 1);.            }..            return wachtrij;.        }...        private void verdiepingbereikt(object sender, elapsedeventargs e).        {.            bijwerkenverdieping();.            doevolgendeactie();.        }..        private void bijwerkenverdieping().        {.            // bijwerken verdieping.            if (richting == liftdirection.up).            {.                huidigeverdieping += 1;.            }.            else.            {.                huidigeverdieping -= 1;.            }..            verdiepingbereiktevent(new liftactieeventargs(huidigeverdieping, richting));.        }..        private void doevolgendeactie().        {.            // moet lift stoppen of doorgaan naar volgende verdiep.            // stoppen indien.            // 1) huidige verdiep gelijk is aan volgende verdiep (doel bereikt).            // 2) indien huidige verdiep ondertussen in requests..            bool stop = false;.            foreach (request aanvraag in requests).            {.                if (aanvraag.doelverdieping == huidigeverdieping).                {.                    stop = true;.                    break;.                }.            }...            if (huidigeverdieping == volgendeverdieping || stop).            {.                // bijwerken status.                status = liftstatus.stopped;.                beweging.stop();..                bijwerkenwachtrij();..                stoppendevent(new liftactieeventargs(huidigeverdieping, richting));...                // open deuren en wacht 4 seconden.                system.threading.thread.sleep(4000);.                startlift();.            }.            else.            {.                bepaalvolgendeverdieping(richting);.            }..        }..        private void bijwerkenwachtrij().        {.            for (int i = requests.count - 1; i &gt;= 0; i--).            {.                if (requests[i].doelverdieping == huidigeverdieping).                {.                    requests.removeat(i);.                }.            }.        }..        private void bepaalvolgendeverdieping(liftdirection richting).        {.            volgendeverdieping = null;..            foreach (request aanvraag in requests).            {.                if (richting == liftdirection.down).                {.                    // lift gaat naar beneden dus zoek eerst volgende verdiep //lager dan huidig verdiep.                    if (aanvraag.doelverdieping &lt; huidigeverdieping &amp;&amp; (volgendeverdieping == null || aanvraag.doelverdieping &gt; volgendeverdieping)).                    {.                        volgendeverdieping = aanvraag.doelverdieping;.                    }.                }.                else.                {.                    // lift gaat naar boven dus zoek eerst volgende verdiep //hoger dan huidig verdiep.                    if (aanvraag.doelverdieping &gt; huidigeverdieping &amp;&amp; (volgendeverdieping == null || aanvraag.doelverdieping &lt; volgendeverdieping)).                    {.                        volgendeverdieping = aanvraag.doelverdieping;.                    }.                }...            }..            if (requests.count &gt; 0 &amp;&amp; !volgendeverdieping.hasvalue).            {.                if (richting == liftdirection.down).                {.                    bepaalvolgendeverdieping(liftdirection.up);.                }.                else.                {.                    bepaalvolgendeverdieping(liftdirection.down);.                }..            }..        }..        private void bijwerkenrichting().        {.            // bijwerken richting.            if (huidigeverdieping &lt; volgendeverdieping).            {.                richting = liftdirection.up;.            }..            if (huidigeverdieping &gt; volgendeverdieping).            {.                richting = liftdirection.down;.            }...            // opgooien event.            startingevent(new liftactieeventargs(richting, status));.        }..    }..    public class request.    {.        public request(int doelverdieping, liftdirection richting).        {.            doelverdieping = doelverdieping;.            richting = richting;.        }..        public request(int doelverdieping).        {.            doelverdieping = doelverdieping;.        }..        public int doelverdieping { get; set; }.        public liftdirection richting { get; set; }.    }..}.     public class liftactieeventargs : eventargs.    {.        public int verdieping { get; }.        public liftdirection richting { get; }.        public liftstatus status { get; }..        // constructor.       public liftactieeventargs(int verdieping, liftdirection richting).        {.            richting = richting;.            verdieping = verdieping;.        }..        public liftactieeventargs(liftdirection richting, liftstatus status).        {.            richting = richting;.            status = status;.        }.    }.     public enum liftdirection.    { .        up = 0,.        down = 1.    }..    public enum liftstatus.    {.        moving = 0,.        stopped = 1.    }.    public partial class mainwindow : window.    {.        private lift lift;...        public mainwindow().        {.            initializecomponent();..            //lift initializeren met max en min verdieping.            lift = new lift(2, -1);.            lift.stoppendevent += new lift.liftactiehandler(onliftstopped);.            lift.verdiepingbereiktevent += new lift.liftactiehandler(onverdiepingbereikt);.            lift.startingevent += new lift.liftactiehandler(onliftstarting);...            // huidige verdiep zetten.            zetverdieping(lift.huidigeverdieping);..            //lift.doetest();.        }..        private void btnbuitenbediening_click(object sender, routedeventargs e).        {.            string[] parameters = ((button)e.originalsource).commandparameter.tostring().split('#');.            int verdieping = int.parse(parameters[0]);.            liftdirection direction = parameters[1] == ""up"" ? liftdirection.up : liftdirection.down;..            // opvullen queue.            lift.richtingaanvragen(verdieping, direction);...            // tonen wachtrij.            lblwachtrij.content = lift.geefwachtrij();.        }..        private void btnbinnenbediening_click(object sender, routedeventargs e).        {.            int gevraagdeverdieping = int.parse(((button)e.originalsource).content.tostring());..            // opvullen wachtrij.            lift.verdiepingaanvragen(gevraagdeverdieping);...            // tonen wachtrij.            lblwachtrij.content = lift.geefwachtrij();.        }...        private void onliftstopped(liftactieeventargs e).        {.            // status bijwerken.            bijwerkenstatus();..            // wachtrij tonen.            dispatcher.invoke(new action(() =&gt; { lblwachtrij.content = lift.geefwachtrij(); }));.        }..        private void onverdiepingbereikt(liftactieeventargs e).        {.            zetverdieping(e.verdieping);.        }..        private void zetverdieping(int verdieping).        {.            // bijwerken verdieping.            dispatcher.invoke(new action(() =&gt; { paneelverdieping.text = verdieping.tostring(); }));.        }..        private void onliftstarting(liftactieeventargs e).        {.            // richting aangeven.            dispatcher.invoke(new action(() =&gt;.            {.                if (e.richting == liftdirection.down).                {.                    paneelrichting.text = ""▼"";.                }.                else.                {.                    paneelrichting.text = ""▲"";.                };..                // wachtrij tonen.                lblwachtrij.content = lift.geefwachtrij();.            }));..            // status bijwerken.            bijwerkenstatus();..        }..        private void bijwerkenstatus().        {.            dispatcher.invoke(new action(() =&gt;.            {.                if (lift.status == liftstatus.moving).                {.                    if (lift.richting == liftdirection.down).                    {.                        lblstatus.content = ""naar beneden"";.                    }.                    else.                    {.                        lblstatus.content = ""naar boven"";.                    }.                }.                else.                {.                    lblstatus.content = ""gestopt"";.                }.            }));.        }.    }.}"
