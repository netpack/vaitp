"efficiently copying a matrix of objects to a larger matrix of objects i'm writing a quadtree-like data structure which contains matrices of generic objects t. if four subnodes all contain defined matrices of t, i'm going to aggregate them into a single, larger matrix, then delete the subnodes. is there a more efficient way to do this than looping through every reference and copying it over? can i copy chunks of memory instead?....example:..t[,] _leaf1 = new t[64,64];.t[,] _leaf2 = new t[64,64];.t[,] _leaf3 = new t[64,64];.t[,] _leaf4 = new t[64,64];..// populate leafs..t[,] _root = new t[128,128];..copyinto(ref _root, ref _leaf1, 64, 64);.copyinto(ref _root, ref _leaf2, 0, 64);.copyinto(ref _root, ref _leaf3, 0, 0);.copyinto(ref _root, ref _leaf4, 64, 0);"
