"why can't the compiler prevent these runtime cast exceptions? class program.    {.        static void main(string[] args).        {.            datetime newyears = new datetime(2013, 1, 1);.            promoteemployee(newyears);.        }..        public static void promoteemployee(object o).        {.            // at this point, the compiler doesn't know exactly what type of object o refers to. so the compiler allows the code to compile.....            employee e = (employee)o; // this results in invalid cast exception at runtime.        }.    }..    class employee.    {..    }...but i think the compiler does know or it can easily know by looking at all places where this method is being referenced as to what type is being passed to promoteemployee (at least for such cases where no runtime conditions decide what type gets passed in)..so why should casting exceptions be left to occur at runtime when the compiler with some extra logic easily pick them up ?"
