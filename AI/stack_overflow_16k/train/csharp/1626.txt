"how to create a ""pointer-like"" class, easily exposing functions of member? what i am trying to do is find the most elegant way to create a ""pointer-like"" class for a specific object/class type that i have in a project.  ..what i mean is a little confusing without an example.  take this really simple class:..public class myclass .{.    private string _name;.    public string getname() { return _name; }.    public void setname(string name) { _name = name; }.}...i want to create a second class which is like a pointer to it like this:..public class myclassptr.{.    private myclass _obj;.    public bool isvalid = false;..    public myclassptr(myclass obj) { _obj = obj; isvalid = true; }..    public void invalidateptr().    {.        isvalid = false;.        obj = null;.    }..    // some magic here?.}...the challenge:  the key is that i want to elegantly have myclassptr provide an interface to all of the public methods/members in myclass without writing wrappers and/or accessors around each method/member...i know that i could do this:..public class myclassptr.{.    public string getname() { return _obj.getname(); }.    ....}...but that's what i want to avoid.  is there some fundamental abstraction that i don't know of that i can apply to myclassptr to allow it to easily re-expose the methods/members in myclass directed through _obj?  i do not want myclassptr to inherit myclass.  should myclassptr be a type instead, and some trick with accessors to expose the methods/members of myclass?....edit: more context on why i am looking for such a design through an example.  here is the overall goal.  imagine a platform that parses through data about people and when it finds information about a person, it creates an instance of person with that information.  you could get a handle to that person like:..person person1 = platform.getperson(based_on_data);...now, imagine the platform had two instances of person that it thought were different people, but all of a sudden information came in that strongly suggested those two instances actually refer to the same person.  so, the platform wants to merge the instances together in to a new object, let's call it personx...now, floating around in the platform someone had a copy of one of those two instances that got merged, which was person1.  what i want to do is on-the-fly replace person1 with personx. literally, i want person1==personx to be true, not just that they are two different objects with the same data.  this is important since the platform could make a change to personx and unless the two objects are literally equal, a change to personx would not be automatically reflected in person1...since i can't on-the-fly replace person1 with personx i had that idea that i wouldn't give direct access to person, instead i would give access to personptr which the platform (on-the-fly) can change what person it is pointing to.  this would insurance that once person1ptr gets updated to point to personx, if a change is made in personx it will be seen in person1ptr"
