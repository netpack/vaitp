"does blank async await method run in parallel when called from within a loop? background: i wrote a javascript version of the below code that gathers and persists weather data. doing this took 25 minutes for the same data set...currently i have rewritten it as a blank .net core api. performing the same overall task (yes with different code and language but an a similar implementation in terms of logic) is much, much faster at around 2 minutes. i am trying to understand why this might be and i believe it may have something to do with awaited tasks and the way threads are created and handled. specifically i would like to know if the below code will create multiple threads performing the buildforecast function in parallel which could mean that many http requests are being made to my weather provider at the same time, which of course would explain why it is so much faster...to be clear i do not have a bug in my code - my code is working - it is actually working far better than i expected and i am now trying to understand blank threading (i know that a task is a way of monitoring and interacting with a new thread) and whether or not the below code will cause parallel execution...var alllocations = await locationrepository.getallasync();.var allcountries = await countryrepository.getallasync();.var locationlist = alllocations.tolist();.var countrylist = allcountries.tolist();..// get forecast data.var weatherlist = new list&lt;weather&gt;();.foreach (var location in locationlist).{.     var country = countrylist.first(x =&gt; x.id == location.countryid);.     var forecastresult = await buildforecast(location, country);.     list&lt;weather&gt; weatherforlocation = parseforecast(forecastresult, location);..     weatherlist.addrange(weatherforlocation);.}"
