"pid (a proportional–integral–derivative controller) loop with a different command and feed back units/ types i have a laser and i am adjusting it's position using a motor, and i am reading the laser light intensity at the top and bottom using a sensor...then i divide the top from the bottom and the goal is to get around 0.97%. this is called delta, if delta is too high, you move the motor lower and if delta is too lower we move it up...now i coded a pid ( a proportional–integral–derivative controller), the program i have my command is in motor steps(position) but my feed back is in light intensity percent...so how do i set up my pid ? can i even use a pid this way ?..here is my code:.. getvalue(). {..  pid_controller pid = new pid_controller(2, 1, 0);.  ****.. stepsize = (int)pid.updatepid(convert.todouble(stepsize), delta);.             stepsize = changestepsize( stepsize);...  ***..             }. public pid_controller(int proportional, int integral, int differential).    {.        this.proportional = proportional;.        this.integral = integral;.        this.differential = differential;.         istate = 0d;.        error_counter = 0;.         lastposition = 0;.    }...    double getpterm(double command , double position).    {.        double error = command - position;..        istate += error;.        error_counter++;.        return error;.    }..    double getiterm().    {.        double integralvalue = istate / error_counter;.        return integralvalue;.    }..    double getdterm(double position).    {.        lastposition = position;.        double differential = lastposition - position;.        return differential;.    }..   public double updatepid( double command, double position).    {.        double error = getpterm(command, position);.        double perror = getiterm();.        double derror = getdterm(position);.        command = (proportional * error) + (integral * perror) + (differential * derror);.        return command;.    }"
