"raise custom event in a windows service from a shared library code below represents the shared library with its onappsettingschanged event, below that the windows form application that subscribes to the event and handles it when raised. the custom event data is nothing more than a date. let’s call the shared library myregistryclass it reads and writes entries to the registry and is built as a singleton instance, the same design approach is used for a class we will call mysettings which will hold values that are read and written to the myregistryclass library as well as other data used by the windows form application...all of this works fine as long as i am raising my custom event from myregistryclass and handling it in a windows form application. now i want to share the myregistryclass and mysettings libraries with a windows service using some or all of the features in each...the problem i am running into is that the same design approach used to add an event handler to the windows service does not result in the service getting notification that an event has been raised, even though the windows form application does receive notification...i’m not finding a reason for this difference or a way to work around it, if one exists. is it because the windows service runs a background process or because it does not have a message loop? i’m stumped and could use some guidance. ..namespace commonlibrary.{.    public delegate void appsettingseventhandler(object sender, .      datechangeeventargs e);..    public sealed class myregistryclass.    {.        public event appsettingseventhandler onappsettingschanged;.        private static myregistryclass instance;.        private static object synchroot = new object();..        public static myregistryclass instance.        {.            get.            {.                if (instance == null).                {.                    lock (synchroot).                    {.                        if (instance == null).                            instance = new myregistryclass();.                    }.                }.                return instance;.            }.        }..        private myregistryclass().        {.           // do some work to initialize single instance class.        }..        private void raiseappsettingsevent(datetime newdate).        {.            onappsettingschanged(this, new datechangeeventargs(newdate));.        }..        public void saveappsettings(mysettings filesettings).        {.            // save some registry settings then raise the event.            raiseappsettingsevent(newdatetime);.        }.   }..   public class datechangeeventargs : eventargs.   {.       public datetime newdate { get; private set; }..       public datechangeeventargs(datetime newdate).       {.           this.newdate = newdate;.       }.   }.}...namespace myapplication.{.    public partial class filecopytrayapp : form.    {.        private myregistryclass myregistrylib;.        private mysettings mysettingslib;..        public filecopytrayapp().        {.            this.myregistrylib = myregistryclass.instance;.            this. mysettingslib = mysettings.instance;.            this.myregistrylib.onappsettingschanged += new .              appsettingseventhandler(myregistrylib_onappsettingschanged);..        }..        private void myregistrylib_onappsettingschanged(object sender,.            datechangeeventargs e).        {.            this.mysettingslib.nextrundatetime = e.newdate;.        }.    }.}"
