"eliminate duplicate blank property bodies i am building a large, complex data structure with many interconnected objects. as part of this, i have a situation where i need to create an object before i know the values for all the properties. this is so i can pass a reference to that object around inside of a larger data structure, then change it later to allow all the consumers of that object to get the ""updated"" values. ..tracking the consumers of each object so i can go update their references means i am a) re-implementing a reference counting garbage collector and b) would require an external consumer to modify a class. for obvious reasons, i don't want to implement a garbage collector (or something similar). and allowing external consumers to modify properties means the object is mutable. immutability is important because i know that many objects in this data structure are going to wind up in dictionaries after the data structure has been built, but i can safely modify properties until then. since this is going into a library that will be provided to other users, i must block interactions that will break things like invariants for dictionaries...i am implementing this ""deferred initialization"" concept for properties like this:..class myclass.{.    private anotherclass mreference = null;.    public bool reference.    {.        get.        {.            return this.mreference.        }.        internal set.        {.            if ( this.mreference != null ).            {.                throw new exception( ""this value has already been initialized!"" );.            }.            else.            {.                this.mreference = value;.            }.        }.    }.}...i am allowing anything in the internal scope to assign a non-null value to this property exactly once. once the property has been set, there's no going back...while blank has a keyword readonly that sort of already does this, readonly constrains the member to only be assigned to via either a static initializer or a constructor in the same class. but at the time the constructor is called, i don't know what the value for this property is!..my problem is i am now using this exact pattern across multiple classes, and i would like to avoid this code duplication...does anyone have any suggestions for how i can reduce the code duplication? maybe a blank keyword like readonly, or some other language feature? or is this just not possible? unfortunately, it is not possible to refactor the algorithms such that i can delay instantiation of all objects until all values are known. think of bidirectional relationships with immutable objects at each end if you need an example of this scenario."
