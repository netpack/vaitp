"why is explicitly typed generic delegate considered ambiguous for these numeric types? i have been writing some code passing through delegates to perform the actual work, but sadly now need to deduce the delegate's parameterised type, so used overloaded functions for the types i'm interested in, but was surprised to see ambiguity as in the example below...i realise i could cast the delegate parameter to resolve the ambiguity, but why is this ambiguity there, and is there any other way to resolve it without explicitly instantiating/casting a delegate prior the call to callgottparam ?..namespace conversionambiguous.{.    class intshortdelegate.    {.        delegate void gottparam&lt;t&gt; (t t);..        static void gotint32param(system.int32 t).        {.            console.writeline(""gotint32param: {0}"", t);.        }.        static void gotint16param(system.int16 t).        {.            console.writeline(""gotint16param: {0}"", t);.        }..        void callgottparam(gottparam&lt;system.int32&gt; dcall).        {.            dcall(1);.        }..        void callgottparam(gottparam&lt;system.int16&gt; dcall).        {.            dcall(2);.        }..        static public void test().        {.            intshortdelegate test = new intshortdelegate();.            // error cs0121: the call is ambiguous between the following methods or properties: .            // 'conversionambiguous.intshortdelegate.callgottparam(quickie.conversionambiguous.intshortdelegate.gottparam&lt;int&gt;)' and.            // 'conversionambiguous.intshortdelegate.callgottparam(quickie.conversionambiguous.intshortdelegate.gottparam&lt;short&gt;)'.            test.callgottparam(intshortdelegate.gotint32param);..            gottparam&lt;system.int32&gt; d32 = intshortdelegate.gotint32param;.            test.callgottparam(d32); // this is fine.            test.callgottparam(intshortdelegate.gotint16param); // this is fine.        }.    }  // class intshortdelegate.} // ends namespace conversionambiguous...compiled against .net 3.5..had a brief look at the csharp language specification version 4.0 sections 7.5.2 type inference and 7.5.3. overload resolution, but haven't had time to study them."
