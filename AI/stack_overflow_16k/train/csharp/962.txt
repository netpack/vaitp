"can i get encrypt and decrypt algorithm that's more varied than what i have? this is the one i  currently used..the problem is i am seeing pattern. for example,../4mbvuxjweznxjo/mzjqhamca3lgwohhtxwcx3tvcx5ax5htho2kjgkz9b1luwabkbsuybwdcfdp4vo1bgirxtg/yfvt9pzac45ebuefqmui3xcpluwgh9dr+uqekqdo../4mbvuxjweznxjo/mzjqhbolj2wif10gxjofrqmoz6zeseusexcrcdds1pabe+j4wtynwbqo7sckixwo0dwnmd4saxqy3hyl7u/cthd2zny7bj7m1kbcdmwlvct9bet9wj9rjspqaifavchx/nevsq==../4mbvuxjweznxjo/mzjqhbolj2wif10gxjofrqmoz6zeseusexcrcdds1pabe+j4wtynwbqo7sckixwo0dwnme8zi4eudapiqglslujq2me/r/5p4ov6a/45gwtg2curpam5dvdp8ey5zflqacxtpa==...all enscrypted url start with /4mbvuxjweznxjo/mzjqhbolj2wif10gxjofrqmoz6zeseusexcrcdds1pabe+j4wtynwbqo7..well, i want encryption without that pattern...this is the code i am currently using...public static string encrypt(string plaintext).{.    string passphrase = configurationmanager.appsettings[""encryptionkey""];.    byte[] initvectorbytes = encoding.utf8.getbytes(initvector);.    byte[] plaintextbytes = encoding.utf8.getbytes(plaintext);.    passwordderivebytes password = new passwordderivebytes(passphrase, null);.    byte[] keybytes = password.getbytes(keysize / 8);.    rijndaelmanaged symmetrickey = new rijndaelmanaged();.    symmetrickey.mode = ciphermode.cbc;.    icryptotransform encryptor = symmetrickey.createencryptor(keybytes, initvectorbytes);.    memorystream memorystream = new memorystream();.    cryptostream cryptostream = new cryptostream(memorystream, encryptor, cryptostreammode.write);.    cryptostream.write(plaintextbytes, 0, plaintextbytes.length);.    cryptostream.flushfinalblock();.    byte[] ciphertextbytes = memorystream.toarray();.    memorystream.close();.    cryptostream.close();.    return convert.tobase64string(ciphertextbytes);.}..private const string initvector = ""i51k0t4k4yaray48"";..// this constant is used to determine the keysize of the encryption algorithm..private const int keysize = 128;..public static string encrypt(string plaintext).{.    string passphrase = configurationmanager.appsettings[""encryptionkey""];.    byte[] initvectorbytes = encoding.utf8.getbytes(initvector);.    byte[] plaintextbytes = encoding.utf8.getbytes(plaintext);.    passwordderivebytes password = new passwordderivebytes(passphrase, null);.    byte[] keybytes = password.getbytes(keysize / 8);.    rijndaelmanaged symmetrickey = new rijndaelmanaged();.    symmetrickey.mode = ciphermode.cbc;.    icryptotransform encryptor = symmetrickey.createencryptor(keybytes, initvectorbytes);.    memorystream memorystream = new memorystream();.    cryptostream cryptostream = new cryptostream(memorystream, encryptor, cryptostreammode.write);.    cryptostream.write(plaintextbytes, 0, plaintextbytes.length);.    cryptostream.flushfinalblock();.    byte[] ciphertextbytes = memorystream.toarray();.    memorystream.close();.    cryptostream.close();.    return convert.tobase64string(ciphertextbytes);.}..public static string decrypt(string ciphertext).{.    string passphrase = configurationmanager.appsettings[""encryptionkey""];.    byte[] initvectorbytes = encoding.ascii.getbytes(initvector);.    byte[] ciphertextbytes = convert.frombase64string(ciphertext);.    passwordderivebytes password = new passwordderivebytes(passphrase, null);.    byte[] keybytes = password.getbytes(keysize / 8);.    rijndaelmanaged symmetrickey = new rijndaelmanaged();.    symmetrickey.mode = ciphermode.cbc;.    icryptotransform decryptor = symmetrickey.createdecryptor(keybytes, initvectorbytes);.    memorystream memorystream = new memorystream(ciphertextbytes);.    cryptostream cryptostream = new cryptostream(memorystream, decryptor, cryptostreammode.read);.    byte[] plaintextbytes = new byte[ciphertextbytes.length];.    int decryptedbytecount = cryptostream.read(plaintextbytes, 0, plaintextbytes.length);.    memorystream.close();.    cryptostream.close();.    return encoding.utf8.getstring(plaintextbytes, 0, decryptedbytecount);.}"
