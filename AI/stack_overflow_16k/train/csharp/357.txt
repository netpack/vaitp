"creating an event handler that handles multiple event types i was looking through some old code today and found an event handler that looked like this:..public void handleevent(eventclassa eventobj).{.    if(eventobj is eventsubclassa).    {.        handleeventsubclassa(eventobj as eventsubclassa);.    }.    else if(eventobj is eventsubclassb).    {.        handleeventsubclassb(eventobj as eventsubclassb);.    }.    else if(eventobj.gettype() == typeof(eventsubclassc)).    {.        handleeventsubclassc(eventobj as eventsubclassc);.    }.    else if(eventobj is eventsubclassd).    {.        handleeventsubclassd(eventobj as eventsubclassd);.    }.}...i thought this was kind of ugly. so i refactored it like this:..delegate void eventhandler(dynamic eventobj);.private static readonly dictionary&lt;type, eventhandler&gt; event_map = new dictionary&lt;type, eventhandler&gt;().    {.        { typeof(eventsubclassa), handleeventsubclassa },.        { typeof(eventsubclassb), handleeventsubclassb },.        { typeof(eventsubclassc), handleeventsubclassc },.        { typeof(eventsubclassd), handleeventsubclassd }.    };..public void handleevent(eventclassa eventobj).{.    event_map[eventobj.gettype()](eventobj);.}..private void handleeventsubclassa(dynamic evt).{.    var eventobj = evt as eventsubclassa;.}...i had a coworker review the code and there were concerns about the way this solution worked compared to the previous solution. i have a hard time believing that the previous solution is the best solution for this case, so i've turned to stackoverflow...is there a better way to build this type of class? .is there a pattern i'm not aware of that is designed for this?"
