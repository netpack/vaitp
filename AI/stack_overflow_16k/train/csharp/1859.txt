"how to initialize class before it is needed in the main method using blank given this code:..using system;.using system.collections.generic;.using factorycallback = system.func&lt;system.object&gt;;..interface imessageprovider.{.    string message { get; }.}..class messageprovider : imessageprovider.{.    private random generator = new random();..    public static void register().    {.        instancefactory.register(typeof(imessageprovider), () =&gt; new messageprovider());.    }..    public string message.    {.        get.        {.            switch (generator.next(3)).            {.                case 0:.                    return ""no matter where you go, there you are."";.                case 1:.                    return ""once i thought i'd made a mistake, but i was wrong."";.                case 2:.                    return ""i used to think i was indecisive; now i'm not so sure"";.                default:.                    throw new indexoutofrangeexception();.            }.        }.    }.}..class instancefactory.{.    private static dictionary&lt;type, factorycallback&gt; typecallbacks =.        new dictionary&lt;type, factorycallback&gt;();..    public static void register(type type, factorycallback callback).    {.        typecallbacks.add(type, callback);.    }..    public static object instanceof(type type).    {.        return typecallbacks[type]();.    }.}..public class randommessage.{.    public static void main().    {.        imessageprovider provider =.            instancefactory.instanceof(typeof(imessageprovider)) as imessageprovider;.        console.writeline(string.format(""the message is:n{0}"", provider.message));.    }.}...this program will not run successfully as is because the messageprovider never actually registers with the instancefactory..obviously, a call to messageprovider.register could be added to the beginning of randommessage.main. however, that now requires randommessage to have knowledge of messageprovider and defeats the whole purpose of the instancefactory class which is intended to separate how to create something from what that something does..i would like the messageprovider to be able to automatically register with the instancefactory before randommessage.main tries to create an imessageprovider instance..how could this be accomplished?"
