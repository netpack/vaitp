"how to preserve the original type of a type-variable in blank? i have the following example:..class bounds.{.  private stringbuilder str = new stringbuilder();..  public &lt;type&gt; void add (type value).  {.    add_specific (value);.    str.append (string.format(""%n""));.  }..  private &lt;type extends number&gt; void add_specific (type value).  {.    str.append (value);.  }..  public string tostring () { return str.tostring(); }..  public static void main (string[] args).  {.    bounds test = new bounds();.    test.add (new integer (42));.    system.out.print (test.tostring());.  }.}...when i try to compile it i get the following error:...bounds.blank:7: error: method add_specific in class bounds cannot be applied to given types;.    add_specific (value);.    ^.  required: type#1.  found: type#2.  reason: inferred type does not conform to declared bound(s).    inferred: type#2.    bound(s): number.  where type#1,type#2 are type-variables:.    type#1 extends number declared in method add_specific(type#1).    type#2 extends object declared in method add(type#2).1 error...this looks to me as if the original type of the argument passed to the add method gets lost in the body of add. how can i preserve the type so that the correct add_specific method can be chosen?..update..i have simplified my example, because i thought it would be easier to understand. but it seems to me that most people do not understand the reason why it contains a generic and a specific function. so i paste a more advanced example. maybe this makes the reasons more obvious:..import blank.text.dateformat;.import blank.text.simpledateformat;.import blank.util.date;..class bounds.{.  private stringbuilder str = new stringbuilder();..  public &lt;type&gt; void add (type value).  {.    add_specific (value);.    str.append (string.format(""%n""));.  }..  private &lt;type extends number&gt; void add_specific (type value).  {.    str.append (value);.  }..  private void add_specific (string value).  {.    str.append ('""');.    for (int i = 0; i &lt; value.length(); i++) {.      char ch = value.charat(i);.      switch (ch) {.      case '\': str.append (""\\""); break;.      case '""': str.append (""\""""); break;.      default: str.append (ch);.      }.    }.    str.append ('""');.  }..  private static dateformat iso8601.    = new simpledateformat(""'""'yyyy-mm-dd't'hh:mm:ssz'""'"");..  private void add_specific (date date).  {.    str.append (iso8601.format(date));.  }..  public string tostring ().  {.    return str.tostring();.  }..  public static void main (string[] args).  {.    bounds test = new bounds();..    test.add (new integer (42));.    test.add (""42"");.    test.add (new date());..    system.out.print (test.tostring());.  }.}...i have a generic function called add. this generic function does something generic and calls a specific function to do something specific. the problem is, that the type to select the specific function gets lost in the generic function. and the question is how to fix this? how do i have to write the generic function so that it is still possible to select the right specific function in the body of the generic function?"
