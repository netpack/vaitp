"could some help me find why my code couldn't run .  possible duplicate:.  blank code with tests - infinite loop?  .....here is my code that i want to get the relationship between people, however, when i run unit test, the test ran forever and couldn't get the result, and my cpu using was high..            here is my code. could someone see what's wrong with it?.            the string relations are multiple line inputs of string with a format ""a , b"" +n"" +.                                                                                  ""c , d"" where a is the parent of b and c is the parent of d...this is the default constructor for the code and is the input format of string, we don't need to check if the format is correct..            public seerelations(string relations){.                this.relations = relations;.            }...//helper function to get each line of the string.. private arraylist&lt;string&gt; linerelations(){.            int i;.            arraylist&lt;string&gt; linerelations = new arraylist&lt;string&gt;();.            string[] lines = relations.split(""n"");.            for(i = 0; i &lt; lines.length; i++){.                linerelations.add(lines[i]);.            }.            return linerelations;.        }...//helper function to put each of the relationship in arraylists ..     private arraylist&lt;arraylist&lt;string&gt;&gt; allrelations(){.                int i;.                arraylist&lt;arraylist&lt;string&gt;&gt; allrelations = new arraylist&lt;arraylist&lt;string&gt;&gt;();.                arraylist&lt;string&gt; linerelations = linerelations();.                for(i = 0; i &lt; linerelations.size(); i++){.                    arraylist&lt;string&gt; eachline = new arraylist&lt;string&gt;(arrays.aslist(linerelations.get(i).split(""\s*,\s*"")));.                    allrelations.add(eachline);.                }.                return allrelations;.            }...this is the method to check if the input name is existent .//helper function to see if the name exist for seerelations() ..    private boolean hasthisname(string name){.        arraylist&lt;arraylist&lt;string&gt;&gt; allrelations = allrelations();.        int i;.        int j;.        for(i = 0; i &lt; allrelations.size(); i++){.            for(j = 0; j &lt; allrelations.get(i).size(); j++){.                if(name.equals(allrelations.get(i).get(j))){.                    return true;.                }.            }.        }.        return false;.    }...this is the function to get the generation number between two people .//helper function to get generation number of seerelations()..        private int getgenerationnum(string person, string ancestor){.        arraylist&lt;arraylist&lt;string&gt;&gt; allrelations = allrelations();.        string name;.        int i;.        int j;.        int generationnum = 0;.        for(i = 0, j = 0, name = ancestor; i &lt; allrelations.size(); i++){.            if(name.equals(allrelations.get(i).get(0)) &amp;&amp; !person.equals(allrelations.get(i).get(1))){.                generationnum++;.                ancestor = allrelations.get(i).get(1);.                i = 0;.                j = 1;.            }.            else if(ancestor.equals(allrelations.get(i).get(0)) &amp;&amp; person.equals(allrelations.get(i).get(1))){.                generationnum++;.                j = 1;.                break;.            }.        }.        if(j == 0){.            return 0;.        }.        else{.            return generationnum;.        }.    }...this is the method to get multiple of ""great"" for the final output..    private string great(int num){.        int i;.        string great = """";.        for(i = 0; i &lt; num; i++){.            great += ""great"";.        }.        return great;.    }...this is my final method to check the relationship between two people ..    public string seerelations(string person, string ancestor){.        int generationnum = getgenerationnum(person, ancestor);.        string great = great(generationnum  - 2);.        if(!(hasthisname(person) &amp;&amp; hasthisname(ancestor))){.            return null;.        }.        else{.            if(generationnum == 0){.                return null;.            }.            else if(generationnum == 1){.                return ancestor + "" is the parent of "" + person;.            }.            else if(generationnum == 2){.                return ancestor + "" is the grandparent of "" + person;.            }.            else{.                return ancestor + "" is the"" + "" "" +  great +""grandparent of "" + person;.            }.        }.    }"
