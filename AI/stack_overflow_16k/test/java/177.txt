"google foo.bar challenge help minion salutes i am working on a foo.bar challenge and have become stuck.  here is the description of the problem:..> en route salute..commander lambda loves efficiency and hates anything that wastes time. she's a busy lamb, after all! she generously rewards henchmen who identify sources of inefficiency and come up with ways to remove them. you've spotted one such source, and you think solving it will help you build the reputation you need to get promoted...every time the commander's employees pass each other in the hall, each of them must stop and salute each other - one at a time - before resuming their path. a salute is five seconds long, so each exchange of salutes takes a full ten seconds (commander lambda's salute is a bit, er, involved). you think that by removing the salute requirement, you could save several collective hours of employee time per day. but first, you need to show her how bad the problem really is...write a program that counts how many salutes are exchanged during a typical walk along a hallway. the hall is represented by a string. for example:.""--->->&lt;->&lt;-->-""..each hallway string will contain three different types of characters: '>', an employee walking to the right; '&lt;', an employee walking to the left; and '-', an empty space. every employee walks at the same speed either to right or to the left, according to their direction. whenever two employees cross, each of them salutes the other. they then continue walking until they reach the end, finally leaving the hallway. in the above example, they salute 10 times...write a function answer(s) which takes a string representing employees walking along a hallway and returns the number of times the employees will salute. s will contain at least 1 and at most 100 characters, each one of -, >, or &lt;...sample output:..> test cases..inputs:.    (string) s = "">----&lt;"".output:.    (int) 2..inputs:.    (string) s = ""&lt;&lt;>>&lt;"".output:.    (int) 4..my code so far: ..public class minion_salutesv1 {.public static void main(string[] args){.    //test input.    system.out.println(answer(""&lt;--&gt;-&lt;--&lt;&gt;-&lt;&lt;--&gt;--&lt;--&gt;""));.    system.out.println(answer(""&lt;&lt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&lt;&lt;&gt;&lt;&gt;&gt;&gt;""));.    system.out.println(answer(""&gt;----&lt;""));.    system.out.println(answer(""&lt;&lt;&gt;&gt;&lt;""));.}.public static int answer(string s) {.    //return a string starting at the first occurrence of '&gt;' and end at the last occurrence of '&lt;+1' .    string empbound = s.substring(s.indexof('&gt;'), s.lastindexof('&lt;')+1).replaceall(""-"", """");.    //isolate the number of employees walking right.    string rightsaluters = empbound.replaceall(""&lt;"", """");.    //isolate the number of employees walking left.    string leftsaluters = empbound.replaceall(""&gt;"", """");.    if(empbound.length() == 2){.        return 2;.    }.    else if (empbound.length() == 3){.        return 4;.    }.    else.    return rightsaluters.length() * leftsaluters.length();.    }.}...i have been trying lots of different things on this but have not achieved the correct results yet...i thought that returning rightsaluters.length() * leftsaluters.length() would give me the desired results.  i feel like i have the right idea by isolating the right and left saluters but i am lost beyond that point...how do i properly calculate the number of salutes that will take place between the saluters?..should i make a variable for the number of encounters that will happen then multiply that number by 2?  i realize i am spitballing here but i have been straining my skull over this for days and waited until the last minute to ask for help...update:  tried implementation of jason's answer..public class minion_salutesv1 {.    public static void main(string[] args){.        //test input.        system.out.println(answer(""&lt;--&gt;-&lt;--&lt;&gt;-&lt;&lt;--&gt;--&lt;--&gt;""));.        system.out.println(answer(""&lt;&lt;&gt;&lt;&gt;&gt;&lt;&gt;&gt;&lt;&lt;&gt;&lt;&gt;&gt;&gt;""));.        system.out.println(answer(""&gt;----&lt;""));.        system.out.println(answer(""&lt;&lt;&gt;&gt;&lt;""));.    }.    public static int answer(string s) {.        //return a string starting at the first occurrence of '&gt;' and end at the last occurrence of '&lt;+1'.        string empbound = s.substring(s.indexof('&gt;'), s.lastindexof('&lt;')+1).replaceall(""-"", """");.        //isolate the number of employees walking right.        string rightsaluters = empbound.replaceall(""&lt;"", """");.        //isolate the number of employees walking left.        string leftsaluters = empbound.replaceall(""&gt;"", """");.        int saluters = rightsaluters.length()+leftsaluters.length();.        system.out.println(saluters);..        for(char c = '&gt;'; c &lt; rightsaluters.length(); c++){.            int count = leftsaluters.length();.            saluters = count*2;.        }.        return saluters * 2;.    }.}...output:..8  //remove this.16.11 //remove this.22.2  //remove this.4.3  //remove this.6...so it appears the final integer returned for each string is the one i need how do i eliminate the other returns?"
