"blank thread doubt consider this program:..public class test {.    public static void main(string [] args){.        runnable r = new runnable() {.            public void run() {.                system.out.print(""foo"");.            }.        };.        thread t = new thread(r) {.            public void run() {.                system.out.print(""bar"");.            }.        };.        t.start();.    }.}...on running the output is..bar...i would like to know why is that so...my understanding:..we instantiate an anonymous inner class that implements runnable by overriding run method. and assign it to r...next we pass this runnable to the thread class constructor. but we also create a new anonymous inner class that extends thread by overriding run...so we have two run methods now and the 2nd will take preference over the 1st...i'm very confused please correct me if i'm wrong...also are such crazy things used in real world blank programming? (my prof says yes and thats what keeps us going :d)."
