"how to avoid ""variable might not have been initialized"" near try/catch with system.exit i want to avoid this ugly pattern:..long foo = null;.double bar = null;..try {.  foo = long.parselong(args[0]);.  bar = long.parselong(args[0]);.} catch (numberformatexception e) {.  system.out.println(usage);.  system.exit(1);.}..dosomethingwith(foo, bar);...i know  i can move the initialisations and dosomethingwith into the try block, but imagine:...dosomethingwith is actually several lines of conditional logic, many method calls, statements etc..i don't want to be nesting blocks unnecessarily deeply.i want to avoid accidentally catch unexpected numberformatexceptions thrown from dosomethingwith....i find the = null and above quite ugly, as well as the use of classes instead of primitives. this ugliness makes me suspect there's a better way to write this code...my first vision is of course..long foo;.double bar;..try {.  foo = long.parselong(args[0]);.  bar = long.parselong(args[0]);.} catch (numberformatexception e) {.  system.out.println(usage);.  system.exit(1);.}..dosomethingwith(foo, bar);...but we all know blank throws a couple variable might not have been initialized errors when you try to build that...what's a better design pattern for this kind of problem? ""better"" meaning (for me) does all of this...avoids the weird = null.avoids unnecessary class wrappers around primitives.doesn't nest deeply into the try block.doesn't catch/hide exceptions it wasn't meant to...if this is not possible, or if my concept of ""pretty"" code is wrong, please convince me and show the best that can currently be used."
