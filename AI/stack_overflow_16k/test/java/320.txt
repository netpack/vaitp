"how to handle treemaps? can i use only one treemap to store values for several items? i am trying to simulate a production system. to explain what i intend to do briefly, i will to create a panel where i will have some tables to save values (for the proprieties of the several working stations and the job types (see pic. below)). when i run it, those values should be stored for further processing...on a previous question i was recommended using treemaps to store those values, so i created something like:..station[num][type][avg_time][posx][posy][state].part[num][type][state]...heres is my code so far:..l.blank..import blank.awt.*;.import blankx.swing.*;...public class l extends jframe {..     public static final int ww = 1000;.     public static final int wh = 600;.     public static final int bgw = (ww - 30);.     public static final int bgh = (wh - 80);.     public static final string wt = ""teste"";.    color new_piece = new color(255,0,0);.    color progress_piece = new color(255,215,0);.    color ready_piece = new color(173,255,47);.    container pane = getcontentpane();.    dimension appletsize = pane.getsize();.    int wheight = appletsize.height;.    int wwidth = appletsize.width; .    drawrectangle rectangle = new drawrectangle();.    public tmap t;..    public l() {.        setsize(ww,wh);.        this.settitle(wt);.//        sim(int nparts);.        jbutton startbutton = new jbutton(""start"");        .        jbutton stopbutton  = new jbutton(""stop"");..        //... add listeners.       // startbutton.addactionlistener(new startaction());.        //stopbutton.addactionlistener(new stopaction());..        //... layout inner panel with two buttons horizontally.        jpanel buttonpanel = new jpanel();.        buttonpanel.setlayout(new flowlayout(flowlayout.right,10,10));.        buttonpanel.add(startbutton);.        buttonpanel.add(stopbutton);.        this.setlayout(new boxlayout(pane,boxlayout.y_axis));.        this.add(rectangle);.        this.add(buttonpanel);..        //sim();.        t = new tmap();.        test();.        //pane.add(rectangle);..        setdefaultcloseoperation(jframe.exit_on_close);.        setresizable(false);.        setlocationrelativeto(null);.        setvisible(true);.    }..    public void addrectangle(int px, int py, int pw, int ph, color pc, string state) {.        this.rectangle.addrectangle( px, py, pw, ph, pc, state);.    }..    public void sim() {.        addrectangle(20,20,10,10,color.green,""new"");.        /*for (int i=0;i&lt;=nparts;i++) {.            addrectangle(200,200,50,color.green);.        }*/.    }..    public void test() {.        // first station proprieties.        t.put(""num"",1);.        t.put(""type"",1);.        t.put(""avg_time"",5);.        t.put(""posx"",100);.        t.put(""posy"",20);.        t.put(""state"",0);.        // second station proprieties.        t.put(""num"",2);.        t.put(""type"",2);.        t.put(""avg_time"",7);.        t.put(""posx"",200);.        t.put(""posy"",20);.        t.put(""state"",0);.        /*system.out.println(""now the tree map keys: "" + t.st.keyset());.        system.out.println(""now the tree map contain: "" + t.st.values());*/.    }..    public static void main(string[] args) {..        try {.                uimanager.setlookandfeel(""com.sun.blank.swing.plaf.windows.windowslookandfeel"");.        } catch (unsupportedlookandfeelexception ex) {.            ex.printstacktrace();.        } catch (illegalaccessexception ex) {.            ex.printstacktrace();.        } catch (instantiationexception ex) {.            ex.printstacktrace();.        } catch (classnotfoundexception ex) {.            ex.printstacktrace();.        }..        swingutilities.invokelater(new runnable() {.            public void run() {.                l l = new l();.                //system.out.println(""entryset: "" + t.keyset());.                //system.out.println(""entryset: "" + t.station() + ""n"");.            }.        });..    }..}  ...drawrectangle.blank.. import blank.awt.*;. import blank.awt.event.actionevent;. import blank.awt.event.actionlistener;. import blank.awt.geom.*;. import blank.util.arraylist;. import blank.util.concurrent.timeunit;. import blank.util.logging.level;. import blank.util.logging.logger;. import blankx.swing.*;.. public class drawrectangle extends jpanel implements actionlistener {..private blank.util.list&lt;rectangle2d&gt; squares;.private blank.util.list&lt;color&gt; colors;.private long seconds = 1;.private int anim_interval = (int) timeunit.seconds.tomillis(seconds);.private timer sim_timer;.private timer idle_timer;.int px = 10, velx = 2;.string state;.color pc;...public drawrectangle(){.    //this.setbounds(10, 10, 10, 10);.    this.setminimumsize(new dimension(100,100));.    this.setpreferredsize(new dimension(100,l.bgh));.    this.setminimumsize(new dimension(500,l.bgh));.    setbackground(color.gray);.    setdoublebuffered(true);.    setborder(borderfactory.createlineborder(color.black, 1));.    squares = new arraylist&lt;rectangle2d&gt;();.    colors = new arraylist&lt;color&gt;();.    sim_timer = new timer(anim_interval,this);        .    sim_timer.start();.}..public void addrectangle(int px, int py, int pw, int ph, color pc, string state)  { // square.    squares.add( new rectangle2d.double(px, py, pw, ph) ) ;.    pc = pc;.    //system.out.println(state);.    //this.a = a;.    //this.startx = startx;.    //this.starty = starty;.}..public void actionperformed(actionevent e) {.    /*if (px &lt; 0 || px &gt; 990) {.        velx = -velx;.    }*/.    //system.out.println(px);.    if (px == 20) { .        sim_timer.stop();.        state = ""idle"";.        try {.            thread.sleep(5000);.        } catch (interruptedexception ex) {.            logger.getlogger(drawrectangle.class.getname()).log(level.severe, null, ex);.        }.        sim_timer.start();.        state = ""going"";.    } .    else if (px == 50) {.        sim_timer.stop();.        state = ""done"";.        seconds = 2;.    }.    //if (state != ""idle"") {.        px = px + velx;.        repaint();.    //}.}..private void idlestate() throws interruptedexception {.    thread.sleep(5000);.    state = ""idle"";.}.private void goingstate() {.    state = ""going"";.}.private void donestate() {.    state = ""done"";.}..@override.public void paintcomponent(graphics g) {.    super.paintcomponent(g);.    graphics2d g1 = (graphics2d) g.create();.    graphics2d g2 = (graphics2d) g.create();.    //system.out.println(""d1"");.    /*for( rectangle2d rect : squares ) {.        system.out.println(colors);.        //g1.setpaint(colors);.        g1.fill(rect);.    }*/.    //for(int i=0;i&lt;squares.size();i++) {.        //system.out.println(""d2"");.        //g1.setcolor(colors.get(i));.        if (state == ""going"") { g1.setcolor(color.orange); }.        else if (state == ""idle"") { g1.setcolor(color.yellow); }.        else if (state == ""done"") { g1.setcolor(color.green); }.        else { g1.setcolor(color.red); }.        //g1.fill(squares.get(i));.        g1.fillrect(px, 10, 10, 10);.        g2.setcolor(color.blue);.        g2.fillrect(px,40,10,10);.        //g1.dispose();.    //}.}. public void setcolor(color newcolor) {.  pc = newcolor;.      }.. }...tmap.blank..import blank.util.*;..public class tmap {.public treemap &lt;string, integer&gt; st;.public int num_atrib = 6;..public tmap () {.    st = new treemap &lt;&gt;();.}.public set&lt;string&gt; getkeyset() {.    return st.keyset();.}..public integer get(string s) {.    return st.get(s);.}..public void put (string s, int i) {.    st.put(s,i);.    system.out.println(""now the tree map keys: "" + st.keyset());.    system.out.println(""now the tree map contain: "" + st.values());.}..public treemap&lt;string, integer&gt; station(string s,int i) {. }. }...the drawrectangle.blank code is here just for those who may want to compile the code but has nothing to do with the actual problem so far. the tmap.blank is where i create the map, and have the methods to deal with the data. everything is working fine, my problems is the following:..most likely, when simulating, i will have more than one station, so i would need to store info in such a matter:.. station[num][type][avg_time][posx][posy][state]. station[1][1][5][100][20][0]. station[2][2][7][200][20][0]. station[3][3][4][300][20][0]...thing is, when i put new data to the treemap, it will overwrite the previous data stored so if i add info twice, the output will come as:.. now the tree map keys: [avg_time, num, posx, posy, type]. now the tree map contain: [5, 1, 100, 20, 1]. now the tree map keys: [avg_time, num, posx, posy, state, type]. now the tree map contain: [7, 2, 200, 20, 0, 2]...the simulation will be limited to 6 working stations, so my question is, what's the best practice to deal with this? the only thing i could come up with is creating 6 treemaps and only use those that'll be needed, but i'm pretty sure there has got to be an easier and more efficient way to store the data...thanks in advance for your help!"
