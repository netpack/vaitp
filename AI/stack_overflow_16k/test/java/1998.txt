"just how much more precise is `comparable` than it appears? the comparable interface looks like..interface comparable&lt;t&gt;.{.  public int compareto(t other);.....}...this does not inherently say anything about the relationship between an implementation of comparable&lt;t&gt; and the type t. the text of the blank spec seems to suggest that an implementation of comparable&lt;t&gt; should always be a subclass of t, but it doesn't explicitly say so, as far as i can tell. is it supposed to? also, if the implementation, a, of comparable&lt;t&gt; is a strict subclass of t, then the antisymmetry rule seems to suggest that t must be an implementation of comparable&lt;ap&gt; for some superclass, ap, of a. this is a rather stringent requirement. in fact, it's stringent enough that i don't think it's generally possible to do it unless the two classes are constructed specially for the purpose. any thoughts? am i missing something, or is this one weird interface?"
