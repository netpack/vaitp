"better way to instantiate child classes with shared interface/baseclass i'm new to blank so this is likely pretty easy. i have a series of subclasses that share most variables/methods with an interface, but each child class has a few additional methods unique to their type which is why i designed the code this way...however, when i retrieve data from a database (the data is stored in the same format for every subclass i have) i'd like to be able to create an instance of a base class or something that i can easily either cast to the subclass i need or have some sort of factory to give me a child class instance...this is the code i have now, it just checks what type the data is for and then creates a new instance of the subclass but it feels so repetitive to me...anything better?..                if( rs.getstring(""action_type"").equals(""block-break"") || rs.getstring(""action_type"").equals(""block-place"") ){.                actions.add( new blockaction(.                        rs.getstring(""action_time""),.                        rs.getstring(""action_type""),.                        rs.getstring(""world""),.                        rs.getstring(""player""),.                        rs.getint(""x""),.                        rs.getint(""y""),.                        rs.getint(""z""),.                        rs.getstring(""data"").                    ) );.            }..            if( rs.getstring(""action_type"").equals(""entity-kill"") ){.                actions.add( new entitykillaction(.                        rs.getstring(""action_time""),.                        rs.getstring(""action_type""),.                        rs.getstring(""world""),.                        rs.getstring(""player""),.                        rs.getint(""x""),.                        rs.getint(""y""),.                        rs.getint(""z""),.                        rs.getstring(""data"").                    ) );.            }"
