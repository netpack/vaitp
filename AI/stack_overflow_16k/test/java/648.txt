"blank techniques for end-of-lifetime of objects experienced programmer new to blank seeking your wisdom:..if there is no way to ensure that some particular chunk code is executed as an object goes out of scope, then what other approaches are there that would offer the same functionality?.(it seems finalize is clearly not meant for that)..a classic example is the scoped lock idiom:..void method().{.    // thread-unsafe operations {...}..    { // &lt;- new scope.        // give a mutex to the lock.        scopedlock lock(m_mutex);..        // thread safe operations {...}..        if (...) return; // mutex is unlocked automatically on return..        // thread safe operations {...}..    } // &lt;- end of scope, mutex is unlocked automatically..    // thread-unsafe operations {...}.}...i can understand that in blank it would be frowned upon to have some code executed if you haven't explicitly called it. but i find being able to enforce some code to be executed at the end of an object's lifetime is a very powerful feature to ensure your classes are being used sensibly by client code..thanks"
