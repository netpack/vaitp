"how do i return time; from clockdisplay() object in printdetails? i need to create a historical moment object which returns the time from the clockdisplay() object and i am wondering how do i return time; from clockdisplay() object? when i compile it, it has no errors but when i create a clockdisplay object with the time value of 11:00 and i create a historicalmoment object and i inspect it, it returns a null value when i printdetails.  ..here is my code:../**. * @return the time. */.public clockdisplay gettime().{.    return time;.}...here is my printdetails:../**. * the print details of time and event.*/.public void printdetails().{.system.out.println(""at "" + gettime() + "","" + geteventname());.}...this is my historicalmoment class:..public class historicalmoment{..private string eventname;.private clockdisplay timeofevent;.private clockdisplay time;..public static final int midnight_hour = 00;.public static final int minute_zero = 00;..public static final int elventh_hour = 11;.public static final int two_minutes = 02;.public static final int forty_minutes = 40;.public static final int ninth_hour = 9;.public static final int four_minutes = 04;../**. * default constructor. */.public historicalmoment(){.    eventname = ""untitled event"";.    timeofevent = new clockdisplay(midnight_hour, minute_zero);..}../**. * @param nameoftheevent the name of the event; ""untitled event"" if the name of the event is null or """". */.public historicalmoment(string nameoftheevent){.    if ((nameoftheevent == null) || (nameoftheevent.equals(""""))){.        eventname = ""untitled event"";.        timeofevent = new clockdisplay(midnight_hour, minute_zero);.    }.    else {.        eventname = nameoftheevent;.        timeofevent = new clockdisplay(midnight_hour, minute_zero);.    }..}../**. * @param the name and time of the event. */.public historicalmoment(string nameoftheevent, clockdisplay thetime).{.    if ( (nameoftheevent == null) || (nameoftheevent.equals(""""))){.        eventname = ""untitled event"";.        timeofevent = new clockdisplay(midnight_hour, minute_zero);.    }.    else{.        eventname = nameoftheevent;.        timeofevent = thetime;.    }.}../**. * @return the time of event. */.public clockdisplay gettime().{.    return timeofevent;.}.../**. * @return the eventname;. */.public string geteventname().{.    return eventname;.}../**. * @return the time of the event incremented. */.public void addminutetotimeofevent(){.    timeofevent.timetick();.}../**. * the print details of time and event. */.public void printdetails().{.    system.out.println(""at "" + gettime() + "","" + geteventname());.}..}...here is my clockdisplay class:..public class clockdisplay.{.private numberdisplay hours;.private numberdisplay minutes;.private string displaystring;    // simulates the actual display..public static final int first_morning_hour  = 0;.public static final int last_morning_hour   = 11;.public static final int first_evening_hour      = 12;.public static final int last_evening_hour       = 23;.public static final int minutes_per_hour        = 60;.public static final int minutes_zero            = 0;.public static final string morning_suffix       = ""a.m."";.public static final string evening_suffix       = ""p.m."";.public static final int midnight_hour       = 0;.public static final int hours_per_day       = 0;.public static final int twenty_four_hours   = 24;./**. * constructor for clockdisplay objects. this constructor . * creates a new clock set at 00:00.. */.public clockdisplay().{.    hours = new numberdisplay(twenty_four_hours);.    minutes = new numberdisplay(minutes_per_hour);.    updatedisplay();.}../**. * constructor for clockdisplay objects. this constructor. * creates a new clock set at the time specified by the . * parameters.. */.public clockdisplay(int hour, int minute).{.    hours = new numberdisplay(twenty_four_hours);.    minutes = new numberdisplay(minutes_per_hour);.    settime(hour, minute);.}../**. * this method should get called once every minute - it makes. * the clock display go one minute forward.. */.public void timetick().{.    minutes.increment();.    if(minutes.getvalue() == minutes_zero){  // it just rolled over!.        hours.increment();.    }.    updatedisplay();.}../**. * set the time of the display to the specified hour and. * minute.. */.public void settime(int hour, int minute).{.    hours.setvalue(hour);.    minutes.setvalue(minute);.    updatedisplay();       .}../**. * @retun the time from displaystring. */.public string gettime().{.    return displaystring;.}../**. * the updated display . */.private void updatedisplay().{.    if(hours.getvalue() &lt; first_evening_hour){.        displaystring = hours.getdisplayvalue() + "":"" +.        minutes.getdisplayvalue() + "" am"";.    }..    else if(hours.getvalue() &gt; first_evening_hour &amp;&amp; hours.getvalue() &lt;last_evening_hour){.        displaystring = integer.tostring(hours.getvalue() - first_evening_hour) + "":"" + .        minutes.getdisplayvalue() + "" pm"";.    }.    else if(hours.getvalue() == midnight_hour){.        hours.setvalue(first_evening_hour); .        displaystring = hours.getdisplayvalue() + "":""+.        minutes.getdisplayvalue() + "" am (midnight)"";    .    }  .    else{.        hours.setvalue(first_evening_hour);.        displaystring = hours.getdisplayvalue() + "":"" + .        minutes.getdisplayvalue() + "" pm (noon)"";.    }.}.}"
