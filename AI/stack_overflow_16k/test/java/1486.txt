"does jpa not preserve order in which em.persist() is called? just noticed something interesting here. if i run the following piece of code, by calling the flush only at the end of the list, jpa appears to be inserting the objects in random order into the database. the reason i can tell is because i have the database to create the identity column. and the object sequence id doesn't correspond to the order of the identity column. ..public void persistlist(list&lt;object&gt; objectlist) {.for (object object : objectlist) {.    em.persist(object);.}        .    em.flush().}...however, if i run the following code it works. all i did is added the em.flush() at immediately after each em.persist(). has anyone run into this issue before? ..public void persistlist(list&lt;object&gt; objectlist) {.for (object object : objectlist) {.    em.persist(object);.    em.flush();...  }        ..}...for example, objectlist has object1,objec2,object3. so theoretically, the sequence inserted to database should be object1,then object2, then object3. however, sometimes it doesn't."
