"how to run command line within blank using thread async i am new to blank. i am tasked to write blank program to run the command lines. i tested the command line under the dos prompt since i do not have have access to linux box yet. it worked fine. see the program below for full command line syntax. the job will take 6 input files and generate some output files. next i tried to create a class to and using  getruntime and process to process this job. even it compiled without error but when i run it just show the cursor blinking... i thought i need to use thread async technique. please provide some advices since i do not have enough time for the projects. i also would like to implement a call back or return values when the job is done. an example would be greatly appreciated. thanks ..import blank.io.*;. public class runjob {.. // public static final string program = ""c:\wrk\blank.exe hello"";..//one command line below. public static final string program = ""c:/blank.exe -cp ""wrk/jmp.jar;wrk/colt.jar""   gov.lanl.yadas.reliability.ultimatemissilereliabilitymodel 10000 ""wrk/"" x1.dat x2c.dat x3.dat   x4.dat x5.dat x6.dat true"";.. //  set to true to end the loop . static boolean done = false;..public static void main(string argv[]) throws ioexception {..    bufferedreader is;   .    string line;.    string returnmsg = ""start "";.    final process p = runtime.getruntime().exec(program);.     system.out.println(""start"");...    thread waiter = new thread() {.      public void run() {.        try {.          p.waitfor();.        } catch (interruptedexception ex) {.        system.out.println(""interruptedexception"");.          return;.        }.        system.out.println(""program terminated!"");.        done = true;.      }.    };.    waiter.start();.   is = new bufferedreader(new inputstreamreader(p.getinputstream()));..    while (!done &amp;&amp; ((line = is.readline()) != null)).      {.      system.out.println(line);.      returnmsg = returnmsg + line;      .      } .      system.out.println(returnmsg);.        system.out.println(""end"");..     return;.  }// main...}"
