"how to write algorithm to sort an array in ascending order and also measure the running time? i am on the halfway to complete a project and i can't reach my final destination. basically i have to complete the console application and in my codes there are lot of commented off lines what gives the instruction to complete it...i have the following requirements for the project:...sort the arrays which the names are starting with “sortme…”, and .measure the running time for sorting each of the arrays separately. sort .should be ascending..find the minimum in any chosen array (sorted or unsorted) and measure .the running time..find number of occurrences of a specific number in any chosen array .(sorted or unsorted) and measure the running time. .print out the content of a chosen array. ...5.quit!  ..codes for the main class:..    /*. * to change this template, choose tools | templates. * and open the template in the editor.. */..package da522b_lab3_2013;..import blank.io.bufferedreader;.import blank.io.fileinputstream;.import blank.io.ioexception;.import blank.io.inputstreamreader;.import blank.util.scanner;../**. * @author stranger. * kristianstad university. */..public class main {...    //declaration.    scanner myscanner;..    int[] sortmehundredarr;.    int[] sortmetenthousandarr;.    int[] sortmemillionarr;..    int[] unsortedhundredarr;.    int[] unsortedtenthousandarr;.    int[] unsortedmillionarr;.    //you can have a currentarray variable here..    boolean firsttime;.    boolean sorted; //you can use the boolean firsttime instead...    /** creates a new instance of main */.    public main() {..        //initialization.        myscanner = new scanner(system.in);..        sortmehundredarr = new int[100];.        sortmetenthousandarr = new int[10000];.        sortmemillionarr = new int[1000000];..        unsortedhundredarr = new int[100];.        unsortedtenthousandarr = new int[10000];.        unsortedmillionarr = new int[1000000];..        firsttime = true;..        //the method fills the arrays with the numbers form  ""milliion.txt"""".        fillallarrays();..        //the arrays are identical before the user sort them, after sorting they are different in the order of contents.    }//end of constructor..    public void mymainmethod(){.        while(true){.            printmenu();.            //only accepts numbers in range of signed integers. it does not take care of entries other than those numbers..            switch(myscanner.nextint()){.                case 1:.                    system.out.println(""i'll write the code to sort three arrays which their names started with sortme..."");.                    //write a separate class and some code here and sort the numbers ascending.                    sortingarray sa=new sortingarray();//i am not sure about it's accuracy.                    // - sortmehundredarr.                    sa.arraysortinghundred(sortmehundredarr);//i am not sure if this line is placed in the correct way.                    // - sortmetenthousandarr.                    sa.arraysortingtenthousand(sortmetenthousandarr);//i am not sure if this line is placed in the correct way.                    // - sortmemillionarr.                    sa.arraysortingonemillion(sortmemillionarr);//i am not sure if this line is placed in the correct way.                    //do not forget running time measurement sepaerately for each array.                    firsttime = false;.                    break;..                case 2:.                    //use ""boolean sorted"" in line 35 to prevent being activated before sorting.                    choosearraymenu();..                    system.out.println(""i'll write the code to find the minimum in the chosen array "");.                    //write the code of finding minimum, better to implement method(s)/class(es).                    //the user should have the option to choose any of the sortme... or unsorted... arrays at a time.                    //do not forget running time measurement.                    break;..                case 3:.                    //use ""boolean sorted"" in line 35 to prevent being activated before sorting.                    choosearraymenu();..                    system.out.println(""i'll write the code to find how many times a specific number is repeated in the chosen array"");.                    //write the code of finding number of occurrences, better to implement method(s)/class(es).                    //the user should have the option to choose any of the sortme... or unsorted...  arrays at a time.                    //do not forget running time measurement.                    break;..                case 4:.                    //use ""boolean sorted"" in line 36 to prevent being activated before sorting.                    choosearraymenu();..                    system.out.println(""i'll write the code to print out the content of a chosen array"");.                    system.out.println(""array with one million integers may take long time to print out"");.                    break;..                case 5:.                    system.out.println(""welcome back"");.                    system.exit(0);.                    break;..                default:.                    system.out.println(""the input is out of range"");.                    break;.            } //end of switch.        } //end of while loop.    } //end of mymainmethod method...    private string printarray(){.        return null; //null should be changed by you.    } //end of printarray method......    public static void main(string[] args) {.        //one easy way to get rid of static keyword in main method.        main m1 = new main();.        m1.mymainmethod();.    }....    private void fillallarrays(){..        writetoarrayfromfile(""million.txt"", sortmehundredarr);.        writetoarrayfromfile(""million.txt"", sortmetenthousandarr);.        writetoarrayfromfile(""million.txt"", sortmemillionarr);..        writetoarrayfromfile(""million.txt"", unsortedhundredarr);.        writetoarrayfromfile(""million.txt"", unsortedtenthousandarr);.        writetoarrayfromfile(""million.txt"", unsortedmillionarr);.    } //end of fillallarrays method..    public void writetoarrayfromfile(string filename, int[] inputarr) {.        int temp = inputarr.length;.        string s;.        try{.            bufferedreader b = new bufferedreader(new inputstreamreader(new fileinputstream(filename)));.            while (temp&gt;0) {.                s = b.readline();.                if (s == null) break;.                inputarr[inputarr.length-temp--] = integer.parseint(s);.            }//end of try.            b.close();.        } catch (ioexception ex) {.            system.out.println(ex.getmessage());.        }  //end of catch.    }//end of writetoarrayfromfile method..    private void choosearraymenu(){.        system.out.println(""enter a number between 1 to 6"");..        system.out.println(""1. sorted array containing 100 integers"");.        system.out.println(""2. sorted array containing 10,000 integers"");.        system.out.println(""3. sorted array containing 1,000,000 integers"");.        system.out.println(""4. unsorted array containing 100 integers"");.        system.out.println(""5. unsorted array containing 10,000 integers"");.        system.out.println(""6. unsorted array containing 1,000,000 integers"");..    } //end of choosearraymenu..    private  void printmenu() {.        if(firsttime){.            system.out.println(""nn***** welcome to our application *****"");.            system.out.println(""******* please follow the menu *******"");.            system.out.println(""n**** main menu ****"");..            system.out.println(""select 1 or 5"");.            system.out.println(""1. sort"");.            system.out.println(""2. (unavailabe before sorting) find minimum"");.            system.out.println(""3. (unavailabe before sorting) find number of occurrences"");.            system.out.println(""4. (unavailabe before sorting) print out one array"");.            system.out.println(""5. quit"");.        } //end of if..        else{.            system.out.println(""n**** main menu ****"");.            system.out.println(""select a number between 1 to 5"");.            system.out.println(""1. sort"");.            system.out.println(""2. find minimum"");.            system.out.println(""3. find number of occurrences"");.            system.out.println(""4. print out one array"");.            system.out.println(""5. quit"");..        } //end of else.    } //end of printmenu method...}...codes for the arraysorting class:..    /*. * to change this template, choose tools | templates. * and open the template in the editor.. */.package da522b_lab3_2013;../**. *. * @author jabir al fatah. */.public class sortingarray {.    public int[] arraysortinghundred(int[] sortmehundredarr){.    int hundredarrl=sortmehundredarr.length;.        int temp;.        for(int i=0;i&lt;hundredarrl;i++){.            for(int j=(hundredarrl-1);j&gt;=(i+1);j--){.                if(sortmehundredarr[j]&lt;sortmehundredarr[j-1]){.                    temp=sortmehundredarr[j];.                    sortmehundredarr[j]=sortmehundredarr[j-1];.                    sortmehundredarr[j-1]=temp;..                }.                return sortmehundredarr;.            }.        }.        return null;.        }.     public int[] arraysortingtenthousand(int[] sortmetenthousandarr){.         int tenthousandarrl=sortmetenthousandarr.length;.         int temp;.          for(int i=0;i&lt;tenthousandarrl;i++){.            for(int j=(tenthousandarrl-1);j&gt;=(i+1);j--){.                if(sortmetenthousandarr[j]&lt;sortmetenthousandarr[j-1]){.                    temp=sortmetenthousandarr[j];.                    sortmetenthousandarr[j]=sortmetenthousandarr[j-1];.                    sortmetenthousandarr[j-1]=temp;.     }.    return sortmetenthousandarr;.}.          }.        return null;..     }.     public int[] arraysortingonemillion(int[] sortmemillionarr){.         int millionarrl=sortmemillionarr.length; .         int temp;.          for(int i=0;i&lt;millionarrl;i++){.            for(int j=(millionarrl-1);j&gt;=(i+1);j--){.                if(sortmemillionarr[j]&lt;sortmemillionarr[j-1]){.                    temp=sortmemillionarr[j];.                    sortmemillionarr[j]=sortmemillionarr[j-1];.                    sortmemillionarr[j-1]=temp;.     }.    return sortmemillionarr;.}..     }.   return null;.}.}...i would be very greatful if i get help from you."
