"blank map object, objects represented as a map i'm considering using a different representation of an object in blank to allow more flexibility.  the biggest need i have is to dynamically pass data through the system to be handled with script engine at some point in the system...my question is whether it's a bad idea to represent an object purely as a map&lt;string, object&gt; for example if i was to go forward with it am i creating some serious issues for myself in the future? is it inherently a bad idea to do this and why? etc.....for example i could implement it kind of like this..public class foo {.   private final map&lt;string, object&gt; data;..   public foo ().   {.      this.data = new hashmap(); .   }..   public string getproperty1() { return this.data.get(""property1""); }.   public int getproperty2() { return this.data.get(""property2""); }.   public object getdynamicdata(string key) { return this.data.get(key); }..   //use builder to set properties in data and create the foo object....}...there's other things i've done in playing with this like using a second object called foofields that holds the types of known properties and keys to make things a little bit better for lookup. but i've already seen some issues with doing this in general. ...it definitely adds complexity vs pojo.it's more difficult to transition the object to a ui layer or db layer.despite building it with foofields to give me compile time error checking there's still some cases where i can get runtime errors...another solution could be..public class foo {.   private final string property1;.   private final int property2;.   private final map&lt;string, object&gt; dynamicdata;..   public foo (string property1, int property2, map&lt;string, object&gt; data).   {.      this.property1 = property1;.      this.property2 = property2;.      this.dynamicdata = data;.   }..   public string getproperty1() { return this.property1; }.   public int getproperty2() { return this.property2; }.   public object getdynamicdata(string key) .   { .       return this.dynamicdata.get(key); .   }.}"
