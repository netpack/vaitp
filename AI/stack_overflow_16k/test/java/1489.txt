"blank scope: returning an object instantiated inside a method - is it dangerous? i'm a student in blank class and learned something about blank today that made my gears turn. when i asked the teacher how and why, he wasn't sure about the behavior. can anyone explain why the following example works?..class example {.    public int ex_val;..    public example (int a) {.        this.ex_val = a;.    }..    public int getexval () {.        return this.ex_val;.    }.}...if i were to create an instance of ""example"" inside a method of another class and ""return"" the object, it can successfully make the jump out of it's original scope and be used subsequently...class parentobject {.    // instance variables    .    public example a;..    public parentobject (int number) {.        // initialize instance variable object from out-of-scope instantiation.        this.a = genexample(number);..        // verify scope creep.        system.out.println(this.a.getexval());.    }..    public example genexample (int a) {.        return new example(a);.    }.}...this does work, but is this behavior stable? can i count on this? can the garbage collector jump in between the return statement of one method and assignment statement of the calling function? am i running the risk of failure based on my os's version of the jvm? this seems like handy functionality if it can be relied upon."
