"blank: strategy for limiting scope of a variable i just stumbled over an error and asking myself if there is a better way do do it...first i had this code...// read lines out of a file and do something with it in foo.bufferedreader br = new bufferedreader (new filereader (""bla.txt"")); .string line; .while ((line = br.readline ()) != null) .{.  foo (line);.}.br.close ();...then i changed it. introduced a list instead of working in the read-loop...bufferedreader br = new bufferedreader (new filereader (""bla.txt"")); .list &lt;string&gt; lst = new arraylist &lt;string&gt; ();.string line; .while ((line = br.readline ()) != null) .{.  lst.add (line);.}.br.close ();.for (string s : lst).{.  foo (line);   // !!!.}...please ignore the fact that is is not a real optimization. the code is just a simplification for my question...in using the collection i did a mistake. i did keep foo(line) instaed of foo(s)..thats no compiler error but wrong for my algorithm...whats a good strategy for avoiding this problem if making it more modular (using functions etc.) is not apropriate?..i thougt about limit the scope of line by putting it into a block...bufferedreader br = new bufferedreader (new filereader (""bla.txt"")); .list &lt;string&gt; lst = new arraylist &lt;string&gt; ();..{.  string line; .  while ((line = br.readline ()) != null) .  {.    lst.add (line);.  }.  br.close ();.}..for (string s : lst).{.  foo (line);   // error now.}...but i am not sure thats a common and good strategy. any suggestions for that kind of problem? thanks!"
