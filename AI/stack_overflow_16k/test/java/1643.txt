"producer consumer problem public class main {.public static void main(string[] args){.    xclass x = new xclass();.    producex prodx = new producex(x);.    printx printx = new printx(x);..    prodx.start();.    printx.start();.}.}.class xclass {.private int x;.private boolean produced = false;..public xclass(){.    this.x = 0;.}.public synchronized int modifyx(){.    while(produced==true){.        try{.            wait();.        }.        catch(interruptedexception ie){}.    }.    x=x+1;.    produced = true;.    notifyall();.    return x;..}.public synchronized void printx(){.    while(produced==false){.        try{.            wait();.        }.        catch(interruptedexception ie){}.    }.    produced = false;.    system.out.println(thread.currentthread().getname()+"" prints ""+x);.    notifyall();.}..}.class printx extends thread{.private xclass x;.public printx(xclass x){.    this.x = x;.}.public void printx(){.    for(int i=0;i&lt;10;i++){.        x.printx();.    }.}.}.class producex extends thread{.private xclass x;.public producex(xclass x){.    this.x = x;.}.public void run(){.    for(int i=0;i&lt;10;i++){.        x.modifyx();.        system.out.println(thread.currentthread().getname()+"" increases x   to ""+ x.modifyx());.    }.}.}...the problem is similar to producer consumer. here producex will increase x by 1, and will increase again until x is printed by printx. but, seems no result. where is the bug?"
