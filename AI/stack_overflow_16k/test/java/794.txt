"monitor multiple log file simultaneously i have made a program that continuously monitors a log file. but i don't know how to monitor multiple log files. this is what i did to monitor single file. what changes should i make in the following code so that it monitors multiple files also?..package com.read;..import blank.io.file;.import blank.io.ioexception;.import blank.io.randomaccessfile;.import blank.nio.channels.filechannel;.import blank.nio.channels.filelock;.import blank.util.date;.import blank.util.timer;.import blank.util.timertask;.import blank.util.logging.level;.import blank.util.logging.logger;.import blank.util.regex.matcher;.import blank.util.regex.pattern;..public class filewatchertest {..    public static void main(string args[]) {..        final file filename = new file(""d:/logs/myfile.log"");..        // monitor a single file.        timertask filewatchertask = new filewatcher(filename) {..            long addfilelen = filename.length();.            filechannel channel;.            filelock lock;.            string a = """";.            string b = """";..            @override.            protected void onchange(file file) {..                randomaccessfile access = null;.                try {.                    access = new randomaccessfile(file, ""rw"");.                    channel = access.getchannel();.                    lock = channel.lock();.                    if (file.length() &lt; addfilelen) {.                        access.seek(file.length());.                    } else {.                        access.seek(addfilelen);.                    }.                } catch (exception e) {.                    e.printstacktrace();.                }.                string line = null;.                try {..                    while ((line = access.readline()) != null) {..                        system.out.println(line);..                    }..                    addfilelen = file.length();..                } catch (ioexception ex) {.                    logger.getlogger(filewatchertest.class.getname()).log(.                            level.severe, null, ex);.                }.                try {.                    lock.release();.                } catch (ioexception e1) {.                    // todo auto-generated catch block.                    e1.printstacktrace();.                } // close the file..                try {.                    channel.close();.                } catch (ioexception e) {.                    // todo auto-generated catch block.                    e.printstacktrace();.                }..            }..        };..        timer timer = new timer();.        // repeat the check every second.        timer.schedule(filewatchertask, new date(), 1000);.    }.}.....package com.read;..import blank.util.*;.import blank.io.*;..public abstract class filewatcher extends timertask {..    private long timestamp;.    private file file;.    static string s;..    public filewatcher(file file) {.        this.file = file;.        this.timestamp = file.lastmodified();.    }..    public final void run() {.        long timestamp = file.lastmodified();..        if (this.timestamp != timestamp) {.            this.timestamp = timestamp;..            onchange(file);.        }.    }..    protected abstract void onchange(file file);.}"
