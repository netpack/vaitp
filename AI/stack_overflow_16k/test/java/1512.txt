"why does classloader load only the main class but not any other referenced class? say i have the following:..public class foo {.    static {.       system.out.println(""foo static initialization is working"").    }..    public void sayhello {.       system.out.println(""hello foo"").    }.}..public class bar {.    static {.       system.out.println(""bar static initialization is working"").    }..    public void sayhello {.       system.out.println(""hello bar"").    }.}..public class hellomain {.     public static void main() {.       foo foo  = new foo();.       foo.sayhello();.       bar bar  = new bar();.       bar.sayhello();.     } .}...here is my custom classloader:..public class myclassloader extends classloader {.    public myclassloader() {.        super(myclassloader.class.getclassloader());.    }..    public myclassloader(classloader parent){.        super(parent);.    }..    public class loadclass(string name) throws classnotfoundexception {.        system.out.println(name + "" ************""); // why foo and bar are not coming through here?.        return super.loadclass(name);..    }.}...say i package all this as jar and the name of my jar file be ""hello.jar"".and run the following command:..blank -dblank.system.class.loader=myclassloader -jar hello.jar...it prints all the standard blank class as well as hellomain class from the code above however the foo and bar classes are not getting printed. i wonder why? also, how can i change something so that the print statement in myclassloader prints foo and bar classes?"
