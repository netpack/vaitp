"how to force override method and call super at the same time ok, so recently i wanted to implement the following..public enum objecttypes {.    string,.    integer.}..interface iobjectenhancer{.    void enhance(string s);.    void enhance(integer i);.    objecttypes getlastenhancedtype();.}..class objectenhancer implements iobjectenhancer{.    objecttypes lastusedtype=null;..    @callsuper.    @override.    public void enhance(string s) {.        this.lastusedtype=objecttypes.string;.    }..    @callsuper.    @override.    public void enhance(integer i) {.        this.lastusedtype=objecttypes.integer;.    }..    @override.    final public objecttypes getlastenhancedtype() {.        return lastusedtype;.    }.}..class objectenhancerchild extends objectenhancer{.    @override.    public void enhance(string s) {.        super.enhance(s);.        //child code.    }..    @override.    public void enhance(integer i) {.        super.enhance(i);.        //child code.    }.}...and for safety i wanted to add @callsuper because i really want only the parent to remember the types but i also want the enhance(string) and enhance(integer) to be abstract so that no clumsy future person (me included) forgets to actually implement these methods...so below is a method to handle this sort of situation that apparently only i am having and the internet doesn't really have advice on, it might seem stupid to worry about such a small thing but if you have 10+ methods it stars becoming a nightmare(feedback and other solutions welcome):"
