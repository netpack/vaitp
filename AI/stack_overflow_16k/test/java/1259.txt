"non-static initializer blocks - do i have a bit more control? i am still on a learning curve in blank. to understand a bit more of initializer blocks i created a small test class:..public class script {..    {.        gadgets.log(""anonymous 1"");.    }..    public script() {.        gadgets.log(""constructor"");.    }..    {.        gadgets.log(""anonymous 2"");.    }.}...when i create an instance, i get this log:..script: anonymous 1.script: anonymous 2.script: constructor...this tells me, both initializer blocks run before the constructor, in the order they appear in the source code (same as static initializers)..what i want to know is: do i have a little more control over this behavior?.because blank documentation says (source):...  initializer blocks for instance variables look just like static.  initializer blocks, but without the static keyword:...{.     // whatever code is needed for initialization goes here .}....  the blank compiler copies initializer blocks into every constructor. therefore,.  this approach can be used to share a block of code between multiple.  constructors....so what exactly does ""copies initializer blocks into every constructor"" mean? according to my log, it seems, they are copied at the beginning of each constructor. is this right?..sharing such blocks between multiple constructors would also make perfectly sense, if they were copied to the end of each constructor (that's what i expected in my anonymous 2)..is there a way to control those blocks a bit more or is my only option the ""classic"" way of writing a named method that gets called in every constructor if i want to do common tasks at the end of each constructor?"
