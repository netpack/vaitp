"accessing parent class's original method after overriding it in subclass #solved edit: i was still sleepy from getting up and just didn't pay atttention as to how i called the methods in the main class. everything actually works, thanks..i have a circle class with a getarea method..public class circle {.    private double radius;..   public circle(double radius){.       radius = (( radius &lt; 0 )) ? 0 : radius;.       this.radius=radius;.   }..    public double getradius() {.        return radius;.    }..    public double getarea() {.       return (radius*radius*math.pi);.    }.}...additionally, i have a cylinder class. ..in the cylinder class, i would like to override the getarea method, while still being able to access the circle class's getarea method in order to calculate the volume...public class cylinder extends circle{.    private double height;..    public cylinder(double radius, double height){.        super(radius);.        height = (( height &lt; 0 )) ? 0 : height;.        this.height=height;.    }..    public double getheight() {.        return height;.    }..    public double getvolume() {.        return (super.getarea()*height);.    }..    @override.    public double getarea() {.        return (2*math.pi*getradius()*height);.    }.}...expected result:..due to the 'super.' before the getarea method inside the getvolume method, the getvolume method would call the original getarea method (as if i had not overridden it)..actual result:..it doesn't matter whether there is a 'super.' before the getarea method or not, the overridden method is always called, leading to a false volume calculation...is there a way to call the not overridden version of the getarea method after overriding it?"
