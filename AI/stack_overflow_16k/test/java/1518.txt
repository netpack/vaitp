"blank-accessing value of parent class from child class hey i am trying to figure a confusion with accessing a variable's value from parent class in child class...scenario #1..below is the code for the class drawingpanel():   ..public class drawingpanel extends jpanel implements mouselistener.{.    private arraylist&lt;balloon&gt; balloons;.    private balloon activeballoon;.    private boolean picked;.    private int offsetx, offsety;.    private double offsetr;.    int rotate;..    // constructor:.    public drawingpanel().    {.        setbackground(color.white);.        addmouselistener(this);.        balloons = new arraylist&lt;balloon&gt;();.        activeballoon = null;.        picked = false;.        rotate = 0;.    }..    // called from controlpanel when the ""add balloon"" button is clicked..    // places a new balloon with a random radius and the current color.    // at the center of the drawing panel..    public void addballoon(int shape).    {.        int w = getwidth();.        int h = getheight();.        int radius = 10 + (int) (math.random() * w / 2);.        switch (shape).        {.        case 1:.            activeballoon = new squareballoon(w / 2, h / 2, radius);.            break;.        default:.            activeballoon = new squareballoon(w / 2, h / 2, radius);.            break;.        }.        balloons.add(activeballoon);.        repaint();.    }..    // repaints this panel. if activeballoon is set, paints it on top..    @override.    public void paintcomponent(graphics g).    {.        super.paintcomponent(g);.        for (balloon b : balloons).        {.            if (!picked || b != activeballoon).            {.                b.draw(g, true);.            }..        }.        if (picked &amp;&amp; activeballoon != null).            activeballoon.draw(g, false);.    }..    // called when the mouse is clicked on the drawing panel..    // if inside a balloon, makes it ""active"", remembers the offsets.    // of the click from the center..    // if on the border of a balloon, makes it ""active"", remembers the.    // distance of the click from the center..    @override.    public void mousepressed(mouseevent e).    {.        // value for parameter rotate is set here on mouse click.        rotate = 2;.        int x = e.getx();.        int y = e.gety();.        picked = false;.        for (int k = balloons.size() - 1; k &gt;= 0 &amp;&amp; !picked; k--).        {.            balloon b = balloons.get(k);.            if (b.isinside(x, y)).            {.                picked = true;.                offsetx = x - b.getx();.                offsety = y - b.gety();.                activeballoon = b;..            } else if (b.isonborder(x, y)).            {.                picked = true;.                offsetr = b.distance(x, y) - b.getradius();.                activeballoon = b;.            }.        }.        if (picked).            repaint();.    }..    // ""drops"" the picked balloon, if any..    @override.    public void mousereleased(mouseevent e).    {.    }..    // not used:.    @override.    public void mouseentered(mouseevent e).    {.    }..    @override.    public void mouseexited(mouseevent e).    {.    }..    @override.    public void mouseclicked(mouseevent e).    {.    }.}...below is the squareballoon() class which inherits the parent class balloon. the balloon class inherits the drawingpanel() class...public class squareballoon extends balloon implements mouselistener.{.    public squareballoon().    {.    }..    /**.     * constructs a balloon with a given center, radius and color.     * .     * @param x.     *            x-coordinate of the center.     * @param y.     *            y-coordinate of the center.     * @param r.     *            radius of the balloon.     */.    public squareballoon(int x, int y, int r).    {.        super(x, y, r);.    }..    /**.     * draws a solid circle if makeitfilled is true and outline only if.     * makeitfilled is false.     * .     * @param g.     *            graphics context.     * @param makeitfilled.     *            draws a solid circle if true.     */.    @override.    public void draw(graphics g, boolean makeitfilled).    {.        graphics2d g2d = (graphics2d) g;.        g.setcolor(color);.        system.out.println(""this is the value of rotate"" + rotate + ""from the draw() method of squareballoon() class."");.        if (makeitfilled).        {.            rectangle rect2 = new rectangle(xcenter - radius, ycenter - radius, radius, radius);.            if (rotate == 2).            {.                system.out.println(""this is the value of rotate"" + rotate.                        + ""from the makeditfilled if statement in draw() method of squareballoon() class."");.                g2d.rotate(45 * (math.pi / 180));.            }.            g2d.fill(rect2);..        } else.        {.            rectangle rect2 = new rectangle(xcenter - radius, ycenter - radius, radius, radius);.            if (rotate == 2).            {.                system.out.println(""this is the value of rotate"" + rotate.                        + ""from the other if statement in draw() method of squareballoon() class."");.                g2d.rotate(45 * (math.pi / 180));.            }.            g2d.draw(rect2);..        }.    }..}...scenario #2..below is the code for the class drawingpanel():..public class drawingpanel extends jpanel implements mouselistener.{.    private arraylist&lt;balloon&gt; balloons;.    private balloon activeballoon;.    private boolean picked;.    private int offsetx, offsety;.    private double offsetr;.    int rotate;..    // constructor:.    public drawingpanel().    {.        setbackground(color.white);.        addmouselistener(this);.        balloons = new arraylist&lt;balloon&gt;();.        activeballoon = null;.        picked = false;.        rotate = 0;.    }..    // called from controlpanel when the ""add balloon"" button is clicked..    // places a new balloon with a random radius and the current color.    // at the center of the drawing panel..    public void addballoon(int shape).    {.        int w = getwidth();.        int h = getheight();.        int radius = 10 + (int) (math.random() * w / 2);.        switch (shape).        {.        case 1:.            activeballoon = new squareballoon(w / 2, h / 2, radius);.            break;.        default:.            activeballoon = new squareballoon(w / 2, h / 2, radius);.            break;.        }.        balloons.add(activeballoon);.        repaint();.    }..    // repaints this panel. if activeballoon is set, paints it on top..    @override.    public void paintcomponent(graphics g).    {.        // to restore original angle of balloon objects.        if (rotate &gt; 2).            rotate = 0;.        super.paintcomponent(g);.        for (balloon b : balloons).        {.            if (!picked || b != activeballoon).            {.                b.draw(g, true, rotate);.            }..        }.        if (picked &amp;&amp; activeballoon != null).            activeballoon.draw(g, false, rotate);.    }..    // called when the mouse is clicked on the drawing panel..    // if inside a balloon, makes it ""active"", remembers the offsets.    // of the click from the center..    // if on the border of a balloon, makes it ""active"", remembers the.    // distance of the click from the center..    @override.    public void mousepressed(mouseevent e).    {.        // value for parameter rotate is set here on mouse click.        rotate++;.        int x = e.getx();.        int y = e.gety();.        picked = false;.        for (int k = balloons.size() - 1; k &gt;= 0 &amp;&amp; !picked; k--).        {.            balloon b = balloons.get(k);.            if (b.isinside(x, y)).            {.                picked = true;.                offsetx = x - b.getx();.                offsety = y - b.gety();.                activeballoon = b;..            } else if (b.isonborder(x, y)).            {.                picked = true;.                offsetr = b.distance(x, y) - b.getradius();.                activeballoon = b;.            }.        }.        if (picked).            repaint();.    }..    // ""drops"" the picked balloon, if any..    @override.    public void mousereleased(mouseevent e).    {.    }..    // not used:.    @override.    public void mouseentered(mouseevent e).    {.    }..    @override.    public void mouseexited(mouseevent e).    {.    }..    @override.    public void mouseclicked(mouseevent e).    {.    }.}...below is the squareballoon() class which inherits the parent class balloon. the balloon class inherits the drawingpanel() class...public class squareballoon extends balloon implements mouselistener.{.    public squareballoon().    {.    }..    /**.     * constructs a balloon with a given center, radius and color.     * .     * @param x.     *            x-coordinate of the center.     * @param y.     *            y-coordinate of the center.     * @param r.     *            radius of the balloon.     */.    public squareballoon(int x, int y, int r).    {.        super(x, y, r);.    }..    /**.     * draws a solid circle if makeitfilled is true and outline only if.     * makeitfilled is false.     * .     * @param g.     *            graphics context.     * @param makeitfilled.     *            draws a solid circle if true.     * @param rotate.     *            receives rotate variable value set in mousepressed() method of.     *            drawingpanel() class.     */.    @override.    public void draw(graphics g, boolean makeitfilled, int rotate).    {.        graphics2d g2d = (graphics2d) g;.        g.setcolor(color);.        system.out.println(""this is the value of rotate"" + rotate + ""from the draw() method of squareballoon() class."");.        if (makeitfilled).        {.            rectangle rect2 = new rectangle(xcenter - radius, ycenter - radius, radius, radius);.            if (rotate == 2).            {.                system.out.println(""this is the value of rotate"" + rotate.                        + ""from the makeditfilled if statement in draw() method of squareballoon() class."");.                g2d.rotate(45 * (math.pi / 180));.            }.            g2d.fill(rect2);..        } else.        {.            rectangle rect2 = new rectangle(xcenter - radius, ycenter - radius, radius, radius);.            if (rotate == 2).            {.                system.out.println(""this is the value of rotate"" + rotate.                        + ""from the other if statement in draw() method of squareballoon() class."");.                g2d.rotate(45 * (math.pi / 180));.            }.            g2d.draw(rect2);..        }.    }..}...can someone please explain why in scenario #1, the change in value of variable int rotate after the mousepressed method initiates is not being passed to the subclasses of balloon class so that the if statements with condition  rotate == 2  in the draw method of class squareballoon executes? because in scenario #2 it does work...thank you!"
