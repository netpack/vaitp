"initializing an instance variable in both parent and child i have the following blank code..public class base {.    private static boolean goo = true;..    protected static boolean foo() {.        goo = !goo;.        return goo;.    }..    public string bar = ""base:"" + foo();..    public static void main(string[] args) {.        base base = new sub();.        system.out.println(base.bar);.    }.}..public class sub extends base {.    public string bar = ""sub:"" + foo();.}...and i'm asked what it would print. after testing this the answer seems to be base:false, but i'm really unable to understand why is it not sub:true...running through the debugger with a breakpoint on the final print i have the following object:...which shows base having two variables with the same name! one having the printed base:false and the other the expected (by me) sub:true. indeed foo() is called twice but each time instantiating a different variable? shouldn't the variable with the same name created in the subclass (and initialized after the first one is created) override the one in the parent class? how does blank choose which one to print?"
