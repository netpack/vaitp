"calculating hashcode of the key twice in hashmap i have been studying the internals of the hashmap implementation...for adding or getting value from map based on the key, it will calculate hashcode and then it finds bucket location (or table location/index, correct me if i am wrong)..but it is calculating the hash-code twice...in the below code snippet, key.hashcode() is native method in object class and then hash method is implemented in the same class..it is given in the comments of the hash method that why it is being calculated twice, which i could not understand...can any one please explain it briefly with a scenario?..int hash = hash(key.hashcode());../ * applies a supplemental hash function to a given hashcode, which.* defends against poor quality hash functions.  this is critical.* because hashmap uses power-of-two length hash tables, that.* otherwise encounter collisions for hashcodes that do not differ.* in lower bits. note: null keys always map to hash 0, thus index 0.           .*/.static int hash(int h) {.    // this function ensures that hashcodes that differ only by.    // constant multiples at each bit position have a bounded.    // number of collisions (approximately 8 at default load factor)..    h ^= (h &gt;&gt;&gt; 20) ^ (h &gt;&gt;&gt; 12);.    return h ^ (h &gt;&gt;&gt; 7) ^ (h &gt;&gt;&gt; 4);.}...thanks."
