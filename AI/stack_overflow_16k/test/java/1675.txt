"how to restrict object creation with certain dependency injection? i am creating custom logging functionalities class that internally uses the log4j. those classes that wants to used logging functionalities,it pass the name of class.i want to know how i am able to restrict object creation without passing the class-name to it.i tried but i am not sure that is it a correct way i did?....public class loggerobject .{.    private logger logger;.    private static loggerobject loggerobj;.    private constantdatamanager constantdatamanger;..    //default log4j_file path.    private loggerobject(string classname).    {.      try.      {.        domconfigurator.configure(this.getclass().getclassloader().getresource(constantdatamanger.log4j_file));.        logger =logger.getlogger(classname);.       }.      catch(exception ex).      {.          system.out.println(""domconfigurator could not find file""+ex.getmessage());.      }.    }..     public static loggerobject getlogger(string classname).        {.            if (loggerobj==null).            {.             loggerobj = new loggerobject(classname);.            }.             return loggerobj;.        }...    public void info(object message).    {.        logger.info(message);.    }..    public void info(object message, throwable t) {.        logger.info(message, t);.    }..    public void error(object message) {.         logger.error(message);.    }..    public void error(object message, throwable t) {.       logger.error(message,t);.    }..    public void debug(object message) {.       logger.debug(message);.    }..    public void debug(object message, throwable t) {.        logger.debug(message,t);.    }..    public void warn(object message) {.       logger.warn(message);.    }..    public void warn(object message, throwable t) {.       logger.warn(message,t);.    }..    public void fatal(object message) {.       logger.fatal(message);.    }..    public void fatal(object message, throwable t) {.        logger.fatal(message,t);.    }...thanks"
