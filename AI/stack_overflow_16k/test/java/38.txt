"what is the most efficient way to read the file using blank? i have one of a text files which contains 100 millions of records. i am using very old way to read the file but it took long time and unable to complete because of out of memory issue. i really appreciate if you can recommend best and optimum way to read file using blank or using whatever external library.(ultimate solution should be reduced the time consuming) here is my code as i explained above,..bufferedreader reader = null;..    list&lt;string&gt; filelines = new arraylist&lt;string&gt;();.    string line = """";.    reader = new bufferedreader(new blank.io.filereader(file));.    while ((line = reader.readline()) != null) {.        filelines.add(line);.    }.    reader.close();.    return filelines;...also used another way but result is same... public static void filereading(file file, object executingclass, string methodname, int size) throws ioexception {.    try {.        method method = executingclass.getclass().getmethod(methodname, list.class);..        bufferedreader reader = null;..        list&lt;string&gt; filelines = new arraylist&lt;string&gt;();.        string line = """";.        reader = new bufferedreader(new blank.io.filereader(file));.        int track = 0;.        while ((line = reader.readline()) != null) {.            track++;.            filelines.add(line);..            if (0 == track % size) {.                method.invoke(executingclass, filelines);.                filelines.clear();.            }.        }..        if (!filelines.isempty()) {.            method.invoke(executingclass, filelines);.            filelines.clear();.        }..        reader.close();...    } catch (nosuchmethodexception e) {.        e.printstacktrace();.    } catch (illegalaccessexception e) {.        e.printstacktrace();.    } catch (invocationtargetexception e) {.        e.printstacktrace();.    }.}"
