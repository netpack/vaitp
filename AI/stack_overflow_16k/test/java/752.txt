"how to require a parameter be of two types when passed to a method in blank in one class, i have to call a constructor of another class that needs two parameters, a ihelloserviceconnectionobserver and a contextwrapper. the problem is they're both this...note: contextwrapper is a framework class that i have no control over (android.content.contextwrapper, actually). my class (an android activity) is-a contextwrapper already, and i want to mix-in a little ihelloserviceconnectionobserverness to it...also note, my class is one of several classes that all inherit from contextwrapper, so combining contextwrapper and ihelloserviceconnectionobserer won't work...i could do this:..helloserviceconnection svc = helloserviceconnection(this,this);...calls..public helloserviceconnection(ihelloserviceconnectionobserver observer, contextwrapper contextwrapper){.    this.observer = observer;.    this.contextwrapper = contextwrapper;.}...but that looks silly. or i could do this:..helloserviceconnection svc = helloserviceconnection(this);...calls..public helloserviceconnection(ihelloserviceconnectionobserver observer){.    this.observer = observer;.    this.contextwrapper = (contextwrapper) observer;.}...but now i move a nice compile time error to a runtime error...what's the best practice here?..edit: well, i can't say it's a ""best practice"", but for my special set of circumstances, jon skeet has the right answer.  here's what the code ends up looking like:..helloserviceconnection = helloserviceconnection.create(this);...calls..public static &lt;t extends contextwrapper &amp; ihelloserviceconnectionobserver&gt; helloserviceconnection create(t value){.    return new helloserviceconnection(value, value);.}...which in turn calls..private helloserviceconnection(ihelloserviceconnectionobserver observer, contextwrapper contextwrapper){.    this.observer = observer;.    this.contextwrapper = contextwrapper;.}...so let me give a bit more context as to why this is the right answer for this special situation.  since contextwrapper is part of a framework that i don't control, i can't change it. because it's also an ancestor of several classes, any one of which i might want to use helloserviceconnection in, it doesn't really make sense to extend all the decendants of contextwrapper to add in ihelloserviceconnectionobserver...so i thought i was left will little choice but the this,this idom. jon's answer, once i understood it, saves the day!..thanks, jon -- and thanks to all who participated."
