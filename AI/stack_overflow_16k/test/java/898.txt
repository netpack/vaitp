"adding a condition to deletion of several bst nodes i finally got my bst working and its functions, although now i want to delete all nodes that have a key that is equal or less than 75. ..i tried to add the operation as: thetree.remove(key&lt;=75); and multiple other ways, i know the syntax to do such a thing is wrong but i can't seem to find relevant information online as to how to do it. any advice will help...code:..public class datostarea9 {..   node root;.   public void addnode(int key, string name) {.       node newnode = new node(key, name);..       if(root == null) {.           root = newnode;.       }.       else {.           node focusnode = root;.           node parent;.           while(true) {.               parent = focusnode;.               if(key &lt; focusnode.key) {.                      focusnode = focusnode.leftchild;.                      if(focusnode == null) {.                          parent.leftchild = newnode;.                          return;.           }.         }.               else {.                   focusnode = focusnode.rightchild;.                   if(focusnode == null) {.                       parent.rightchild = newnode;.                       return;.                   }.               }.       }.     }.   }..   public void inordertraversetree(node focusnode) {.       if(focusnode != null){.           inordertraversetree(focusnode.leftchild);.           system.out.println(focusnode);.           inordertraversetree(focusnode.rightchild);.       }.   }..   public boolean remove(int key) {.       node focusnode = root;.       node parent = root;..       boolean isitaleftchild = true;..       while (focusnode.key != key){.           parent = focusnode;.           if(key &lt; focusnode.key){.               isitaleftchild = true;..               focusnode = focusnode.leftchild;.           }.           else {.               isitaleftchild = false;.               focusnode = focusnode.rightchild;.           }.           if(focusnode == null).                   return false;.       }.       if (focusnode.leftchild == null &amp;&amp; focusnode.rightchild == null){.           if(focusnode == root){.               root = null;.           }.           else if(isitaleftchild){.               parent.leftchild = null;   .           }.           else {.               parent.rightchild = null;.           }.       }.       else if(focusnode.rightchild == null){.           if(focusnode == root).               root = focusnode.leftchild;.           else if(isitaleftchild).               parent.leftchild = focusnode.leftchild;.           else parent.rightchild = focusnode.leftchild;.       }.       else if(focusnode.leftchild == null){.           if(focusnode == root).               root = focusnode.rightchild;.           else if(isitaleftchild).               parent.leftchild = focusnode.rightchild;.           else.               parent.rightchild = focusnode.leftchild;.       }.       else {.           node replacement = getreplacementnode(focusnode);..           if(focusnode == root).               root = replacement;..               else if (isitaleftchild).                   parent.leftchild = replacement;.               else.                   parent.rightchild = replacement;.               replacement.leftchild = focusnode.leftchild;.           }.           return true;.       }...   public node getreplacementnode(node replacednode){.       node replacementparent = replacednode;.       node replacement = replacednode;..       node focusnode = replacednode.rightchild;..       while (focusnode != null){.           replacementparent = replacement;.           replacement = focusnode;.           focusnode = focusnode.leftchild;.       }.       if(replacement != replacednode.rightchild){.           replacementparent.leftchild = replacement.rightchild;.           replacement.rightchild = replacednode.rightchild;.       }.       return replacement;.   }..    public static void main(string[] args) {..       datostarea9 thetree = new datostarea9();.       thetree.addnode(82, ""jorge"");.       thetree.addnode(74, ""javier"");.       thetree.addnode(66, ""jose"");.       thetree.addnode(38, ""jaime"");.       thetree.addnode(94, ""andres"");.       thetree.addnode(88, ""alejandro"");.       thetree.addnode(42, ""adrian"");.       thetree.addnode(79, ""alan"");..       system.out.println(""remove all keys below 75"");.       thetree.remove(key&lt;=75);..       thetree.inordertraversetree(thetree.root);.    }.}..class node {.    int key;.    string name;..    node leftchild;.    node rightchild;..    node(int key, string name) {.        this.key = key;.        this.name = name;.    }.    public string tostring(){.        return name + "" has a key "" + key;.    }.}"
