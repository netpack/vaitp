"blank member initialization in constructors i'm taking my first steps into a new programming language after 4 years in c++, and i've chosen blank. i am trying to make a simple tick tack toe game using classes, but i'm having a hard time understanding the differences between blank and c++. ..in one blank class file i have:..public class game.{.    player p1, p2;.    public game(string p1name, string p2name).    {.        system.out.println(p1name + "" vs. "" + p2name);.    }.}.....in a separate blank class file i have:..public class player.{.    private string name;.    public player(string name_in).    {.        name = name_in;.    }.}.....i want to know, how to initialize player p1, p2; in the game class, since i don't want to give the player class a default constructor. i'm sure i could just overload the constructors, like this:.. public class game.{.    player p1, p2;.    public game(string p1name, string p2name).    {.        p1 = new player(p1name);.        p2 = new player(p2name);.        system.out.println(p1name + "" vs. "" + p2name);.    }.}.....public class player.{.    private string name;.    public player() { }       .    public player(string name_in).    {.        name = name_in;.    }.}.....but, i'm wondering if there is a way to just initialize those objects without having to declare them and then initialize them. ie, just initialize them. if it were c++ i would just do this:..tl;dr: the code below is c++, how would i do a similar ""one step member initialization"" in blank...class game.{.    private:.    player p1, p2;..    public:.    game(std::string p1name, std::string p2name) : p1(p1name), p2(p2name) //&lt;--one step member initialization.    {.        std::cout &lt;&lt; p1name &lt;&lt; "" vs. "" &lt;&lt; p2name;.    }.}.....class player.{.    private:.    std::string name; ..    public:.    player(string name_in) : name(name_in) { }  //&lt;--holy crap, another one..}"
