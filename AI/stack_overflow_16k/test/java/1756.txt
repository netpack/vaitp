"blank - volatile not working as expected i'm currently trying to attempting to study concurrency, specifically ""volatile"" keyword....  by declaring the counter variable volatile all writes to the counter variable will be written back to main memory immediately. also, all reads of the counter variable will be read directly from main memory. here is how the volatile declaration of the counter variable looks...and ...  when a thread writes to a volatile variable, then not just the volatile variable itself is written to main memory. also all other variables changed by the thread before writing to the volatile variable are also flushed to main memory. when a thread reads a volatile variable it will also read all other variables from main memory which were flushed to main memory together with the volatile variable....source : tutorials.jenkov.com | blank concurrency - blank volatile keyword..which makes me conclude/assume that any change that i make to a volatile variable will always be visible to all thread. so, i make a code to test it...testclass..package org.personal.test1;..class testclass {.    public static int w = 0;.    public static int x = 0;.    public static int y = 0;.    public static volatile int z = 0;.    private static final int iterations = 100000;...    public static void sooplus(int indents) {.        for (int i = 0; i &lt; testclass.iterations; i++) {.            testclass.w++;.            testclass.x++;.            testclass.y++;.            testclass.z++;.        }.    }..    public static void soominus(int indents) {.        for (int i = 0; i &lt; testclass.iterations; i++) {.            testclass.w--;.            testclass.x--;.            testclass.y--;.            testclass.z--;.        }.    }...    public static synchronized string getvariablevalues () {.        stringbuilder stringbuilder = new stringbuilder();.        stringbuilder.append(""("");.        stringbuilder.append(""w : ""+testclass.w+"", "");.        stringbuilder.append(""x : ""+testclass.x+"", "");.        stringbuilder.append(""y : ""+testclass.y+"", "");.        stringbuilder.append(""z : ""+testclass.z+"")"");.        return stringbuilder.tostring();.    }..}...main class..package org.personal.test1;../**. * &lt;ol type=""i""&gt;. *     &lt;li&gt;. *         &lt;a href=""http://tutorials.jenkov.com/blank-concurrency/volatile.html""&gt;jenkov.com - blank volatile keyword&lt;/a&gt;. *     &lt;/li&gt;. * &lt;/ol&gt;. */.public class main {..    public static void main(string[] args) {.        main.call1();.    }..    private static void call1() {.        main.test1();.    }..    private static void test1() {.        thread thread1 = new thread(""thread1"") {.            @override.            public void run() {.                testclass.sooplus(1);.            }.        };..        thread thread2 = new thread(""thread2"") {.            @override.            public void run() {.                testclass.soominus(4);.            }.        };..        thread1.start();.        thread2.start();..        try {.            thread1.join();.        } catch (interruptedexception e) {.            e.printstacktrace();.        }..        try {.            thread2.join();.        } catch (interruptedexception e) {.            e.printstacktrace();.        }..        system.out.println(testclass.getvariablevalues());..    }.}...the results that i get were not what i was expecting...what i get (varies)..(w : -2314, x : -1692, y : -1416, z : -1656)...what i'm expecting..(w : 0, x : 0, y : 0, z : 0)...or at least..(w : -2314, x : -1692, y : -1416, z : 0)...the questions...what did i assume/conclude wrong that resulted in a different output than expected?.was my testing methodology incorrect? if yes, then how can i fix it?.(optional) are there any good tutorial on blank concurrency that you recommend?...notes...i did attempt to read similar questions but i wasn't able to fully understand what the questioner was attempting to do in order to understand his problem."
