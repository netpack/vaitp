"implementing comparable<t> in a subclass let's suppose i have 3 classes like so:..rule.class:..public class rule {.    private string name;.    //getters &amp; setters.}...prioritizedrule.class:..public class prioritizedrule extends rule implements comaparable&lt;prioritizedrule&gt; {..     private int priority;..     @override.     public int compareto(prioritizedrule y) {.         return integer.compare(this.getpriority(), y.getpriority());.     }.     //getters &amp; setters.}...specificrule.class..public class specificrule extends prioritizedrule {.     private double specificvalue;.     //getters &amp; setters.}...is it considered bad practice to implement comparable in this subclass like that, since it's not necessarily guaranteeing that a specificrule compares consistent with equals? (which is recommended according to the blank documentation)"
