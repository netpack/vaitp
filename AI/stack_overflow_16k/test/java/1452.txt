"conceptual confusion about blank io read() from inputstream and write() function to outputstream i'm currently picking up on blank io functions and coding but am a little confused while reading through online tutorials. this is in reference to the question posted here: inputstream/outputstream read()/write() function relevance and usage..this seemed to hint that the difference between a basic write() function and the . write(byte[] bytes, int offset, int length) function is in its time efficiency, but i didn't quite get the meaning of that. ..in the tutorial, it was stated:..public int read(byte[] bytes, int offset, int length) throws ioexception.// read ""length"" number of bytes, store in bytes array starting from offset .of index...public int read(byte[] bytes) throws ioexception.// same as read(bytes, 0, bytes.length)...what exactly do these two lines of code do to illustrate what read() does in blank io? so does the first line read the length of the file's info or the file's actual info itself...to pile on more confusion, the write() function to outputstream was explained as follows:..""similar to the input counterpart, the abstract superclass outputstream declares an abstract method write() to write a data-byte to the output sink. write() takes an int. the least-significant byte of the int argument is written out; the upper 3 bytes are discarded. it throws an ioexception if i/o error occurs (e.g., output stream has been closed).""..does this mean the actual info is written in or the argument? kinda confused what the paragraph was trying to say...public void abstract void write(int unsignedbyte) throws ioexception..public void write(byte[] bytes, int offset, int length) throws ioexception.// write ""length"" number of bytes, from the bytes array starting from offset .of index...public void write(byte[] bytes) throws ioexception.// same as write(bytes, 0, bytes.length)...thanks in advance for any explanation on this."
