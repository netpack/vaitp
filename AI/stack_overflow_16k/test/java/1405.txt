"md5 being returned is the same even after digesting the files - blank i wrote the following blank method to read all the entries of a zipinputstream file and process its md5 based on file content only. inside my class tczip i have:.. public string digest( zipinputstream entry ) throws ioexception{..            byte[] digest = null;.            messagedigest md5 = null;.            string mdenc = """";.            zipentry current;..            try {.                md5 = messagedigest.getinstance( ""md5"" );.                if( entry != null ) {.                    while(( current = entry.getnextentry() ) != null ) {.                        if( current.isdirectory() ) {.                            digest = this.encodeutf8( current.getname() );.                            md5.update( digest );.                        }.                        else{.                            int size = ( int )current.getsize();.                            if(size &gt; 0){.                                digest = new byte[ size ];.                                entry.read( digest, 0, size );.                                md5.update( digest );.                            }.                        }.                    }.                    digest = md5.digest();.                    mdenc = new biginteger( 1, md5.digest() ).tostring( 16 );.                    entry.close();.                }.            }.            catch ( nosuchalgorithmexception e ) {.                // todo auto-generated catch block.                e.printstacktrace();.            }.            catch (illegalargumentexception ex){.                system.out.println(""there is an illegal encoding."");.                //.                // the fix for korean/chinese/japanese encodings goes here.                //.                charset encoding = charset.forname(""utf-8"");.                zipinputstream zipinputstream = .                        new zipinputstream(new fileinputstream( this.filename ), encoding);.                digest = new byte[ 1024 ];.                current = zipinputstream.getnextentry();.                while (current != null) { //for each entry to be extracted.                    string entryname = current.getname();.                    system.out.println(""processing: "" + entryname);.                    int n;.                    fileoutputstream fileoutputstream = .                            new fileoutputstream( this.filename );..                    while (( n = zipinputstream.read( digest, 0, 1024 )) &gt; -1) {.                        fileoutputstream.write(digest, 0, n);.                    }..                    fileoutputstream.close(); .                    zipinputstream.closeentry();.                    current = zipinputstream.getnextentry();.                }//while.                zipinputstream.close();.            }.            return mdenc;.        }..        public byte[] encodeutf8( string name ) {.            final charset utf8_charset = charset.forname( ""utf-8"" );.            return name.getbytes( utf8_charset );.        }...then the program would go over a root directory (aka c:workspacepathtosourcecode ), iterating over all the directories, looking for .zip files to be processed. these files go into file[] files:..public void showfiles( file[] files ){.        for( file file : files ){.            if( file.isdirectory() ) {.                showfiles( file.listfiles( this.filter ) );.            }.            else {.                try {.                    string path = file.getcanonicalpath();.                    string relative = path.replace(""tc10.0.0.2012080100_a"", ""tc10.0.0.2012080600_c"" );.                    file b = new file(relative);.                    if( b.exists() ) {.                        system.out.println( ""processing :"" + file.getname() );.                        this.zip_a = new tczip( path );.                        this.zip_b = new tczip( relative );.                        string md5_a = this.zip_a.digest();.                        string md5_b = this.zip_b.digest();.                        system.out.println(""md5 a: "" + md5_a);.                        system.out.println(""md5 b: "" + md5_b);..                        if( md5_a.equals( md5_b )){.                            system.out.println( ""they match"" );.                        }.                        else {.                            system.out.println( ""they don't match"" );.                        }.                    }.                } catch (ioexception e) {.                    // todo auto-generated catch block.                    e.printstacktrace();.                }.            }.        }.    }...so i wanted to process the md5 of all those zip files, and compare if they do match: two equal(in content) zip files are expected to have the same md5. if the file content is not the same, then the md5 would be different..however, when i execute the program, i have:..processing :web.zip.md5 a: d41d8cd98f00b204e9800998ecf8427e.md5 b: d41d8cd98f00b204e9800998ecf8427e.they match.processing :weldmgmt_icons.zip.md5 a: d41d8cd98f00b204e9800998ecf8427e.md5 b: d41d8cd98f00b204e9800998ecf8427e.they match.processing :weldmgmt_install.zip.md5 a: d41d8cd98f00b204e9800998ecf8427e.md5 b: d41d8cd98f00b204e9800998ecf8427e.they match.processing :weldmgmt_template.zip.md5 a: d41d8cd98f00b204e9800998ecf8427e.md5 b: d41d8cd98f00b204e9800998ecf8427e.they match...why do they same the same md5? i expect two files to have the same md5, but not all of them. any suggestions? what am i doing wrong?"
