"my 2d game, sokoban, is working, but i want to know if i improve the design i've made a sokoban with two classes, logic and sokobangui...basically, the logicpart builds an arraylist> from an input string array, f.ex:..string[] level1 = .              {""*###########*"",.               ""#           #"",.               ""#  ... ...  #"",.               ""#  *$$ $.$  #"",.               ""# $*+$ $*$$ #"",.               ""#  *$$ $.$  #"",.               ""#  ...  .   #"",.               ""#           #"",.               ""*###########*""};...where '+' is the player position...anyway, the arraylist is updated in the logic class as the game is played (player is moving, characters are interacting etc.)..the graphics part of the game is solved by assigning pictures to each character and looping through the arraylist>. then this is updated inn an infinite while-loop such that when the arraylist> is updated in the logic part, it is printed again...if this was difficult to follow, i've printed the code below...question1: i don't think this is the best way to output the game (with a while-lopp) as i am graphically outputting the game all the time, even when no changes have been made. how is this usually dealt with? is swing something that can help med with this?..question2: also, in the code below, i don't use the main method, i use the run(). the main method didn't like me making non-statical references, and run worked so i went with it... how am i supposed to use the main method to make the game work?..maybe it is easier to see my code:..logic class..package sokoban2;..import blank.util.arraylist;..public class logic {...int player_x;.int player_y;.int nextmove_x;.int nextmove_y;.arraylist&lt;arraylist&lt;boolean&gt;&gt; targets;.arraylist&lt;arraylist&lt;character&gt;&gt; grid;.boolean canmove;...public logic(){.    buildgrid();.    buildtargets();.    findplayer();.}..    public void move(int dx, int dy){.    if(checkcanmove(dx, dy)){.    movebox(dx, dy);.    moveplayer(dx, dy);.    } ...}...public void moveplayer(int dx, int dy){..    boolean boxahead = (getchar(dx,dy) == '#');..    if(!boxahead){..    char pchar = grid.get(player_x ).get(player_y);.    char pcharnext = grid.get(player_x +dx).get(player_y +dy);..    if(pchar == '@'){.        if(pcharnext == ' ' || pcharnext == '$'){.            grid.get(player_x + dx).set(player_y + dy, '@');.            grid.get(player_x).set(player_y, ' ');.        }.        if(pcharnext == '.' || pcharnext == '*'){.            grid.get(player_x + dx).set(player_y + dy, '+');.            if(pchar == '+'){.                grid.get(player_x).set(player_y, '.');.            }.            else{.                grid.get(player_x).set(player_y, ' ');.            }.        }.    }..    else if(pchar == '+'){.        if(pcharnext == ' ' || pcharnext == '$'){.            grid.get(player_x + dx).set(player_y + dy, '@');.            grid.get(player_x).set(player_y, '.');.        }.        if(pcharnext == '.' || pcharnext == '*'){.            grid.get(player_x + dx).set(player_y + dy, '+');.            grid.get(player_x).set(player_y, '.');...        }.    }.....    player_x += dx;.    player_y += dy;..    }....}...public void buildgrid(){.    char c = '""';...    grid = new arraylist&lt;arraylist&lt;character&gt;&gt;();..    string[] level1 = .              {""*###########*"",.               ""#           #"",.               ""#  ... ...  #"",.               ""#  *$$ $.$  #"",.               ""# $*+$ $*$$ #"",.               ""#  *$$ $.$  #"",.               ""#  ...  .   #"",.               ""#           #"",.               ""*###########*""};....    int length_i = level1.length;.    system.out.println(length_i);.    int length_i_j = level1[length_i-1].length();....    for(int i = 0; length_i&gt;i; i++){.        grid.add(i, new arraylist&lt;character&gt;());.        for(int j = 0; length_i_j&gt;j; j++){.            c = level1[i].charat(j);                .            grid.get(i).add(c);.        }.    }...}...public void buildtargets(){...    targets = new arraylist&lt;arraylist&lt;boolean&gt;&gt;();..    char c = ' ';.    int length_i = grid.size();..    for(int i = 0; length_i&gt;i; i++){.        targets.add(i, new arraylist&lt;boolean&gt;());.        for(int j = 0; grid.get(i).size()&gt;j; j++){.            c = grid.get(i).get(j);.            if(c == '.'){.                targets.get(i).add(false);.            }.            else{.                targets.get(i).add(true);.            }..        }.    }..}..public void findplayer(){.    char c = ' ';.    int length_i = grid.size();..    for(int i = 0; length_i&gt;i; i++){.        for(int j = 0; grid.get(i).size()&gt;j; j++){.            c = grid.get(i).get(j);.            if(c == '@' || c == '+'){.                player_x = i;.                player_y = j;.            }.        }.    }...}..public character getchar(int dx, int dy){..    char c = ' ';.    c = grid.get(player_x + dx).get(player_y + dy);.    return c;..}....public void movebox(int dx, int dy){.    char c1 = getchar((dx),(dy));.    char c2 = getchar((2*dx),(2*dy));...    if(c1 == '*' || c1 == '$'){.        if(c2 == '.'){.            grid.get(player_x +2*dx).set(player_y +2*dy, '*');.        }.        if(c2 == ' '){.            grid.get(player_x +2*dx).set(player_y +2*dy, '$');.        }.    }.....}..public boolean checkcanmove(int dx, int dy){.    canmove = true;..    boolean boxahead = (getchar(dx,dy) == '#');.    boolean boxahead2 = (getchar(2*dx,2*dy) == '#');.    boolean movableahead = (getchar(dx,dy) == '$');.    boolean movableahead2 = (getchar(2*dx,2*dy) == '$');.    boolean movableaheads = (getchar(dx,dy) == '*');.    boolean movableaheads2 = (getchar(2*dx,2*dy) == '*');...    if(boxahead || (movableahead &amp;&amp; boxahead2) || (movableahead &amp;&amp;     .               movableahead2) || (movableaheads &amp;&amp; movableaheads2) || (movableaheads &amp;&amp;  .               boxahead2)){.        canmove = false;.    }..    return canmove;.}......void setplayerx(int player_x){.    this.player_x = player_x;.}..void setplayery(int player_y){.    this.player_y = player_y;.}..}...graphics class.    package sokoban2;..import acm.graphics.gimage;.import blank.awt.event.keyevent;..import acm.graphics.gimage;.import acm.program.graphicsprogram;..public class sokobangui extends graphicsprogram {...logic logic = new logic();  .gimage wall;.gimage blank;...    @override.public void init() {.    logic = new logic();.    addkeylisteners(); // this is required for listening to key events..}...@override.public void run() {.    system.out.println(logic.player_x);.    system.out.println(logic.player_y);.    while(true){.        paint();.        println(""hah"");.    }.//      system.out.println(""win"");.}...public void paint(){.    char c =' ';.    int length_i = logic.grid.size();..    for(int i = 0; length_i&gt;i; i++){.        for(int j = 0; logic.grid.get(i).size()&gt;j; j++){.            c = logic.grid.get(i).get(j);.            switch (c) { .            case '#':.                gimage wall = new gimage(""sokoban/wall16x16.png"");.                wall.setlocation(16*j,16*i);.                add(wall);         .                break;.            case ' ':.                gimage blank = new gimage(""sokoban/blank16x16.png"");.                blank.setlocation(16*j,16*i);.                add(blank);         .                break;.            case '@': .                gimage player = new gimage(""sokoban/mover16x16.png"");.                player.setlocation(16*j,16*i);.                add(player);         .                break;.            case '$': .                gimage movable = new gimage(""sokoban/movable16x16.png"");.                movable.setlocation(16*j,16*i);.                add(movable);         .                break;.            case '.': .                gimage target = new gimage(""sokoban/target16x16.png"");.                target.setlocation(16*j,16*i);.                add(target);         .                break;.            case '*': .                gimage movable_on_target = new    .gimage(""sokoban/movable_on_target16x16.png"");.                movable_on_target.setlocation(16*j,16*i);.                add(movable_on_target);         .                break;.            case '+': .                gimage mover_on_target = new .gimage(""sokoban/mover_on_target16x16.png"");.                mover_on_target.setlocation(16*j,16*i);.                add(mover_on_target);         .                break;..            }.            }.        }.}..public boolean win(){.    int length_i = logic.targets.size();.    int win = 0;.    for(int i = 0; length_i&gt;i; i++){.        for(int j = 0; logic.targets.get(i).size()&gt;j; j++){.            if(!logic.targets.get(i).get(j)){.                win += 1;.            }.        }.    }.    return (!(win&gt;0));.}..@override.public void keypressed(keyevent event) {.    int key;.    if (character.isletter(event.getkeychar())) .        key = event.getkeychar();.    else .        key = event.getkeycode();..    switch (key) { ..    case 'w':.        logic.move(-1, 0);.        break;.    case 's': .        logic.move(1, 0);.        break;.    case 'a': .        logic.move(0, -1);.        break;.    case 'd': .        logic.move(0, 1);.        break;..    }.}..}"
