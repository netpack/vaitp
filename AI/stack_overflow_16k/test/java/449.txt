"resolving implementation at runtime // interface defined in coffee.jar..interface coffee {.  void brew();..  void discard();.}...// implementation defined in blackcoffee.jar.class blackcoffee implements coffee {.  @override.  public void brew() {.    system.out.println(""brew balckcoffee"");.  }..  @override.  public void discard() {.    system.out.println(""discard blackcoffee"");..  }.}...// implementation defined in filtercoffee.jar.class filtercoffee implements coffee {..  @override.  public void brew() {.    system.out.println(""brew filtercoffee"");..  }..  @override.  public void discard() {.    system.out.println(""discard filtercoffee"");..  }.}..// runtime class in coffee.jar.class brewcoffee {.  public static void main(string[] args) {.    coffee coffee = //something here;.    coffee.brew();.    coffee.discard();.  }.}....then idea is to resolving the implementation at runtime without knowing the implementation..the app would have the dependency of coffee.jar and one from either blackcoffee.jar or filtercoffee.jar ."
