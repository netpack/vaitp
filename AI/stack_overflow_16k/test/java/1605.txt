"how does a return statement work after a finally block in blank? here's an example from the book ""blank all-in-one desk reference""..public class crazywithzeros {.public static void main(string[] args) {.    try {.        int answer = dividethesenumbers(5, 0);.    } catch (exception e) {.        system.out.println(""tried twice, still didn't work!"");.    }.}..public static int dividethesenumbers(int a, int b) throws exception {..    int c;.    try {.        c = a / b;.        system.out.println(""it worked!"");.    } catch (exception e) {.        system.out.println(""didn't work the first time."");.        c = a / b;.        system.out.println(""it worked the second time!"");.    } finally {.        system.out.println(""better clean up my mess."");.    }.    system.out.println(""it worked after all."");.    return c;..}...}..after the finally clause executes, the arithmeticexception is thrown back up to the calling method. the statement system.out.println(""it worked after all."");would never be executed in this case. but what happened to the return c;?..i wonder whether the return statement would still return the result of the division or not?..========..i tried to replace ""system.out.println(""better clean up my mess."");"" with ""system.out.println(c);"", then it's compiled and the results are as follows:...didn't work the first time.  .0 .tried twice, still didn't work!....i can't believe the variable c could be calculated. (it's the wrong number, though) why could this happen?..then i also tried to replace ""system.out.println(""better clean up my mess."");"" with ""return c;"" and deleted the statements below the finally block, it's compiled again...since the finally block is executed whether or not any exceptions are thrown by the try block or caught by any catch blocks, the return c; should be executed. but here're the results:...  didn't work the first time....looks like c couldn't get returned..."
