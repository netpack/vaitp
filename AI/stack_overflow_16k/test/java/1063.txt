"blank observers/object listeners (game engine) i'm working on a game engine, and the last question i had regarding this was what good way i can use to make ""observers"" or listeners. a user suggested that i should use blank's eventobject class to inherit from and make a listener interface. however, this didn't provide me with good flexibility...here is the handler annotation to state that a method is an event handler in a listener:..@retention(retentionpolicy.class).@target(elementtype.method).public @interface handler {}...here is the base class for event, which is basically the same as eventobject (but i'll add abstract methods sooner or later):..public abstract class event {..    private object source;..    public event(object source) {.        this.source = source;.    }..    public object getsource() {.        return source;.    }.}...here is the listener class, which is empty:..public interface listener {}...here is the listenerhandler class, used to handle all listeners. you register and unregister them here. i'll edit the register/unregister methods later for a better use:..public class listenerhandler {..    private arraylist&lt;listener&gt; listeners;..    public listenerhandler() {.        this.listeners = new arraylist&lt;listener&gt;();.    }..    public void registerlistener(listener l) {.        listeners.add(l);.    }..    public void unregisterlistener(listener l) {.        listeners.remove(l);.    }..    public void onevent(event event) {.        for(listener l : listeners) {.            class&lt;?&gt; c = l.getclass();..            method[] methods = c.getdeclaredmethods();..            for(method m : methods) {.                if(m.isaccessible()) {.                    if(m.isannotationpresent(handler.class)) {.                        class&lt;?&gt;[] params = m.getparametertypes();..                        if(params.length &gt; 1) {.                            continue;.                        }..                        class&lt;?&gt; par = params[0];..                        if(par.getsuperclass().equals(event.class)) {.                            try {.                                m.invoke(this, event);.                            }catch(illegalaccessexception | illegalargumentexception | invocationtargetexception e) {.                                e.printstacktrace();.                            }.                        }.                    }.                }.            }.        }.    }.}...from what i heard, it's a use of a lot of memory in order to get all methods of a class. i'm not going to assume this is the case, but i'm sure there is a better way as this will be a game engine with many components and such...i'd like to know the best way to implement this, or if i'm doing it right. i'd also like to know if anyone can help me improve this in any way without hogging memory usage by the game (as of now it's not a big deal -- the ""game engine"" is not even close to rendering anything yet)"
