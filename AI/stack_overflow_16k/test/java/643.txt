"immutable objects are thread safe, but why? if one thread is creating populating the reference variable of the immutable class by creating its object and at the second time the other thread kicks in before the first thread completes and creates another object of the immutable class, won't the immutable class usage be thread unsafe?.creating a immutable object also says that all fields to marked as final as..... ""it  may  be necessary  to  ensure  correct  behavior if a reference to a newly created instance is passed from one thread to another without synchronization"".are they trying to say that the other thread may re-point the reference variable to some other object of the immutable class and that way the threads will be pointing to different objects leaving the state inconsistent?"
