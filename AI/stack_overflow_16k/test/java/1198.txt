"create a static array that is accessible to all instances i'm trying to create a static array to hold a two linked lists that will hold terms of two different polynomials. the term class has two int values that represent the coefficient and exponent. my problem is everytime a new ""polynomial"" it creates a new instance of the array. i tried to make the array static but it gives me a compiler error a you cannot pass the modifer. my code is below. thanks for the help:..public class linkedlistinarraypolynomial implements polynomialinterface .{..public boolean isfirst = true;.public term firstterm;.public int currentfree = 0;.term[] polynomialarray = new term[100];.static class term {.    public int coef;.    public int exp;..    public term next;..    public term(int coefintput, int expinput) {.        this.coef = coefintput;.        this.exp = expinput;.    }..    public string tostring() {.        string output = ""coef is "" + this.coef + "" exp is "" + this.exp;.        return output;.    }..}..public void addtoarray(term term) {.    int marker = 0;.    boolean written = false;..    while (written = false) {.        if (polynomialarray[marker] == null) {.            polynomialarray[marker] = term;.            term.next = firstterm;.            this.firstterm = term;.            written = true;.        } else {.            marker++;.        }.    }.}..public linkedlistinarraypolynomial() {.    firstterm = null;.}..public linkedlistinarraypolynomial(string input) {...    boolean firstelementpos = true;.    int exponent;.    int coef;.    string tempexp = null;.    if (input.charat(0) == '-') {.        input = input.substring(1);.        firstelementpos = false;.    }..    string inputpolynomial = input.replaceall(""-"", ""+-"");.    string[] splitterms = inputpolynomial.split(""\+"");..    for (int i = 0; i &lt; splitterms.length; i++) {.        string tempterm = splitterms[i];..        boolean temppos;.        temppos = true;.        if (tempterm.contains(""-"")) {.            tempterm = tempterm.substring(1);..            temppos = false;.        }.        int indexofexponent = tempterm.indexof('^');..        if (indexofexponent == -1) {.            if (tempterm.indexof('x') == -1) {.                exponent = 0;.            } else {.                exponent = 1;.            }..        } else {.            tempexp = tempterm.substring(indexofexponent + 1);.            exponent = integer.parseint(tempexp);..        }..        string temptermnocarrot = tempterm.replaceall(""\^"" + tempexp, """");.        string tempcoef = temptermnocarrot.replaceall(""x"", """");..        coef = integer.parseint(tempcoef);..        if (temppos == false || firstelementpos == false) {.            coef = (coef * -1);.            temppos = true;.            firstelementpos = true;.        }.        term newterm = new term(coef, exponent);.        system.out.println(""before insert"");.        system.out.println(newterm);.        polynomialarray[currentfree] = newterm;.        system.out.println(""after insert"");.        system.out.println(polynomialarray[currentfree].                + "" at polynomialarray["" + currentfree + ""]"");.        currentfree++;..        // this.addtoarray(newterm);..    }..}..public string tostring() {.    string tempresult = """";.    term current = firstterm;.    while (current != null) {.        if (current.exp == 0) {.            tempresult += ""+"";.            tempresult += current.coef;..        } else {.            tempresult += ""+"";.            tempresult += current.coef;.            tempresult += ""x^"";.            tempresult += current.exp;..        }.        current = current.next;..    }..    tempresult = tempresult.replaceall(""\^0"", """");.    tempresult = tempresult.replaceall(""\+-"", ""-"");.    // system.out.println("" at 0 "" + polynomialarray[0].coef);.    system.out.println(""tempresult before processing: "" + tempresult);.    polynomialinterface processingresult = new arraywithexponentasindexpolynomial(.            tempresult);.    return processingresult.tostring();..}..@override.public polynomialinterface add(polynomialinterface other) {.    // todo auto-generated method stub.    return null;.}..@override.public polynomialinterface subtract(polynomialinterface other) {.    // todo auto-generated method stub.    return null;.}..@override.public void readpolynomial() {.    // todo auto-generated method stub..}.}...**please note i have multiple system.out.print lines that are there for debugging purposes."
