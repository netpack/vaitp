"why do these two apparently identical objects have different class types? i have a class user, only have two fields: id, name..package test;..public class user {.    private long id;.    private string name;..    public long getid() {.        return id;.    }..    public void setid(long id) {.        this.id = id;.    }..    public string getname() {.        return name;.    }..    public void setname(string name) {.        this.name = name;.    }.}...then in the main class, i tried to initialize the user object with two different approach:..package test;../**. * @author lhuang. */.public class main {.    public static void main(string[] args) {.        user u = new user() {.            {.                setid(1l);.                setname(""lhuang"");.            }.        };..        system.out.println(u.getclass());..        user u2 = new user();.        u2.setid(1l);.        u2.setname(""lhuang"");.        system.out.println(u2.getclass());.    }.}...then i can get the output ..class test.main$1.class test.user...the interesting is why the u class is the inner class type of main? but actually i still can use the u.getid() and u.getname() method."
