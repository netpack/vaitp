"given a class<?>, can i determine if it subclasses a particular type? i'm trying to write a blank function that takes a class&lt;?&gt; and returns a string which represents a reasonable guess at the corresponding blankscript type. example input/output:..   in              |  out.---------------------------------. string.class      |  ""string"". int.class         |  ""number"". double.class      |  ""number"". integer.class     |  ""number"". date.class        |  ""date""    (yes, i know that typeof new date() === 'object'). boolean.class     |  ""boolean"". foo.class         |  ""object""...here's what i've got so far, and it seems to mostly work:..string jstype(class&lt;?&gt; clazz).{.    if (clazz.equals(string.class) return ""string"";..    if (clazz.equals(boolean.class) return ""boolean"";..    try.    {.        clazz.assubclass(number.class);.        return ""number"";.    }.    catch (exception e){}..    try.    {.        clazz.assubclass(date.class);.        return ""date"";.    }.    catch (exception e){}..    return ""object"";.}...however, it does not correctly return ""number"" for number primitives, e.g. int.class, double.class, etc., though it does work correctly for the wrapper types, integer.class et al....is there something special about the class literals for primitive types?.is there a way to write this function that's better than a bunch of if-else statements, for every class i'm interested in?"
