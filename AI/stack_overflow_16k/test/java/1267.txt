"which tostring technique is more efficient? i have a class called zebra (not her actual name). zebra overrides the tostring method to provide her own convoluted obfuscated stringification...which is more efficient to stringify an instance of zebra? presuming that i have to do this stringification millions of times per session....zebra.tostring().""""+zebra.static string blank (singleton).blank+zebra (multiple executions)....where the value of zebra is not assured to be the same...i am conjecturing that the answer could be - no concern: the compiler makes them all equivalent. if that is not the answer, please describe the instantiation process that makes them different. (2) and (3) could be the same, since the compiler would group all similar strings and assign them to a single reference...normally, i do """"+zebra because i am too lazy to type zebra.tostring()...attn: to clarify...i have seen questions having been criticised like ""why do you want to do this, it's impractical"" if every programmer refrains from asking questions because it has no practical value, or every mathematician does the same - that would be the end of the human race...if i wrote an iteration routine, the differences might be too small. i am less interested in an experimental result than i am interested in the difference in processes:..for example, zebra.tostring() would invoke only one tostring while, ""+zebra would invoke an extra string instantiation and and extra string concat. which would make it less efficient. or is it. or does the compiler nullify that. ..please do not answer if your answer is focused on writing an iterative routine, whose results will not explain the compiler or machine process...virtue of a good programmer = lazy to write code but not lazy to think."
