"what mechanism does blank use so that it does not allow reasignment of an array reference to another with a bigger type? from a book i've been reading, it said ..int[] splats;.int[] dats = new int[4];.char[] letters = new char[5];.splats = dats;     //ok.splats = letters;   //not ok...what is the mechanism that it does not allow such an assignment?..edit:..as opposed to this assignment where ..int[] weightlist = new int[5];.byte b = 4;.char c = 'c';.short s = 7;.weightlist[0] = b;   //ok.weightlist[1] = c;   //ok.weightlist[2] = s;   //ok...this is allowed. .edit : .i think i understand how widening and narrowing work but in my head..new int[4];.and.new char[4];...are two array objects in the heap with the type of 'array'. aren't they ? .perhaps like ..new list&lt;int&gt;.and .new list&lt;char&gt;...sure their individual element types are different but the list objects themselves .are of the same list type..i read that arrays of objects are allowed to perform that operation as long as .the assigning side has a narrower type(subclass)..so maybe i could think of this like...  because the primitive type char does not inherit the primitive type.  int, you cannot reassign an array of chars into an array of ints ?....well of course, one primitive type ""extending"" another doesn't sound right but just.to make it easier to understand."
