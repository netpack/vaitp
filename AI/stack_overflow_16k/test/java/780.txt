"refactoring blank code can someone explain me how to refactor the below code. basically i have a timer functionality which i am using repeatedly. so i want to put that timer into a generic function...import blank.util.timer;.import blank.util.timertask;..public class app {.    private volatile boolean a = false;.    private volatile boolean b = false;.    private volatile boolean c = false;.    public static void main(string[] args) {.        app app = new app();.        app.m1();.    }..    private void m1() {.        // m2() should not take more than specified time in timer.        timer timer = new timer();.        timer.schedule(new timertask() {            .            @override.            public void run() {.                if(a){.                    system.out.println(""m1 do nothing"");.                }.                else{.                    system.out.println(""m1 timeout exception"");.                }.            }.        }, 2*60*1000);.        a=m2();.        system.out.println(""blah"");.    }.    private boolean m2() {.        // killing some time with sleep.        try {.            thread.sleep(1000);.        } catch (interruptedexception e) {.            e.printstacktrace();.        }..        //m3() should not take more than specified time in timer.        timer timer = new timer();.        timer.schedule(new timertask() {            .            @override.            public void run() {.                if(b){.                    system.out.println(""m2 do nothing"");.                }.                else{.                    system.out.println(""m2 timeout exception"");.                }               .            }.        }, 1*60*1000);.        b = m3();.        system.out.println(""blah blah"");.        return true;.    }.    private boolean m3() {.        //m4() should not take more than specified time in timer.        timer timer = new timer();.        timer.schedule(new timertask() {            .            @override.            public void run() {.                if(c){.                    system.out.println(""m3 do nothing"");.                }.                else{.                    system.out.println(""m3 timeout exception"");.                }           .            }.        }, 20000);.        c=m4();.        system.out.println(""blah blah blah"");.        return true;.    }.    private boolean m4() {.        try {.            thread.sleep(10);.        } catch (interruptedexception e) {.            e.printstacktrace();.        }.        return true;.    }.}...thank you for your help. i am not looking for code help. want to know your thoughts on minimizing the code."
