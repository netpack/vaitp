"blank hashmap key comparison against string fails i have the following situation. i have a hashmap in blank with keys as strings..then in some stage , in runtime i create strings equal to those keys in order to retrieve the data from that map.the strings are created as follows within ""for"" loop:.. string keytoretrive = ""lights["" + integer.tostring(i) + ""]"" + "".intensity"";...the strange thing about it that when i iterate through the map to find the key that equals that string ,even when the match is found the search steps over.so in this search loop :..  while (iter.hasnext()) {.        map.entry entry = (map.entry) iter.next();.        if (name == entry.getkey()) {  ///name- ""lights[0].intesity"".            uniformout = (icleanable) entry.getvalue();.            break;.        }.    }...the key with the name ""lights[0].intesity"" never returns true even that the map contains one.how i solved it .i used hashcode() for both compared string values.so this version does work:.. while (iter.hasnext()) {.        map.entry entry = (map.entry) iter.next();.        if (name.hashcode() == entry.getkey().hashcode()) {.            uniformout = (icleanable) entry.getvalue();.            break;.        }.    }...update: after being pointed to the fact that  ""=="" doesn't work good and ""equals()"" should be used i would like to narrow the question:why ""=="" does work for strings which were not created from several concatenated blocks? i mean, if i defines key string to compare agains as a simple single string:.. string foo=""foo"";...such a string is compared using ""=="" against hashmap key all right...i am not an expert blank programmer so can anybody explain why it works this way?"
