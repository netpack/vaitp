"blank security: how to ensure class is only access from specific package? now i know i can mark a method as 'no modifier' so that its only accessible by class &amp; package...that is not what i need in this case though. what i need is this:..methods on class ""secure.blank"" can only be accessed from other classes in the same jar file...and (this is extra)..when call is made into a secure method, the call stack does not go back to a none secure class &amp; then back in again. for example:..this is good:...com.nonsecure.classa.dostuff() calls .com.nonsecure.classb.dostuff() calls .com.secure.secure.dostuff() calls .com.secure.secureb.dostuff()...this is bad:...com.nonsecure.classa.dostuff() calls.com.nonsecure.classb.dostuff() calls.com.secure.secure.dostuff() calls.com.nonsecure.classc.dostuff() calls [bad: we went outside the classes in the secure jar!].com.secure.secureb.dostuff() .....now i think i can do this via a little manual work:.. private void checksecurity().  {.    stacktraceelement[] stacktraceelements = thread.currentthread().getstacktrace();.    for (stacktraceelement stacktraceelement : stacktraceelements).    {.      // todo: add a little magic to check that we've not stepped outside the secure packages..      if (!stacktraceelement.getclassname().startswith(""com.secure"")).      {.         throw new securityexception(""woop!"");.      }.    }.  }...question: this feels like there should be something that blank provides to help me out here?..i've read about ..accesscontroller.doprivileged(new privilegedexceptionaction&lt;string&gt;()...but seems to only be about accessing resources/network connections etc..not about accessing the call stack to ensure some sort of package protection...notes: ...i am using spring 3 .the jar file containing the secure code is signed.with a certificate. .access to the secure class will only be from.within the jar, direct access from outside the jar must not be.allowed."
