"can anonymous inner class instantiated within a static method has access to instance members of containing class? i want to understand better the visibility of instance fields of containing class to an anonymous inner class (aic)...there have been lots of talks that aic has an implicit reference to the containing class' instance (when exactly is it leak safe to use (anonymous) inner classes?). with that logic, even when an aic is instantiated within a static method, it should have access to the instance fields of the containing class. but i can't find a way to test this as the compiler gives errors. ..for e.g., in the below code, i get: ""non-static field 's' can't be referred from a static context"" by the compiler when i refer 's' within print() method of the aic:..public interface testinterface {.    void print();.}...public class aictest {.    public string s = ""something"";.    public static void main( string[] args ) {..        new testinterface() {.            @override.            public void print() {.                system.out.println( s ); **&lt;-- compilation error**.            }.        }.print();..    }.}...could you suggest if it's possible for the aic instance to access 's' in the above example?..edit/answer.i want to clarify that i am aware that static methods have access to class members and instance methods have access to instance &amp; class members. the confusion was more about the general statement that aic always have an implicit reference to containing class' object. this clearly is not the case for aic initialised within a static method. @shmosel shared a link which answers my question (is it possible to make anonymous inner classes in blank static?): ""so an anonymous class in a static context is roughly equivalent to a static nested class in that it does not keep a reference to the enclosing class, even though it's technically not a static class.""."
