"code design: self resetting boolean. reason against this? i was thinking about a get method which resets itself. the construct i have actually works too. but i'm not sure if i should avoid this..the idea is that after the first ""true"" return, the value gets reseted automatically. in this case, the get value is a boolean, which tells me if i received an answer. as soon as i get a true, the member should reset itself back to false. otherwise i would have to do that manually. .the following is my working get method for this idea. if the value s true, i start a new small thread which waits for 200ms and resets the member back to false. in the mean time the old value is already returned..my question is, can/should i use it like that or are there some major reasons against it? because somehow, i got the feeling,that this way is not to recommend...thank you for any inputs...public boolean isack() {.    if (acknowledged){.    thread th = new thread() {.        public synchronized void run() {.            try {.                thread.sleep(200);.                acknowledged = false;.            } catch (interruptedexception e) {.                // todo auto-generated catch block.                e.printstacktrace();.            }.        }.    };.    th.start();}.    return acknowledged;.}"
