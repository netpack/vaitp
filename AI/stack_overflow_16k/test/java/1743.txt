"replacing various variables in expression with values? in string s, there are variables and arrays. for example, s could be a - (b+a[b[2]])*d + 3, and the values for those variables are stored in a separate file. this is a segment of my code in which i am trying to replace any variables in my current string s with their corresponding value from the other file...i only want to replace the variables that are scalar variables, not arrays, and i have an arraylist called scalars which has all scalar variables stored. so for the given example, with a=1, b=2, d=3 i would want to make s into 1 - (2+a[b[2]])*3 + 3. scalars also does not contain duplicate variables, so my code only works for single, non duplicate variables such as a,b,c and not for variables such as varx. how could i improve my code to work for every situation, or is there a better approach? ..string s = expr; ..    if(scalars.size()&gt;0){.        int j = 0; //make so duplicates can be used , so var can be used, so it doesn't detect arrays.        for(int k = 0; k&lt;s.length(); k++){.            if(character.isletter(s.charat(k))){.                s= s.substring(0,k) + this.scalars.get(j).value + s.substring(k+1,s.length());.                j++;.            }.        }.    }...edit: full evaluate code (not yet complete). i am trying to convert it to a string without variables so i can eventually recursively call evalnopb when i introduce parentheses/brackets..    public float evaluate() { ..    string s = expr; ..    if(scalars.size()&gt;0){.        int j = 0; //make so duplicates can be used , so var can be used, so it doesn't detect arrays.        for(int k = 0; k&lt;s.length(); k++){.            if(character.isletter(s.charat(k))){.                s= s.substring(0,k) + this.scalars.get(j).value + s.substring(k+1,s.length());.                j++;.            }.        }.    }.    system.out.println(s);.    float answer = 0;..    if(s==null || s.length() == 0){.        return 0;.    }..    //one single variable or just a number.    if(s.contains(""+"") == false &amp;&amp; s.contains(""-"") == false &amp;&amp; s.contains(""*"") == false &amp;&amp; s.contains(""/"") == false &amp;&amp; s.contains(""["") == false &amp;&amp;s.contains(""]"") == false &amp;&amp; s.contains(""("") == false &amp;&amp; s.contains("")"") == false){ .        if(scalars.size() == 0){.            answer = float.parsefloat(s);.            return answer;.        }.        answer = this.scalars.get(0).value;.        system.out.println(""one var/number loop"");.        return answer;.    }...    //no parentheses/brackets.    if(s.contains(""("") == false &amp;&amp; s.contains("")"") == false &amp;&amp; s.contains(""["") == false &amp;&amp; s.contains(""]"") == false &amp;&amp; (s.contains(""+"") == true || s.contains(""-"") == true || s.contains(""*"") == true || s.contains(""/"") == true)){.        system.out.println(""no parens loop"");.        answer = evalnopb(s);.        return answer;.    }.    //make compiler happy .    system.out.println(""no loop"");.    return 0;.    }..    //no parentheses/brackets.    private float evalnopb(string s){ ..        float tempans= 0;.        if(s.contains(""*"") == false &amp;&amp; s.contains(""/"") == false &amp;&amp; s.contains(""+"") == false &amp;&amp; s.contains(""-"") == false){.            return float.parsefloat(s);.        }..    if(s.length()-1&gt;0){.        int i;.        boolean foundplusminus = false;.        for(i=s.length()-1; i&gt;0; i--){.            if(s.charat(i) == '+' || s.charat(i) == '-'){.                system.out.println(i);.                foundplusminus = true;.                break; // keep value of i for substrings .            }.            foundplusminus = false;.        } ..        if (foundplusminus == false) { // for loop went through and did not find + or -.            for(i=s.length()-1; i&gt;0; i--){.                if(s.charat(i) == '*' || s.charat(i) == '/'){.                    system.out.println(i);.                    break; // keep value of i for substrings.        }.    }.    }..    string sub1 = s.substring(0,i);.    system.out.println(sub1);.    string sub2 = s.substring(i+1, s.length());.    system.out.println(sub2);..    if(s.charat(i) == '+'){.        tempans = evalnopb(sub1) + evalnopb(sub2);.    } else if(s.charat(i) == '-'){.        tempans = evalnopb(sub1) - evalnopb(sub2);.    }else if(s.charat(i) == '*'){.        tempans = evalnopb(sub1) * evalnopb(sub2);.    }else if (s.charat(i) == '/'){.        float divisorcheck = evalnopb(sub2);.        if(divisorcheck!= 0){.        tempans = evalnopb(sub1) / evalnopb(sub2);.        }else { // cannot divide by 0 .            throw new illegalargumentexception(""cannot divide by 0"");.        }.}.}.    return tempans;..}"
