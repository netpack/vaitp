"what is the difference between referring to prototype of an object with explicitly specifying __proto__ and without? i was trying to understand blank internals. when it comes to blank prototypical inheritance with __proto__, i understand that each object in blank i.e functions, arrays, object literals etc contains __proto__ property which is used to refer prototype(here prototype i mean a feature where other objects can get referenced to. not the prototype property of a function constructor) of those objects. for example, let's say i've an object called myobject with few properties and members..var myobject = {.   firstname:""kishore"",.   lastname:""kumar"",.   fullname: function() {.      console.log(this.firstname+"" ""+this.lastname);.   }.}...and i want fullname method to be inherited in following object i.e ..var anotherobj = {.   firstname:""anil"".}...so i did this..anotherobj.__proto__ = myobject;...so, what i understand from the above code snippet is, anotherobj's prototype is now referring to the same memory spot of myobject's fullname and have access to it. so i can invoke it with anotherobj.__proto__.fullname(). but some resources say, i can directly do this i.e anotherobj.fullname() and i can. and blank engine internally takes care and makes fullname available by using prototype chain...but now, here's what confuses me. when i was trying to change a property of an object that anotherobj's prototype referring to, i.e myobject's property, i came into this two weird problems...1) when i do anotherobj.lastname = ""korada"";, i expect the myobject that prototype of anotherobj pointed to, should change it's lastname. but it's not...2) when i do anotherobj.__proto__.lastname = ""korada"";, it changes...so with the above two ways of pointing myobject through prototypical inheritance, i can see they are different. i want to know why? what is the difference between using explicitly with __proto__ and without to access and modify the myobject's members in anotherobj?..note: i understand using __proto__ costs performance and we should never use it in the development. the question i asked is for understanding. ..edited: for better understanding my question, below i put two code snippets that i want to know difference for...code1: ..var myobject = {.   firstname:""kishore"",.   lastname:""kumar"",.   fullname: function() {.      console.log(this.firstname+"" ""+this.lastname);.   }.}..var anotherobj = {.   firstname:""anil"".}..anotherobj.__proto__ = myobject;.anotherobj.lastname = ""korada"";.console.log(anotherobj.__proto__);...output:...code2: ..var myobject = {.   firstname:""kishore"",.   lastname:""kumar"",.   fullname: function() {.      console.log(this.firstname+"" ""+this.lastname);.   }.}..var anotherobj = {.   firstname:""anil"".}..anotherobj.__proto__ = myobject;.anotherobj.__proto__.lastname = ""korada"";.console.log(anotherobj.__proto__);...output:...you can see in the above two code snippets output, lastname effecting when i try to use anotherobj.__proto__.lastname = ""korada"";..i just want to know why?"
