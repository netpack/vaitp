"what is the difference between members on prototype object and on constructor function? my question is not about the difference between object's members and prototype members. i understand that. i think it is similar like c# object members and static members on the class...my question is about difference between members on constructor function and on prototype object. comparing to c# they both are ""static"". so what is the difference? i only observed, that prototype members can be called the same way on instances directly, or on constructor.prototype. the constructor function members can be called only on constructor function..when to use which approach?..to illustrate this, imagine i need count of persons.....example using constructor function members:..function person () {.    person.countofcreatedpersons = (person.countofcreatedpersons || 0) + 1;.}..person.count = function () {.    return person.countofcreatedpersons;.}..var p = new person();.alert(person.count());.....example using prototype members:..function person () {.    person.prototype.countofcreatedpersons = (person.prototype.countofcreatedpersons || 0) + 1;.}..person.prototype = {.    count: function () {.        return this.countofcreatedpersons;.    }.}..var p = new person();.alert(person.prototype.count()); // or p.count()"
