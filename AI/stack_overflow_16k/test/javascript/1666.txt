"js es6 correct way to filter object by array of keys i would like to take an array of objects and filter each object to only return the properties where the key matches an item in an array...for example:..const mykeys    = ['key_1', 'key_3'];.const myarray   = [.    { .        key_1: 'some value a',.        key_2: 'some other value a', .        key_3: 'some final value a',.    },.    { .        key_1: 'some value b',.        key_2: 'some other value b', .        key_3: 'some final value b',.    },.    { .        key_1: 'some value c',.        key_2: 'some other value c', .        key_3: 'some final value c',.    },.];...should produce the following result:..const result   = [.    { .        key_1: 'some value a',.        key_3: 'some final value a',.    },.    { .        key_1: 'some value b',.        key_3: 'some final value b',.    },.    { .        key_1: 'some value c',.        key_3: 'some final value c',.    },.];...i believe this should be possible with a combination of .map() and .filter() but i'm unsure how best to achieve the equivalent of the following using es6:..const filtereddata = (array, keys) =&gt; {.    const newarr = [];..    for (let i = 0; i &lt; myarray.length; i++) {.        const item      = myarray[i];.        let newobj      = {};..        for (let j = 0; j &lt; mykeys.length; j++) {.            const filter = mykeys[j];.            newobj[filter] = item[filter];.        }..        newarr.push(newobj);.    }..    return newarr;.}..console.log(filtereddata(myarray, mykeys));"
