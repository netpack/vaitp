"recursive to reconstruct object, and if already exist, get innermost property and increase the number by one i have the following code:....let super = [{ ""name1"": { ""12"": { ""10"": 1 } } }, { ""name1"": { ""12"": { ""10"": 1 } } }, { ""name1"": { ""12"": { ""10"": 1 } } }, { ""name1"": { ""12"": { ""10"": 1 } } }, { ""name1"": { ""12"": { ""11"": 1 } } }], final = [];..super.foreach(function(object) {..    var key = object =&gt; object.keys(object)[0]; // pega key n√∫mero um..    var self   = {};            // {}.    var onekey = key(object);   // 'name'.    var keys   = [onekey];      // [ 'name' ].    var jointkey;               // undefined..    while (typeof object[onekey] === 'object') {.      object = object[onekey];  // { '1': 1 }.      onekey = key(object);     // 1.      keys.push(onekey);        // keys: [ 'name', '1' ].    }..    jointkey = keys.join('|');  // jointkey name|1..    if (!this[jointkey]) {.      this[jointkey] = self;.      final.push(self);.    }..    // console.log(self)...    keys.pop(); // keys: [ 'name' ]..    self = keys.reduce((previousvalue, currentvalue) =&gt; {.      return previousvalue[currentvalue] = previousvalue[currentvalue] || {};.    }, this[jointkey] /* { name: {} } */ );...    self[onekey] = (self[onekey] || 0) + object[onekey];..}, object.create(null));...document.body.innerhtml = json.stringify(final, 0, 4);.....which is eliminating the objects with same properties and getting the innermost property of the remaining object and increasing by the number of past equal objects. run and u will see...i'm breaking my head to understand how this could work. can someone give me a good explanation?..in the second for each iteration, the value of object isn't the second value in the array super, how could this be possible??..other mystery is this object.create(null), which is changing the foreach scope, i'm searched about, but didn't find anything."
