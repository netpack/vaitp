"toggle swipe animation based on viewport size i'm having a little bit of trouble trying to modify some code...i was using the sample code from google. add touch to your site..i modified the code slightly but my troubles seem to be when i changed the structure for the onload and onresize window event handlers...what i'm trying to achieve is to only initialize the swipe function when the viewport size is 800px or less on page load or if the window is resized to meet this requirement. ..what i'd like to happen is:..if the viewport size is > 800px on page load then do not initialize swipe functions...if the viewport size is &lt;= 800px on page load then initialize the swipe functions...else if the viewport size is resized, init or remove the swipe functions based on viewport size threshold of 800px.....// shim for requestanimationframe from paul irishpaul ir.// http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/.window.requestanimframe = (function() {.  ""use strict""..  return (.    window.requestanimationframe ||.    window.webkitrequestanimationframe ||.    window.mozrequestanimationframe ||.    function(callback) {.      window.settimeout(callback, 1000 / 60).    }.  ).})()../* // [start pointereventsupport] */.var pointerdownname = ""pointerdown"".var pointerupname = ""pointerup"".var pointermovename = ""pointermove""..if (window.navigator.mspointerenabled) {.  pointerdownname = ""mspointerdown"".  pointerupname = ""mspointerup"".  pointermovename = ""mspointermove"".}..// simple way to check if some form of pointerevents is enabled or not.window.pointereventssupport = false.if (window.pointerevent || window.navigator.mspointerenabled) {.  window.pointereventssupport = true.}./* // [end pointereventsupport] */..function swiperevealitem(element) {.  ""use strict""..  // gloabl state variables.  var state_default = 1.  var state_left_side = 2.  var state_right_side = 3..  var swipefrontelement = element.queryselector("".ogrid-item"").  var rafpending = false.  var initialtouchpos = null.  var lasttouchpos = null.  var currentxposition = 0.  var currentstate = state_default.  var handlesize = 10..  // perform client width here as this can be expensive and doens't.  // change until window.onresize.  var itemwidth = swipefrontelement.clientwidth.  var slopvalue = itemwidth * (1 / 2)..  // on resize, change the slop value.  this.resize = function() {.    itemwidth = swipefrontelement.clientwidth.    slopvalue = itemwidth * (1 / 2).  }..  /* // [start handle-start-gesture] */.  // handle the start of gestures.  this.handlegesturestart = function(evt) {.    evt.preventdefault()..    if (evt.touches &amp;&amp; evt.touches.length &gt; 1) {.      return.    }..    // add the move and end listeners.    if (window.pointerevent) {.      evt.target.setpointercapture(evt.pointerid).    } else {.      // add mouse listeners.      document.addeventlistener(""mousemove"", this.handlegesturemove, true).      document.addeventlistener(""mouseup"", this.handlegestureend, true).    }..    initialtouchpos = getgesturepointfromevent(evt)..    swipefrontelement.style.transition = ""initial"".  }.bind(this).  /* // [end handle-start-gesture] */..  // handle move gestures.  //.  /* // [start handle-move] */.  this.handlegesturemove = function(evt) {.    evt.preventdefault()..    if (!initialtouchpos) {.      return.    }..    lasttouchpos = getgesturepointfromevent(evt)..    if (rafpending) {.      return.    }..    rafpending = true..    window.requestanimframe(onanimframe).  }.bind(this).  /* // [end handle-move] */..  /* // [start handle-end-gesture] */.  // handle end gestures.  this.handlegestureend = function(evt) {.    evt.preventdefault()..    if (evt.touches &amp;&amp; evt.touches.length &gt; 0) {.      return.    }..    rafpending = false..    // remove event listeners.    if (window.pointerevent) {.      evt.target.releasepointercapture(evt.pointerid).    } else {.      // remove mouse listeners.      document.removeeventlistener(""mousemove"", this.handlegesturemove, true).      document.removeeventlistener(""mouseup"", this.handlegestureend, true).    }..    updateswiperestposition()..    initialtouchpos = null.  }.bind(this).  /* // [end handle-end-gesture] */..  function updateswiperestposition() {.    var differenceinx = initialtouchpos.x - lasttouchpos.x.    currentxposition = currentxposition - differenceinx..    // go to the default state and change.    var newstate = state_default..    // check if we need to change state to left or right based on slop value.    if (math.abs(differenceinx) &gt; slopvalue) {.      if (currentstate === state_default) {.        if (differenceinx &gt; 0) {.          newstate = state_left_side.        } else {.          newstate = state_right_side.        }.      } else {.        if (currentstate === state_left_side &amp;&amp; differenceinx &gt; 0) {.          newstate = state_default.        } else if (currentstate === state_right_side &amp;&amp; differenceinx &lt; 0) {.          newstate = state_default.        }.      }.    } else {.      newstate = currentstate.    }..    changestate(newstate)..    swipefrontelement.style.transition = ""all 350ms ease-out"".  }..  function changestate(newstate) {.    var transformstyle.    switch (newstate) {.      case state_default:.        currentxposition = 0.        break.      case state_left_side:.        currentxposition = -(itemwidth - handlesize).        break.      case state_right_side:.        currentxposition = itemwidth - handlesize.        break.    }..    transformstyle = ""translatex("" + currentxposition / 2 + ""px)"".    swipefrontelement.style.mstransform = transformstyle.    swipefrontelement.style.moztransform = transformstyle.    swipefrontelement.style.webkittransform = transformstyle.    swipefrontelement.style.transform = transformstyle..    currentstate = newstate.  }..  function getgesturepointfromevent(evt) {.    var point = {}..    if (evt.targettouches) {.      point.x = evt.targettouches[0].clientx.      point.y = evt.targettouches[0].clienty.      console.log(`x: ${point.x}, y: ${point.y}`).    } else {.      // either mouse event or pointer event.      point.x = evt.clientx.      point.y = evt.clienty.    }..    return point.  }..  /* // [start on-anim-frame] */.  function onanimframe() {.    if (!rafpending) {.      return.    }..    var differenceinx = initialtouchpos.x - lasttouchpos.x..    var newxtransform = (currentxposition - differenceinx) / 2.    var transformstyle = ""translatex("" + newxtransform + ""px)""..    swipefrontelement.style.webkittransform = transformstyle.    swipefrontelement.style.moztransform = transformstyle.    swipefrontelement.style.mstransform = transformstyle.    swipefrontelement.style.transform = transformstyle..    rafpending = false.  }.  /* // [end on-anim-frame] */..  /* // [start addlisteners] */.  // check if pointer events are supported..  if (window.pointerevent) {.    // add pointer event listener.    swipefrontelement.addeventlistener(.      ""pointerdown"",.      this.handlegesturestart,.      true.    ).    swipefrontelement.addeventlistener(.      ""pointermove"",.      this.handlegesturemove,.      true.    ).    swipefrontelement.addeventlistener(.      ""pointerup"",.      this.handlegestureend,.      true.    ).    swipefrontelement.addeventlistener(.      ""pointercancel"",.      this.handlegestureend,.      true.    ).  } else {.    // add touch listener.    swipefrontelement.addeventlistener(.      ""touchstart"",.      this.handlegesturestart,.      true.    ).    swipefrontelement.addeventlistener(.      ""touchmove"",.      this.handlegesturemove,.      true.    ).    swipefrontelement.addeventlistener(""touchend"", this.handlegestureend, true).    swipefrontelement.addeventlistener(.      ""touchcancel"",.      this.handlegestureend,.      true.    )..    // add mouse listener.    swipefrontelement.addeventlistener(.      ""mousedown"",.      this.handlegesturestart,.      true.    ).  }.  /* // [end addlisteners] */.}.var swiperevealitemelements = document.queryselectorall("".ogrid__row"")..function resizeswipeelements(nodelist) {.  ""use strict"".  // do this so :active pseudo classes are applied..  if (/ip(hone|ad)/.test(window.navigator.useragent)) {.    document.body.addeventlistener(""touchstart"", function() {}, false).  }..  if (window.innerwidth &lt;= 800) {.    var swiperevealitems = array.from(nodelist, function(item) {.      return item.resize().    }).    console.log(swiperevealitems).    return swiperevealitems.  }.}..function createswipeelements(nodelist) {.  var swiperevealitems = array.from(nodelist, function(item) {.    return new swiperevealitem(item).  }).  return swiperevealitems.}...window.onload = createswipeelements(swiperevealitemelements).window.onresize = resizeswipeelements(swiperevealitemelements).html,.body {.  width: 100%;.  height: 100%;.  margin: 0;.  padding: 0;.}..body {.  width: 100%;.  height: 100%;.  background-color: #d3e2fc;.  font-family: ""roboto"", sans-serif;.  color: #ecf0f1;.}...content {.  padding: 32px;.  box-sizing: border-box;.  overflow: hidden;.}...ogrid__row {.  position: relative;.  //width: 100%;.  height: 60px;.  display: grid;.  grid-template-columns: 1fr 1fr;.}...ogrid-item {.  position: absolute;.  width: 100%;.  height: 60px;.  left: 0;.  top: 0;.  margin: 0;.  padding: 8px;.  box-sizing: border-box;.  text-align: center;.  color: #ecf0f1;.  line-height: 44px;.  vertical-align: center;.  background-color: #4285f4;.  z-index: 10;.  -ms-touch-action: none;.  /* // [start touch-action-example] */.  /* pass all touches to blank */.  touch-action: none;.  /* // [end touch-action-example] */.}.&lt;section class=""content""&gt;.  &lt;div class=""ogrid__row""&gt;.    &lt;div class=""ogrid-item""&gt;swipe me&lt;/div&gt;.    &lt;button&gt;&lt;/button&gt;.    &lt;button&gt;&lt;/button&gt;.  &lt;/div&gt;.  &lt;div class=""ogrid__row""&gt;.    &lt;div class=""ogrid-item""&gt;swipe me&lt;/div&gt;.    &lt;button&gt;&lt;/button&gt;.    &lt;button&gt;&lt;/button&gt;.  &lt;/div&gt;.&lt;/section&gt;"
