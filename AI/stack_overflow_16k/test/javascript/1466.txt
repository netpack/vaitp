"blank proxy: detect recursions i want to create a simple performance logger:..function makeperformancemeasured(target) {.    return new proxy(target, {.        apply: (target, thisarg, args) =&gt; {.            if(!target.name) {.                throw 'the function must have a name'.            }.            console.time(target.name);.            const result = target.apply(thisarg, args); .            console.timeend(target.name);.            return result;.        }.    }).}...for non-recursional functions - all works well:..function isprime(n) {.    if(n &lt; 2) {.        return false;.    }.    for(var i = 0; i &lt; n; i++) {.        if(n % i === 0) {.            return false;.        }.    }..    return true;.} .isprime = makeperformancemeasured(isprime); .isprime(100); // 0.001ms false...but with recursional functions:..function fact(n) {.    if(n &lt; 2) {.        return 1;.    }.    return n * fact(n - 1);.}.fact = makeperformancemeasured(fact);.fact(4);.// 0.025ms .// 0ms.// 0ms.// 24...i want to detect in the proxy apply trap - if the function has been called recursively - make time measurements only for first function call in the stack..thanks!"
