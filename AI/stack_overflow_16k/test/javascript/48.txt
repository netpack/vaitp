"breaking from a for look inside a reucrsive function please see the fiddle..i am bit stuck with why the loop does not break the way i intended. ..input is an object, indexed with some kind of id. and the values are the children ids. so, i am trying to filter out (here it is hard coded as d) a node and its children. for example, for d, there is only one child, h. so, i was expecting an output ['d', 'h']. this is because, once the filter condition met (c === 'd'), it discards all previous value, and just recurse to its children (only h) in this case. once the recursion to children finished, the break should terminate the for loop. but as i see from the output, the for loop doesn't breaks and continues with (c -> g). how to make this so once the filter met, it only output the node and all its children ['d', 'h'] in this case...const input = {.  a: ['b', 'c'],.  b: ['d', 'e', 'f'],.  c: ['g'],.  d: ['h'],.}.let data = [];.const recur = (d) =&gt; {.  const ch = input[d].  if (!ch) {.    return;.  }..  for (let i = 0; i &lt; ch.length; i++) {.    console.log(data).    const c = ch[i].    data.push(c).    if (c === 'd') {.      data = [c];.      console.log(""reset data"", data).      recur(c).      break.    }.    recur(c).  }.}..recur('a').console.log(""end: "", data)...output: end:  [""d"", ""h"", ""c"", ""g""]"
