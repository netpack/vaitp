"what is the current best way to wrap console.log() that will preserve line numbers? i've previously used the following based on other so answers (without really understanding the need for (nor the workings of) the prototype.apply.apply..var mylogger = {.    log: function () {.        if (window.console) {.            if (window.console.log) {.                function.prototype.apply.apply(console.log, [console, arguments]);.            }.        }.    },.    ....};...while this prevents ie from crapping on itself, it also make the line number reporting unusable (it always reports the apply.apply.. line...i was playing around a little and discovered that the following seems to do exactly what i need, i.e. prevent ie from crapping on itself and report the line number where mylogger.log(..) was called from....var mylogger = {.    // function invocation returning a safe logging function...    log: (function () {.        if (window.console &amp;&amp; window.console.log &amp;&amp; function.prototype.bind) {.            return window.console.log.bind(window.console);.        } else {.            return function () {};.        }.    }()),.    ....};...i've done some basic testing on ie/ff/chrome without seeing any issues.. is this reasonable or is there a better way?"
