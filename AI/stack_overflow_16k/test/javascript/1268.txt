"nesting a second $.getjson request with the wordpress rest api to retrieve category names/links i am working with the wordpress rest api to retrieve blog posts and this is all working nicely. i have an initial $.getjson call to retrieve the relevant posts, i then $.each over the data to return the relevant blobs of html to render to the page...however, i am a bit stuck with how to implement the list of categories for each post. the posts endpoint only lists the category id, so i need to somehow query the category endpoint, passing in the id, to construct the category links. .can i nest a $.getjson call within the $.each to query the category for that post? struggling with how to construct this...this is what i have so far (just extracted snippets of the relevant code):..var state = {.    totalpages: null,.    posts: [],.    page: 1.}..getpostsbycategoryid: function getpostsbycategoryid(id, container) {..    $.getjson('/wp-json/wp/v2/posts?filter[cat]='+id+'&amp;filter[orderby]=title&amp;filter[order]=asc&amp;filter[posts_per_page]=4&amp;page='+state.page+'', function(data, status, xhr) {..        state.totalpages = xhr.getresponseheader('x-wp-totalpages');..        $.each(data, function() {.            var featuredimage = null;..            var cats = this.categories;.            var categories = [];..            // // loop over the categories.            $.each(cats, function() {.                $.getjson('/wp-json/wp/v2/categories/13', function(data) {.                    var categoryitem = '&lt;a class=""category"" href=""' + data.link + '""&gt;' + data.name + '&lt;/a&gt;';.                    categories.push(categoryitem);.                });.            });....            var post = $('&lt;div class=""news""&gt;&lt;div class=""detail""&gt;&lt;p class=""postmeta""&gt;&lt;a class=""category"" href=""#""&gt;categories&lt;/a&gt;&lt;/p&gt;&lt;h3 class=""title""&gt;&lt;a href=""' + this.link + '""&gt;' + this.title.rendered + '&lt;/a&gt;&lt;/h3&gt;&lt;a href=""' + this.link + '""&gt;view article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;');..            state.posts.push(post);.        });..        container.append(state.posts);..        if (state.page == state.totalpages).            $('#loadmore').addclass('disabled');..        state.page++;..    });.    return false;.}...thank you :)..updated code - cannot read property rendered of undefined..getpostsbycategoryid: function getpostsbycategoryid(id, container) {..$.getjson('/wp-json/wp/v2/posts?filter[cat]='+id+'&amp;filter[orderby]=title&amp;filter[order]=asc&amp;filter[posts_per_page]=4&amp;page='+state.page+'', function(data, status, xhr) {..    state.totalpages = xhr.getresponseheader('x-wp-totalpages');..    $.each(data, function() {.        var featuredimage = null;..        var cats = this.categories;.        var categories = [];.        var requests = [];..        // // loop over the categories.        $.each(cats, function() {.            var xhr = $.getjson('/wp-json/wp/v2/categories/13', function(data) {.                var categoryitem = '&lt;a class=""category"" href=""' + data.link + '""&gt;' + data.name + '&lt;/a&gt;';.                categories.push(categoryitem);.            });.            requests.push(xhr);.        });..        $.when.apply($, requests).then(function() {..            var post = $('&lt;div class=""news""&gt;&lt;div class=""detail""&gt;&lt;p class=""postmeta""&gt;&lt;a class=""category"" href=""#""&gt;categories&lt;/a&gt;&lt;/p&gt;&lt;h3 class=""title""&gt;&lt;a href=""' + this.link + '""&gt;' + this.title.rendered + '&lt;/a&gt;&lt;/h3&gt;&lt;a href=""' + this.link + '""&gt;view article&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;');..            state.posts.push(post);.        });..    });...    container.append(state.posts);.    blogpostloader.toggleloadingicon($('.loading i'));..    if (state.page == state.totalpages).        $('#loadmore').addclass('disabled');..    state.page++;..});.return false;.}"
