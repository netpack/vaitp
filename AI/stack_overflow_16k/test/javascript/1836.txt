"why does date addition result in a string? i'm trying to understand this behaviour:..var d = new date();..console.log(+d); // 1458049171381.console.log(1 + d); // '1tue mar 15 2016 09:39:31 gmt-0400 (edt)'...in contrast to:..var obj = {.  valueof: function () {.    return 123;.  }.};..console.log(+obj); // 123.console.log(1 + obj); // 124...why does the date addition result in a string when date.prototype.valueof returns a number?..here is naive translation of the addition operator's spec to blank ..function toprimitive(x) {.  return x.valueof();.}..function isstring(x) {.  return typeof x === 'string';.}..function tostring(x) {.  return x.tostring();.}..function tonumber(x) {.  try {.    return parsefloat(x);.  } catch (e) {.    return nan;.  }.}..function additionoperator(lval, rval) {..  let lprim = toprimitive(lval);.  let rprim = toprimitive(rval);..  if (isstring(lprim) || isstring(rprim)) {.    return tostring(lprim) + tostring(rprim);.  } else {.    return tonumber(lprim) + tonumber(rprim);.  }.}...however, if i invoke this with a date object, it returns a numeric value:..additionoperator(new date(), 1) // 1458049347088...can someone shed some light on this?"
