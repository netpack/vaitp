"how to set a limit time for a function execution i want to set a limit time for a function to be executed, if it can not finish its job at that time, then the function execution should be aborted. what ways i have to deal with it. i thought i would create a ""settimeout"" for each function with run time, but i can not think of a way to abort the execution of the function, unless it is inside a ""settimeout"" which i could give a "" cleantimeout ""and abort it, but can think of other ways to do this?...  example...timeout:..const eventbus = new eventemitter();..function timeout(parent) {.    this.id = undefined;.    this.parent = parent;.}..timeout.prototype.set = function(limittimems) {.    const parent = this.parent;..    this.id = settimeout(function() {.        eventbus.emit('runend', parent);.    }, limittimems);.}..timeout.prototype.clear = function() {.    cleartimeout(this.id);.}...runner:..function runner() {.  this.tests = [];.  eventbus.on('runend', function(test) {.    console.log('runend');.    // results ready for the preview layer....  });.  eventbus.on('testend', function(test) {.    console.log('testend');.  });.}.runner.prototype.addtest = function(test) {.  this.tests.push(test);.}.runner.prototype.run = function() {.    for(let i = 0; i &lt; this.tests.length; i++).      this.tests[i].run();.}...test:..function test(fn, limit) {.    this.fn = fn;.    this.limit = limit;.    this.timeout = new timeout(this);.}.test.prototype.run = function() {.    this.fn.call(this);.    this.timeout.clear();.    eventbus.emit('testend', this);.}...main:..const runner = new runner();.const test1 = new test(function() {.    this.timeout.set(1);  .    let i = 0;.    while(i &lt; 1000000000).        i++;.});.runner.addtest(test1);.runner.run();....  practical example:...http://playcode.io/197465?tabs=console&amp;script.js&amp;output..i've simplified the maximum, i also have to deal with ""test"" asynchronous. the problem is that i can configure up to ""this.timeout.set(0);"" that still ""fn();"" is executed first, and even though it takes a long while in the ""while"" above, still ""this.timeout.set(0);"" is run after it. i understand that there is a minimum, i think ""4ms"" (depends on the browser) for a ""settimeout"" to be called, what alternatives do i have to be able to handle it? note that i can not modify the ""fn"" function, just add code before or after it...up..i realized that what i was trying to do was absurd for a single thread, of course it might work, if ""settimout(0)"" was executed immediately, but there would still be the problem that the test function would continue its execution, and that is a very ugly way of dealing with the problem. i found another way, because i wanted to avoid a ""stackoverflow"" error, so i made a move based on the @blex example with web worker, it would work, but then i thought, why do i want to avoid a ""stackoverflow""? would not that be bad? how to know if it would cause the error or not, it could be confusing, but still i continued, because i needed to know if i could do it, here it is and it works:..http://playcode.io/198133?tabs=console&amp;index.html&amp;output..but i thought better, i do not want to avoid a ""stack exceeded"" error, if it happens, it's best that i know it. so i'll deal otherwise, which is simpler, i'll pick up the initial time, then the time at the end of the test, compare the duration with the timeout, if it has exceeded, then i make a mistake. the problem, which i do not see as a problem anymore, is that the function will be executed to the end to check if the time has exceeded, and thus not being able to escape a ""stack exceeded"" error."
