"dot separated id's into nested objects this is hard to explain without some sort of example so i'm sorry for the weird title...i have a json object full of data. some of this data is related, but it's all in a single object, not nested. the only way to tell if an object is nested is by looking at the id field...example id's:..[0] =&gt; item_1.[1] =&gt; item_1.item_1a.[2] =&gt; item_1.item_1a.item_1b.[3] =&gt; item_2.[4] =&gt; item_2.item_2a.[5] =&gt; item_3...// 0 is a root item.// 1 would belong to 0.// 2 would belong to 1.// 3 is a root item.// 4 would belong to 3.// 5 is a root item...what i want to end up with is..[0] =&gt; item_1-&gt;subattributes = [0] =&gt; item_1a, [1] =&gt; item 1b.[1] =&gt; item_2-&gt;subattributes = [0] =&gt; item_2a.[2] =&gt; item_3 // since it has no sub attributes i want to remove it....i've tried a few different ways, and i can easily nest one level, but more than one and i get lost...i've tried looping through the attributes, splitting the id by . and then looping over the id parts to sort them, but i am stuck. i'm trying to do this in js...this is everything i've tried so far...some is commented out because it wasn't working properly and i tried a different direction...function getnestedattributes(attrs).{.    var nested = [],.        nestedtmp = 0,.        subattributes = [],.        currindex = 0;.        subindex = 0;..    for ( var i=0; i&lt;attrs.length; i++ ).    {.        // splitid returns an array of elements split by ..        var idlevels = splitid(attrs[i].id),.            flag = false,.            tempobj = {};..        for ( var n=0; n&lt;idlevels.length; n++ ).        {.            // console.log(attrs[i]);..            // array_key_exists is a js function made to mimic php's array_key_exists.            if ( ! array_key_exists(idlevels[n], nested) ).            {.                // console.log(idlevels[n], 'is new');.                if ( ! flag ).                {.                    console.log(idlevels[n], attrs[i].name);.                    nested[idlevels[n]] = attrs[i];.                }.                else.                {.                    // console.log('flag!', idlevels[n], attrs[i].name);.                    console.log(nested[flag]);.                }.            }.            else.            {.                // console.log(idlevels[n], 'is not new');.                flag = idlevels[n];.            }.        }..        // if ( idlevels.length == 1 ).        // {.        //  // parent item.        //  currindex = nested.push(attrs[i]);.        //  subattributes = [];.        // }.        // else.        // {.        //  if ( idlevels.length &gt; 2 ).        //  {.        //      // nestedtmp = nested[currindex-1][subindex];.        //      // subattributes.push(attrs[i]);.        //      console.log(attrs[i].name);.        //  }.        //  else.        //  {.        //      nestedtmp = nested[currindex-1];.        //      // subattributes.push(attrs[i]);.        //  }..        //  subattributes.push(attrs[i]);.        // }..        // // nested[currindex-1].subattributes = subattributes;.        // nestedtmp.subattributes = subattributes;.    }..    //console.log(nested);.}"
