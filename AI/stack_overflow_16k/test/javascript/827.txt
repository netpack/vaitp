"is there anything wrong with this blank dynamic file include system? code:..function stop(reason){.    throw(reason);.}.function pragma_once(file_name){.    if(window[file_name] !== undefined).        stop(""duplicate symbol: ""+file_name);.    window[""__include__""+file_name]=true;.    return true;.}.function include(file_name){.    var x = document.createelement('script');.    x.src = file_name;.    document.getelementsbytagname(""head"")[0].appendchild(x);.}...i've been using node.js and the require() seemed really useful for keeping my code clean, easier to track and easier to read. but as i noticed blank for web doesn't have ""require()"". i found requirejs which adds require() functionality to web blank. but i don't know if using a library is that useful for what seems to be a pretty minor task. so i wrote something that works kind of like like require (more like c #include). the only real problem i noticed is that it loads everything asynchronously. this isn't the final version, but the idea how this functions isn't going to change...are there any underlying problems i do not know? any reason not to use this?"
