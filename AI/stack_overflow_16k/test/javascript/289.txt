"are both blank undefined-safety-pattern equally good? having the follwoing 2 patterns to generate a reliable local variable with the name undefined that should contains undefined is any of the 2 patterns safer (less error-prone / breakable) than the other?..pattern1     .. function(arg1,arg2,....,undefined). { .. }...pattern2.. function(arg1,arg2,....). { .    var undefined;. }...maybe i am just to worried, but the pattern1 type seems breakable by simply passing a variable to the function which then is assigned to the local variable undefined...ps:..also it seems newer browsers (i.e. ff 33 / chromium 37) do not allow this pitfall anymore..window.undefined = ""omg"";.""omg"" == undefined; //true...indeed they produce this..window.undefined = ""omg"";.console.log(window.undefined); // logs undefined and not ""omg"" in ff33/chromium 37...hence making the safety patterns superflous anyway..to me it seems agreeable that window.undefined may never be reset (readonly and being undefined) and in effect i wonder why there has anyway been a browser implementation which allowed for this being-a-bug-only-feature (at least i cannot see a use-case)?"
