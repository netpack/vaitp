"bad juju with for/in loop i have a small script that looks like this:..hideelements = arguments.shift().split ( ',' );.for ( iterator in hideelements ) { .    console.log ('  --&gt; hiding ' + hideelements[iterator] );.    lg_transitions ( {kind:""slide-up""} , { target : hideelements[iterator] } );.}...when i run it in the debugger all things start quite rationally. i put a breakpoint at the first line listed above. after pressing the ""step over next function call"" button to initialise the ""hideelements"" variable to the following:....this is what is what i would have expected but then after completing the first (and should be the only) iteration it comes back to the head of the loop and the ""iterator"" which had started at 0 has now strangely changed to ""remove"". huh? no idea where that came from. but in the console.log message that follows there might be a hint ... it prints the following to the console:....this is a function called -- you guessed it -- ""remove"". it is a function that i added recently for a different reason but it is not called directly or indirectly and so i'm at a loss as to why this would be picked up here. for anyone interested in the full code for ""remove"", here it is:..// array remove - by john resig (mit licensed).array.prototype.remove = function(from, to) {.   var rest = this.slice((to || from) + 1 || this.length);.   this.length = from &lt; 0 ? this.length + from : from;.   return this.push.apply(this, rest);.}...addition:..the code i had neglected to add earlier was the initialisation of the arguments array. here's what i had (note i've since changed the name to ""args"" instead of arguments):..function conditionalformatting ( key , eventobject , setofrules ) {.console.log (""entering conditional formatting: key is "" + key + "", eventobject is "" + eventobject.attr('id') + "", setofrules is "" + setofrules );.var rulestrings = [];.rulestrings = setofrules.split (';');.var targetoverride = false;.jquery.each ( rulestrings , function ( i , rulestring ) {.    // there is a rule, now let's find out which one.    var targetelement;.    var args = [];.    args = rulestring.split('::');.    var rule = args.shift();"
