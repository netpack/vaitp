"blank: what is the 'console' context in the example below? reading through this article about good interview questions for a js coder linked off of hn today and got to the following part:...  next i'd ask a few simple questions designed to show me how well.  candidates understood the arguments object. i'd start off by calling.  the as-yet undefined log function..  .  log('hello world') .  .  then i'd ask the candidates to define log so that.  it proxies its string argument to console.log(). the correct answer is.  something along these lines, but better candidates will often skip.  directly to using apply....function log(msg){   .    console.log(msg); .}....  once that's defined i change the way i call log, passing in multiple.  arguments. i make clear that i expect log to take an arbitrary number.  of arguments, not just two. i also hint to the fact that console.log.  also takes multiple arguments..  .  log('hello', 'world');...the way that the writer explains his solution is via apply:...  hopefully your candidate will jump straight to using apply. sometimes.  they'll get tripped up on the difference between apply and call, and.  you can nudge them to the correct direction. passing the console.  context is also important....function log(){.  console.log.apply(console, arguments);.};...i get here that the log function is leveraging apply and implicitly passing arguments in, so that a call like..log('hello', 'world');...will pass along console.log.apply(console, ['hello', 'world']), though my question is: what is the console context in this example, i.e. the first argument in the apply call above, and where does it come from?"
