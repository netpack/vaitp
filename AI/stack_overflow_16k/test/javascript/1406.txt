"aspect oriented programming without modification of original so, i have seen examples on aop in blank and most of them either are something like this:..var foo = somefunc.after(function() { // after is some function already made.    console.log(""after!"");.});..foo(); // logs ""after""...like this:..var foo = function() {.    console.log(""something"");.};..foo = (function() {.    var original = foo;..    return function() {.        console.log(""before!"");..        original.apply(this, arguments);.    }.})();..foo(); // logs ""before"" then ""after""...or like this:..function foo() {.    console.log(""foo"");.}..var original = foo;.foo = function() {.    original();.    morestuff();.}..function morestuff() {.    console.log(""hi"");.}..foo();.// logs ""foo"" then ""hi""...but, what want is a way that does not modify the original function and you do not have to set it to a variable. what i am looking where the you can do this:..function foo() {.    console.log(""foo!"");.}..foo.after(function() {.    console.log(""after"");.});..// and then..console.log(foo);../* and it will log:. *. * function foo() {. *   console.log(""foo!"");. * }. *. * original function stays the same. */..foo();.// logs ""something"" then ""before""...basically, when the person calls the function it uses the modified version, but when a person just receives the value of the function, foo;, it returns the original..how would one achieve this?"
