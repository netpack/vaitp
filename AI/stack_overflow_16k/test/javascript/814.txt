"why is my script interrupted in js by event handler i've read the following topic is-blank-guaranteed-to-be-single-threaded.there is the good example there:..&lt;textarea id=""log"" rows=""20"" cols=""40""&gt;&lt;/textarea&gt;.&lt;input id=""inp""&gt;.&lt;script type=""text/blank""&gt;.    var l= document.getelementbyid('log');.    var i= document.getelementbyid('inp');.    i.onblur= function() {.        l.value+= 'blurn';.    };.    settimeout(function() {.        l.value+= 'log inn';.        l.focus();.        l.value+= 'log outn';.    }, 100);.    i.focus();.&lt;/script&gt;...the output is..log in.blur.log out...instead of expected..log in.log out.blur...so this basically shows that my event handler on blur was triggered which interrupted the execution of the code within settimeout callback. i've read couple of other articles and explanations stating that code will not be interrupted (run-to-completion principle) except for some corner cases like modal popups (alert, prompt windows). so why is it interrupted in the example case?..the only explanation i can come with is that i manually trigger focus event from the code and at the same time the control of the execution is on js engine. if not triggered manually the blur event during execution of code would be detected by browser and put into the queue which will be processed only after the execution of code is complete (the stack is empty)."
