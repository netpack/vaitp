"determine the 'overtype' mode using blank we are creating a web app to replace an old-school green-screen application. in the green-screen app, as the user presses the insert key to switch between overtype and insert modes, the cursor changes to indicate which input mode the user is currently in. in ie (which is the official browser of the company), overtype mode also works, but there's no visual indication as to whether overtype mode is on or not, until the user starts typing and possibly over-writes existing information unexpectedly. i'd like to put some sort of visual indicator on the screen if in overtype mode...how can you determine if the browser is in 'overtype mode' from blank?..is there some property or function i can query to determine if the browser is in overtype mode? even an ie-specific solution would be helpful, since our corporate policy dictates the browser to use as ie7 (pure torture, btw)...(i do know that one solution is to do check for key presses of the insert key. however, it's a solution that i'd prefer to avoid since that method seems a bit flaky &amp; error-prone because i can't guarantee what mode the user would be in before he/she hits my page. )..the reasoning behind this question:..the functionality of this portion of the green-screen app is such that the user can select from a list of 'preformatted bodies of text'...crude eg... . the excess for this policy is: $xxxxxx       and max limit is:$xxxxxx. date of policy is:             xx/xx/xxxx    and expires     : xx/xx/xxxx. some other irrelevant text...after selecting this 'preformatted text', the user would then use overtype to replace the x's with actual values, without disturbing the alignment of the rest of the text...(to be clear, they can still edit any part of the 'preformatted text' if they so wished. it's just that usually, they just wish to replace specific portions of the text. keeping the alignment is important since these sections of text can end up on printed documents.)..of course, the same effect can be achieved by just selecting the x's to replace first, but it would be helpful (with respect to easing the transition to the web app) to allow old methods of doing things to continue to work, while still allowing 'web methods' to be used by the more tech-savvy users...essentially, we're trying to make the initial transition from the green-screen app to the web app be as seemless as possible to minimise the resistance from the long-time green-screeners."
