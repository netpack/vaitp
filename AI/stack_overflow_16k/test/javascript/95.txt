"do i really need to use protoypes for this in blank? (practical example) can this be written without complexing things with prototypes?..why? the current code does what i want, but it bothers me how trixy it is to follow and how error prone it is, also seems to be performance wasting since things are duplicated. ..aim? the more i spend using prototype and this i get the sense the code would be simpler and more to the point if this was not the case....  especially if the this-functions in systemblueprint can be rewritten to take an instance as argument instead. and if object function log() and out could just be plain objects somehow? how can log or out be extracted outside of systembuilder? ...full code in jsbin...  https://jsbin.com/pigosijaxo/edit?js,console (updated)...// local for each system object.var systemdata = {.    name: '?',.    id: 1,.    actions: [],.    destinations: [].}..// variables shared among all systems.const systemshare = {.    global: 1.}..// this-functions shared among all systems.function systemblueprint() {}.systemblueprint.prototype = {.    run() {.        var length = this.actions.length.        for (var i = 0; i &lt; length; i++) {.            var result = this.actions[i](arguments, this).            if (result &amp;&amp; this.destinations.length &gt; 0) {.                for (var n = 0; n &lt; this.destinations.length; n++) {.                    this.destinations[n].call(null, result).                }.            }.        }.    },.    does(algorithm) {.        this.actions.push(algorithm).        return this.    },.    random(min, max) {.        return math.floor(math.random() * (max - min + 1)) + min;.    }.}..function systembuilder(name) {.    // copy shared methods.    var system = object.create(systemblueprint.prototype).    object.assign(system, json.parse(json.stringify(systemdata))) //deep copy..    system.name = name.    system.id = systemshare.global++..    function log() {}.    log.prototype.local = () =&gt; console.log('fields: ' + json.stringify(object.keys(system))),.    system.log = new log()..    function out(){}.    out.prototype.into = (destination) =&gt; {.        system.destinations.push(destination).        return system.    }.    system.out = new out()..    system.trigger = {}.    function onevent(trigger){.        if(trigger === undefined) return.        trigger.call(null, system.run.bind(system)).        return system.    }.    system.trigger.on = new onevent().    return system.}..var system = new systembuilder().system.my = 'testing'.system.log.local().system.does( () =&gt; 'printing output...').system.out.into(console.log).system.run()"
