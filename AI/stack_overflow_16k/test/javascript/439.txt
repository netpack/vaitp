"how can i get the name of the type of this object in blank? how can i get the type name of an instantiated object whenever it has been through a namespace?..consider these two ways of declaring inheritence:..outside of a module..with this way, there is a function object that is named shark so whenever i ask for myshark.constructor.name, it returns the name of the function that constructor is referencing, which is shark...// fish.function fish() {.   this.fins;.}.fish.prototype.swim = function() {.   console.log(""swim"");.};..// shark.function shark() {.   this.teeth;.}.shark.prototype = new fish;.shark.prototype.constructor = shark;..var myshark = new shark();.console.log(""my shark is: "" + myshark.constructor.name);.// prints =&gt; my shark is: shark...inside a module..that's all fine, but whenever i declare an inheritance structure inside of a module, i usually structure it as below.  the problem with this is that the constructor for yacht references an anonymous function.  therefore, whenever i ask for the myboat.constructor.name it has an empty string.  is there a way that i can still get a string representation of the object's type?..var boats = (function() {.   exports = {};..   // boat.   exports.boat = function() {.      this.crew = 1;.   };.   exports.boat.prototype.sail = function() {.      console.log(""sail"");.   };..   // yacht.   exports.yacht = function() {.      this.decks = 4;.   };.   exports.yacht.prototype = new exports.boat;.   exports.yacht.prototype.constructor = exports.yacht;..   return exports;.}());..var myyacht = new boats.yacht();.console.log(""my boat is: "" + myyacht.constructor.name);.// prints =&gt; my boat is:...i have considered changing how i declare inheritance so that i create named functions inside the module and then expose them through exports as below.  is there any other way to get the same result without having to make named functions and then attaching them to exports?..var drinks = (function() {.   var exports = {};..   // drink.   function drink() {.      this.calories = 130;.   }..   // beer.   function beer() {.      this.alcohol = 8;.   }.   beer.prototype = new drink;.   beer.prototype.constructor = beer;..   exports.drink = drink;.   exports.beer = beer;..   return exports;.}());..var mybeer = new drinks.beer();.console.log(""my drink is: "" + mybeer.constructor.name);.// prints =&gt; my drink is: beer"
