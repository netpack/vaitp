"blank make new wrapper class that inherits all methods from https://github.com/openai/gym/blob/master/gym/core.py:..class wrapper(env):.    r""""""wraps the environment to allow a modular transformation..    this class is the base class for all wrappers. the subclass could override.    some methods to change the behavior of the original environment without touching the.    original code..    .. note::.        don't forget to call ``super().__init__(env)`` if the subclass overrides :meth:`__init__`..    """""".    def __init__(self, env):.        self.env = env.        self.action_space = self.env.action_space.        self.observation_space = self.env.observation_space.        self.reward_range = self.env.reward_range.        self.metadata = self.env.metadata..    def __getattr__(self, name):.        if name.startswith('_'):.            raise attributeerror(""attempted to get missing private attribute '{}'"".format(name)).        return getattr(self.env, name)..    @property.    def spec(self):.        return self.env.spec..    @classmethod.    def class_name(cls):.        return cls.__name__..    def step(self, action):.        return self.env.step(action)..    def reset(self, **kwargs):.        return self.env.reset(**kwargs)..    def render(self, mode='human', **kwargs):.        return self.env.render(mode, **kwargs)..    def close(self):.        return self.env.close()..    def seed(self, seed=none):.        return self.env.seed(seed)..    def compute_reward(self, achieved_goal, desired_goal, info):.        return self.env.compute_reward(achieved_goal, desired_goal, info)...is there any way to automatically inherit the ""env"" class methods, without manually defining them as they did here? similar to how get_attr automatically grabs all the attributes, can we automatically grab all the methods?"
