"differences in blank struct module lengths i'm attempting to use blank's struct module to decode some binary headers from a gps system. i have two types of header, long and short, and i have an example of reading each one below:..import struct.import binascii..packed_data_short = binascii.unhexlify('aa44132845013b078575e40c').packed_data_long = binascii.unhexlify('aa44121ca20200603400000079783b07bea9bd0c00000000cc5dfa33')..print packed_data_short.print len(packed_data_short)..ss = struct.struct('c c c b h h l')..unpacked_data_short = ss.unpack(packed_data_short).print 'unpacked values:', unpacked_data_short..print ''..print packed_data_long.print len(packed_data_long)..sl = struct.struct('c c c b h c b h h b c h l l h h')..unpacked_data_long = sl.unpack(packed_data_long).print 'unpacked values:', unpacked_data_long...in both cases i get the length i am expecting - 12 bytes for a short header and 28 bytes for a long one. in addition all the fields appear correctly and (to the best of my knowledge with old data) are sensible values. all good so far...i move this across onto another computer (running a different version of blank - 2.7.6 as opposed to 2.7.11) and i get different struct lengths using calcsize, and get errors trying to pass it the length i've both calculated and the other version is content with. now the short header is expecting 16 bytes and the long one 36 bytes. ..if i pass the larger amount it is asking for most of the records are find until the ""l"" records. in the long example the first one is as expected but the second one, which should just be 0, is not correct, and consequently the two fields after are also incorrect. in light of the number of bytes the function wants i noticed that it is 4 for each of the ""l""s, and indeed just running struct.calcsize('l') i get 8 for the length in 2.7.6 and 4 for 2.7.11. this at least narrows down where the problem is, but i don't understand why it is happening. ..at present i'm updating the second computer to blank 2.7.11 (will update once i have it), but i can't find anything in the struct documentation which would suggest there has been a change to this. is there anything i have clearly missed or is this simply a version problem?..the documentation i have been referring to is here...edit: further to comment regarding os - one is a 64 bit version of windows 7 (the one which works as expected), the second is a 64 bit version of ubuntu 14.04."
