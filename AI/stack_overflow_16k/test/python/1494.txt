"blank: getting all possible alphabet up to given length def permutations(iterable, r=none):.    # permutations('abcd', 2) --&gt; ab ac ad ba bc bd ca cb cd da db dc.    # permutations(range(3)) --&gt; 012 021 102 120 201 210.    pool = tuple(iterable).    n = len(pool).    r = n if r is none else r.    if r &gt; n:.        return.    indices = list(range(n)).    cycles = list(range(n, n-r, -1)).    yield tuple(pool[i] for i in indices[:r]).    while n:.        for i in reversed(range(r)):.            cycles[i] -= 1.            if cycles[i] == 0:.                indices[i:] = indices[i+1:] + indices[i:i+1].                cycles[i] = n - i.            else:.                j = cycles[i].                indices[i], indices[-j] = indices[-j], indices[i].                yield tuple(pool[i] for i in indices[:r]).                break.        else:.            return..got = permutations(getalltheletters(),4).cnt = 0.for i in got:.    cnt += 1.    print ''.join(i)..print cnt...the above doesnt give 'zzzz' or 'zzz'.i need something like below where it gives:.a, b, c, d...aa, ab, ac, ...aaa, aab.....but do_perm() is hard-coded to loop four times which i dont want to do. ..def getalltheletters(begin='a', end='z'):.    beginnum = ord(begin).    endnum = ord(end).    yield ''.    for number in xrange(beginnum, endnum+1):.        yield chr(number)..def do_perm(l):.    s = set().    for a in getalltheletters():.        for b in getalltheletters():.            for c in getalltheletters():.                for d in getalltheletters():.                    to_add = ""%s%s%s%s"" % (a,b,c,d).                    if to_add != """":.                        s.add(to_add)..    return s..got = do_perm(1).cnt = 0.for i in sorted(got):.    cnt +=1.    print i.print cnt"
