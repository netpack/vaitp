"can functools.partial be used to bind arbitrary positional arguments? suppose you want to define a partial setting the positional arguments in an arbitrary order, i.e. you want to apply partial to str.split fixing the 2nd and 3th arguments. the desired result is the same as:..lambda s: str.rsplit(s, sep, 1) # sep given....(i use str.rsplit(s... instead of s.rsplit(... to make the point more clear)...some approximation using functools.partial is:..partial(str.rsplit, sep=sep, maxsplit=1) # sep given...but str.rsplit doesn't use keyword arguments, only positional...how to fix those arguments in partial?.are the only choices lamda and wrappers?..wrappers are ugly if you want to define the function inline, like defining it for an argument wating for a function. lambda is the defacto here, and partial is the other option, but it seems to lack in this case."
