"shortest way of creating an object with arbitrary attributes in blank? hey, i just started wondering about this as i came upon a code that expected an object with a certain set of attributes (but with no specification of what type this object should be)...one solution would be to create a new class that has the attributes the code expects, but as i call other code that also needs objects with (other) attributes, i'd have to create more and more classes...a shorter solution is to create a generic class, and then set the attributes on instances of it (for those who thought of using an instance of object instead of creating a new class, that won't work since object instances don't allow new attributes)...the last, shortest solution i came up with was to create a class with a constructor that takes keyword arguments, just like the dict constructor, and then sets them as attributes:..class data:.    def __init__(self, **kw):.        for name in kw:.            setattr(self, name, kw[name])..options = data(do_good_stuff=true, do_bad_stuff=false)...but i can't help feeling like i've missed something obvious... isn't there a built-in way to do this (preferably supported in blank 2.5)?"
