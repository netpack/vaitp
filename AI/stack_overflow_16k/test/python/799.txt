"running a .py file in blank that requires input the question i have is really a simple one, and maybe the issue is just myself not knowing the correct parameters for blank with linux. ..the file i am running uses input from the operator both to run the program, and also to get the information to convert, which i will place below:..    initial_lonh = float(input(""nenter ra's hour &gt;&gt;&gt; ""));.    initial_lonm = float(input(""nenter ra's minute &gt;&gt;&gt; ""));.    initial_lons = float(input(""nenter ra's second &gt;&gt;&gt; ""));.    initial_lath = float(input(""nenter dec's hour &gt;&gt;&gt; ""));.    initial_latm = float(input(""nenter dec's minute &gt;&gt;&gt; ""));.    initial_lats = float(input(""nenter dec's second &gt;&gt;&gt; ""));...the issue when i run this in blank as ""blank galaxyconverter.py, the following error appears: .. traceback (most recent call last):.   file ""galaxyconverter.py"", line 105, in &lt;module&gt;.     input_runner = str(input(""ndo you wish to convert right ascension and declination into cartesian?"".   file ""&lt;string&gt;"", line 1, in &lt;module&gt;. nameerror: name 'yes' is not defined...it seems the issue is that the file does not know to take the command i put into the terminal as input for the blank file. may i ask what i should do to fix this? ..the entire code is below: ..from math import radians, sin, cos, sqrt, asin, atan..minute_con = 60;.second_con = 3600;.dt_radians = 0.0174539252;.rt_degrees = 57.29577951;.radi_verse = 879829141200000000000000;.wrunner = true...def hms_expand_lon(longitudeh, longitudem, longitudes):.    ##{.    print(""n the right ascension starts as "" + str(longitudeh) + "":"" + str(longitudem) + ""."" + str(longitudes));.    longitudem = longitudem/minute_con;.    longitudes = longitudes/second_con;.    longitudehms = longitudeh + longitudem + longitudes;.    longitudehms = longitudehms * 15;.    print(""n the right ascension becomes "" + str(longitudehms));.    return longitudehms.    ##}..def hms_expand_lat(latitudeh, latitudem, latitudes):.    ##{.    print(""n the declination starts as "" + str(latitudeh) + "":"" + str(latitudem) + ""."" + str(latitudes));.    latitudem = latitudem/minute_con;.    latitudes = latitudes/second_con;.    latitudehms = latitudeh + latitudem + latitudes;.    latitudehms = latitudehms * 15;.    print(""n the declination becomes "" + str(latitudehms));.    return latitudehms.    ##}..def hms_convert_lon(longitudehms):.    ##{.    longituderad = longitudehms * dt_radians;.    print(""n the right ascension becomes "" + str(longituderad));.    return longituderad.    ##}..def hms_convert_lat(latitudehms):.    ##{.    latituderad = latitudehms * dt_radians;.    print(""n the declination becomes "" + str(latituderad));.    return latituderad.    ##}..def rad_convert_lon(longituderad, latituderad):.    ##{.    con_lon = longituderad * longituderad;.    con_lat = latituderad * latituderad;.    con_lat_lon = sqrt(con_lat + con_lon);.    print(""n the right ascension becomes "" + str(con_lat_lon));.    return con_lat_lon.    ##}..def rad_convert_lat(longituderad, latituderad):.    ##{.    con_lon = longituderad;.    con_lat = latituderad;.    con_lon_lat = atan(con_lon / con_lat);.    print(""n the declination becomes "" + str(con_lon_lat));.    return con_lon_lat.    ##}..def pol_convert_lon(longitudepol, latitudepol):.    ##{.    pol_lon = longitudepol * cos(latitudepol);.    deg_lon = pol_lon * rt_degrees;.    print(""n x finally becomes "" + str(deg_lon));.    return deg_lon.    ##}..def pol_convert_lat(longitudepol, latitudepol):.    ##{.    pol_lat = longitudepol * sin(latitudepol);.    deg_lat = pol_lat * rt_degrees;.    print(""n y finally becomes "" + str(deg_lat));.    return deg_lat.    ##}..def main():.    ##{.    initial_lonh = float(input(""nenter ra's hour &gt;&gt;&gt; ""));.    initial_lonm = float(input(""nenter ra's minute &gt;&gt;&gt; ""));.    initial_lons = float(input(""nenter ra's second &gt;&gt;&gt; ""));.    initial_lath = float(input(""nenter dec's hour &gt;&gt;&gt; ""));.    initial_latm = float(input(""nenter dec's minute &gt;&gt;&gt; ""));.    initial_lats = float(input(""nenter dec's second &gt;&gt;&gt; ""));.    lon_expanded = hms_expand_lon(initial_lonh, initial_lonm, initial_lons);.    lat_expanded = hms_expand_lat(initial_lath, initial_latm, initial_lats);.    lon_converted = hms_convert_lon(lon_expanded);.    lat_converted = hms_convert_lat(lat_expanded);.    lon_rad = rad_convert_lon(lon_converted, lat_converted);.    lat_rad = rad_convert_lat(lon_converted, lat_converted);.    lon_pol = pol_convert_lon(lon_rad, lat_rad);.    lat_pol = pol_convert_lat(lon_rad, lat_rad);.    x_scaled = lon_pol / radi_verse;.    y_scaled = lat_pol / radi_verse;.    print(""n   to scale of the theoretical length of universe, x = "" + str(x_scaled));.    print(""n   to scale of the theoretical length of the universe, y = "" + str(y_scaled));.    ##}...while wrunner == true:.    input_runner = input(""ndo you wish to convert right ascension and declination into cartesian?"".                             ""nif so, please type yes, if not, please type no &gt;&gt;&gt; "");.    if input_runner == ""yes"":.        main();.    if input_runner != ""yes"":.        break"
