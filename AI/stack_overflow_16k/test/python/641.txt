"dictionary-like class with keys that can be get/set like attributes and pre-defined attributes i would like to create a class (""myclass"") that can accept a dictionary as an argument:..&gt;&gt;&gt; d = {'key1', 'value1', 'key2', 'value2'}.&gt;&gt;&gt; obj = myclass(d)...the dictionary keys can be accessed as attributes:..&gt;&gt;&gt; obj.key1.'value1'...the dictionary keys can be set like attributes:..&gt;&gt;&gt; obj.key2 = 'a new value'.&gt;&gt;&gt; obj.key2.'a new value'...an exception is raised if a key is accessed that wasn't in the dictionary:..&gt;&gt;&gt; obj.key3.attributeerror: 'myclass' object has no attribute 'key3'...there are also a few valid attributes that aren't in the dictionary but are settable. myclass would know about them internally...&gt;&gt;&gt; obj.valid_attribute1 = 'this is a valid attribute'...other attributes (that aren't valid) aren't allowed:..&gt;&gt;&gt; obj.invalid_attribute = 5.attributeerror: 'myclass' object has no attribute 'invalid_attribute'...i think this is similar to how a pandas series object works:..&gt;&gt;&gt; import pandas as pd.&gt;&gt;&gt; import numpy as np.&gt;&gt;&gt; s = pd.series(np.array([1,2]),index=['a','b']).&gt;&gt;&gt; s.a = 3.&gt;&gt;&gt; s.a    3.b    2.dtype: int32"
