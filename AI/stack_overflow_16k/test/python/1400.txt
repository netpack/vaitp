"mutating objects referenced by class attributes through instance methods this is a two-part query, which broadly relates to class attributes referencing mutable and immutable objects, and how these should be dealt with in code design. i have abstracted away the details to provide an example class below. ..in this example, the class is designed for two instances which, through an instance method, can access a class attribute that references a mutable object (a list in this case), each can “take” (by mutating the object) elements of this object into their own instance attribute (by mutating the object it references). if one instance “takes” an element of the class attribute, that element is subsequently unavailable to the other instance, which is the effect i wish to achieve. i find this a convenient way of avoiding the use of class methods, but is it bad practice?..also in this example, there is a class method that reassigns an immutable object (a boolean value, in this case) to a class attribute based on the state of an instance attribute. i can achieve this by using a class method with cls as the first argument and self as the second argument, but i’m not sure if this is correct. on the other hand, perhaps this is how i should be dealing with the first part of this query?..class foo(object):.    mutable_attr = ['1', '2'].    immutable_attr = false..    def __init__(self):.        self.instance_attr = []..    def change_mutable(self):.        self.instance_attr.append(self.mutable_attr[0]).        self.mutable_attr.remove(self.mutable_attr[0])..    @classmethod.    def change_immutable(cls, self):.        if len(self.instance_attr) == 1:.            cls.immutable_attr = true...eggs = foo().spam = foo()"
