"how to retrieve original @classmethod, @staticmethod or @property i understand that @decorator.decorator doesn't allow to decorate above @staticmethod, @classmethod (and perhaps also @property). i understand the usage:..class a(object):.    @classmethod.    @mydecorator.    def my_method(cls): pass...but, in a debugging module, i still want to try to do it dynamically. so i was wondering what is the way to retrieve the original method from those descriptor(?). i've read few responses, but i'm still confused.....i see some example with a class, and retrieving:..class my_class(property):.    def __get__(self, obj, cls):.        return self.fget.__get__(none, cls)...i love the signature-preserving of decorator, but still not sure how to do this. the logic i try to implement is:..import decorator..def mydecorator(f, *d_args, **d_kwargs):.    if (isinstance(f, classmethod)):.        return classmethod(mydecorator(f.__get__.?whatelse?)).    elif (isinstance(f, staticmethod)):.        return staticmethod(mydecorator(f.__get__.?whatelse?)).    elif (isinstance(f, property)):.        return property(mydecorator(f.__get__.?whatelse?)).    else:.        return decorator.decorator(f)...i'm trying to do this in blank 2.6, so i also welcome pointing that @decorator is changed (corrected?) in future version of blank...thanks."
