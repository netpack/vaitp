"proxy object in blank i'm looking for way to pass method calls through from an object (wrapper) to a member variable of an object (wrappee). there are potentially many methods that need to be externalised, so a way to do this without changing the interface of the wrapper when adding a method to the wrappee would be helpful...class wrapper(object).  def __init__(self, wrappee):.    self.wrappee = wrappee..  def foo(self):.    return 42..class wrappee(object):.  def bar(self):.    return 12..o2 = wrappee().o1 = wrapper(o2)..o1.foo() # -&gt; 42.o1.bar() # -&gt; 12.o1.&lt;any new function in wrappee&gt;() # call directed to this new function ...it would be great if this call redirection is ""fast"" (relative to a direct call, i.e. not adding too much overhead)."
