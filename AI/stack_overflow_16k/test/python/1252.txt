"an alternative to counter objects in for loops in the below code snippet, is there a more blankic way to iterate over each object in a list while increasing the index of another? i use this idiom frequently, thinking there is a better method...# creates a dictionary with normalized values for the dataset..def exp_pull(sample, gene):.    sample_name = {genes: values for genes, values in .                    zip([v for i, (j, k) in set_list[int(sample) - 1:int(sample)] .                    for v in j], mean_values)}.    return round(sample_name.get(gene), 3)...# pulls normalized expression values for particular genes for all samples..genes_of_interest = ['erg', 'etv1', 'etv4', 'etv5']..count = 0.for gene in genes_of_interest:.    print 'n'.    print genes_of_interest[count], ':'.    for file in file_list:.        print file, "": "", exp_pull(file_list.index(file) + 1, .                                    genes_of_interest[count]).    count += 1"
