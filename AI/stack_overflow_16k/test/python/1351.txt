"improve my code to group same words in a large list blank and comparison to other code i've been reading some of the other links ( what is a good strategy to group similar words? and fuzzy group by, grouping similar words) that are related to group similar words.  i'm curious (1) if someone can give me guidance as to how one of the algorithms i found in the second link works and (2) how the style of the programming compares to my own 'naive' approach? ..if you can even just answer either 1 or 2, i'll give you an upvote. ..(1) can someone help step me through what's going on here?..class seeder:.    def __init__(self):.        self.seeds = set().        self.cache = dict().    def get_seed(self, word):.        limit = 2.        seed = self.cache.get(word,none).        if seed is not none:.            return seed.        for seed in self.seeds:.            if self.distance(seed, word) &lt;= limit:.                self.cache[word] = seed.                return seed.        self.seeds.add(word).        self.cache[word] = word.        return word..    def distance(self, s1, s2):.        l1 = len(s1).        l2 = len(s2).        matrix = [range(zz,zz + l1 + 1) for zz in xrange(l2 + 1)].        for zz in xrange(0,l2):.            for sz in xrange(0,l1):.                if s1[sz] == s2[zz]:.                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz]).                else:.                    matrix[zz+1][sz+1] = min(matrix[zz+1][sz] + 1, matrix[zz][sz+1] + 1, matrix[zz][sz] + 1).        return matrix[l2][l1]..import itertools..def group_similar(words):.    seeder = seeder().    words = sorted(words, key=seeder.get_seed).    groups = itertools.groupby(words, key=seeder.get_seed)...(2) .in my approach i have a list of strings i want to group called residencylist and used default dictionaries...array(['psychiatry', 'radiology medicine-prelim',.       'radiology medicine-prelim', 'medicine', 'medicine',.       'obstetrics/gynecology', 'obstetrics/gyncology',.       'orthopaedic surgery', 'surgery', 'pediatrics',.       'medicine/pediatrics',])...my effort to group. i base it off uniquereslist, which is np.unique(residencylist) ..d = collections.defaultdict(int).for i in residencylist:.    for x in uniquereslist:.        if x ==  i:.            if not d[x]:.                #print i, x.                d[x] = i  .                #print d.            if d[x]:.                d[x] = d.get(x, ()) + ', ' + i.        else:.            #print 'no match'.            continue"
