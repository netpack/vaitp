"finding most probable region in random matrix i spent days struggling with what should be a simple problem.....i have 100 thousand 11x11 matrices. i want to know in which area of these matrices it is more likely that the data concentrates. as my data is noisy i use a sliding window of 3x3, and for each of my 100k matrices, i keep the coordinates of the sliding window that sums more counts. at the end i visualize in which part of the matrices i found more counts...here is an example of code to reproduce the problem:..from random import random.from matplotlib import pyplot as plt.import numpy as np..size = 11..positions = np.zeros((size, size))..for _ in range(100000):.    matrix = [[random() for _ in range(size)] for _ in range(size)].    max_value = 0.    max_coord = 0, 0.    for beg in range(1, size - 1):.        for end in range(1, size - 1):.            suma = sum(matrix[i][j] .                       for i in range(beg - 1, beg + 2) .                       for j in range(end - 1, end + 2)).            if suma &gt;= max_value:.                max_value = suma.                max_coord = beg, end.    positions[max_coord] += 1..plt.imshow(positions[1:10,1:10], origin='lower').plt.colorbar()...in the example i use random matrices (i have used different kind of random generators), and a window size of 3x3 (same result with 2x2, 5x5 etc.. hopefully not with 1x1)...my problem is that, as i am using random matrices as input, i expect to have a random final matrix, but i got this:....the distribution of values is like:...i know this looks like a stupid mistake in the code, but i really run out of ideas...edit..just in order to avoid repeating analysis:. what i have tried so far (in bold the one in the example above):...window sizes:...1x1 (working).2x2 (not working -> similar to above).3x3 (not working -> similar to above).5x5 (not working -> similar to above)..window step:...1 -> overlapping (not working).2 -> not-overlapping (not working)..randomization...random.random.lognormal.binomial (n=100, p=0.2 and p=0.5)...edit 2...@jhc is right it is a probabilistic effect, my solution to circumvent the problem is to use non overlapping windows. example result: ....... not as nice but at least correct :)..edit 3..i posted a follow-up question in https://math.stackexchange.com in order to know if this bias can be modelled: https://math.stackexchange.com/questions/3281256/bias-in-getting-submatrix-of-higher-sum-in-random-matrices"
