"how to open a large file from a url into memory and create a hash in blank i am trying to create a function that will open files up to 20mb from a url into memory.  i need to create a consistent hash...this is be closest i could get...import os, hashlib, optparse, requests..def get_remote_sha_sum(url):..  url_file = requests.get(url).  sha1 = hashlib.sha1()..  with open(url_file, ""rb"") as f:.    while true:.      data = f.read(65536).      if not data:.        break.      sha1.update(data)..  return sha1.hexdigest()..if __name__ == '__main__':.  opt = optparse.optionparser().  opt.add_option('--url', '-u', default='https://www.w3.org/wai/er/tests/xhtml/testfiles/resources/pdf/dummy.pdf')..  options, args = opt.parse_args().  print get_remote_sha_sum(options.url)...but it results in:..typeerror: coercing to unicode: need string or buffer, response found..i have tried dozens of things.'i went down the path of using bitesio in which i am met with the same error message...how do i open a large file in memory, buffer it, and create a hash? ..pls be kind, i'm still a little new to blank."
