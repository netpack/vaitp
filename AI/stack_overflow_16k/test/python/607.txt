"blank object initialize is not behaving logically(attributes act as static variables) we have three class blocktag,rowtag and columntag.rowtag and columntag both extend from blocktag.you can see them below:..blocktag:..class blocktag(object):..    def __init__(self,font=none,content="""",border=none,right_border=none,left_border=none,top_border=none,bottom_border=none,text_alignment=none,forecolor=none,backcolor=none):.        self.content=content.        self.border=border.        self.right_border=right_border.        self.left_border=left_border.        self.top_border=top_border.        self.bottom_border=bottom_border.        self.text_alignment=text_alignment.        self.forecolor=forecolor.        self.backcolor=backcolor.        self.font=font..    def __getitem__(self, item):.        try:.            return getattr(self,item).        except attributeerror:.            return none;...rowtag:..class rowtag(blocktag):..        def __init__(self,font=none,content="""",border=none,right_border=none,left_border=none,top_border=none,bottom_border=none,text_alignment=none,forecolor=none,backcolor=none,skipinhtml=none,skipinpdf=none,skipinexcel=none,inner_td_tags=none):.            super(rowtag,self).__init__(font=font,content=content,border=border,right_border=right_border,left_border=left_border,top_border=top_border,bottom_border=bottom_border,text_alignment=text_alignment,forecolor=forecolor,backcolor=backcolor,).            self.inner_td_tags=inner_td_tags #if inner_td_tags else [].            self.skipinexcel=skipinexcel.            self.skipinhtml=skipinhtml.            self.skipinpdf=skipinpdf..        def __iter__(self):.            return  iter(self.inner_td_tags);..        def add_td_tags(self,*input_td_tags):..            for i in input_td_tags:.                self.inner_td_tags.append(i).            return self;..        def __getitem__(self, item):.            try:.                return getattr(self,item).            except attributeerror:.                 return none;...columntag:..class columntag(blocktag):..    def __init__(self,font=none,content="""",border=none,right_border=none,left_border=none,top_border=none,bottom_border=none,text_alignment=none,forecolor=none,backcolor=none,image=none,row_span=none,col_span=none,width=none,verticaltext=none,verticalalign=none):..        super(columntag,self).__init__(font=font,content=content,border=border,right_border=right_border,left_border=left_border,top_border=top_border,bottom_border=bottom_border,text_alignment=text_alignment,forecolor=forecolor,backcolor=backcolor)..        self.image=image.        self.row_span=row_span.        self.col_span=col_span.        self.width=width.        self.verticaltext=verticaltext;.        self.verticalalign=verticalalign;..    def __getitem__(self, item):.        try:.            return getattr(self,item).        except attributeerror:.            return none;...the problem is that when i create two object of type rowtag the second object has the columns of first object!(as we know objects should be independent)..r1=rowtag().add_td_tags(.    columntag(),.    columntag(),.    columntag(),.)..r2=rowtag()..print(""size=&gt;"").print(len(r2.inner_td_tags))#prints 3!!!!...i would be apperciate if you can help me even a bit."
