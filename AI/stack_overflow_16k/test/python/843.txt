"in blank, how do i access an objects property if i know its identifier? here is a simple class:..class daz:.    def __init__ (self, vname, vvalue):.        self.name = vname.        self.value = vvalue...and i can create an instance of the class, added to a dictionary thus:..dictofdaz = [].dictofdaz.append(daz('obj1',25)).dictofdaz.append(daz('obj2',35))...so, i now want to access the vvalue property of one of the instances where i know the name...in pseudo-code:..get vvalue from instance of daz where daz.name == 'obj1'...i don't want to loop through the dictionary because i know the specific object names i need to reference and having to do..for d in dictofdaz:.  if d.name == 'obj1' or d.name == 'obj2':.    do_this...seems inefficient to me...update:.having got confused between a list and a dict, the solution (as pointed pointed out by tom and others) is as follows:..class daz:.    def __init__ (self, vname, vvalue):.        self.name = vname.        self.value = vvalue..dictofdaz = {}..dictofdaz['obj1'] = daz('obj1',25).dictofdaz['obj2'] = daz('obj2',35).dictofdaz['obj3'] = daz('obj3',45).dictofdaz['obj4'] = daz('obj4',55)...this then allows me to access the values of the instances by:..print getattr(dictofdaz['obj1'], 'value')...which solves my problem, perfectly!"
