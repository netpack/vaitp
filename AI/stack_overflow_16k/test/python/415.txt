"where should i save the ""int"" type in the heap structure? def interpretdtree(d) :.    """"""pre: d  is a declaration represented as a dtree:.       dtree ::=  [""int"", id, etree].       post:  heap is updated with  d.    """"""..    operator = d[0].    if operator == ""int"" : # declaration [""int"", id, etree].        id = d[1].        typeid = [""int"", id].        etree = d[2].        rval = interpretetree(etree).        declare (activens(), typeid, rval)   .    else : # error.        crash(""invalid dtree"")...after adding typeid = [""int"", id], i get the error..typeerror: unhashable type: 'list'...heap structure:..heap : { (handle : namespace)+ }...where  handle = a string, e.g.,  'h1', and namespace = a dictionary that maps var names to ints or to handles.  also contains a ""parents"" link to more-global vars...why i want to add ""int"" in the typeid?.because i want to declare the variable with the type ""int"", however, i do not know where should i store the ""int"" in the heap."
