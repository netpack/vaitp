"blank: represent a number as a sum of prime numbers i need to write an algorithm, that can represent a number as a min sum of prime numbers:..for example:.8 -> [2, 2, 2, 2], [3, 5], [2, 3, 3] .and i need get min len of this => 2..i've written the code, but it takes a lot of time, because it contains recursion. how can i change it to improve time?..import sys..x = int(sys.stdin.readline())..def is_prime(n):.    for i in range(2, n):.        if n % i == 0:.            return false.    return true..def decomposition(x):.    result = [].    for a in range(2, int(x/2 + 1)):.        if x-a &gt;= 2:.            b = x - a.            pair = [a, b].            result.append(pair).    return result..def f(elem):.    list_of_mins = [].    if is_prime(elem) == true:.        return 1.    else:.        pairs = decomposition(elem).        print(pairs).        for a,b in pairs:.            list_of_mins.append(f(a)+f(b)).        return min(list_of_mins)...if str(int(x)).isdigit() and 2 &lt;= int(x) &lt;= 10 ** 9:.    sum = []import sys..x = int(sys.stdin.readline())..def is_prime(n):.    for i in range(2, n):.        if n % i == 0:.            return false.    return true..def decomposition(x):.    result = [].    for a in range(2, int(x/2 + 1)):.        if x-a &gt;= 2:.            b = x - a.            pair = [a, b].            result.append(pair).    return result..def f(elem):.    list_of_mins = [].    if is_prime(elem) == true:.        return 1.    else:.        pairs = decomposition(elem).        print(pairs).        for a,b in pairs:.            list_of_mins.append(f(a)+f(b)).        return min(list_of_mins)...if str(int(x)).isdigit() and 2 &lt;= int(x) &lt;= 10 ** 9:.    sum = [].    print(f(x))"
