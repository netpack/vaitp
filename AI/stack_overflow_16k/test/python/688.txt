"2 different results when expecting the same..why? when running the code, please see below, input is ('zoe', 14), i get as result 8, running the 'finding buckets' code in the online blank tutor also with ('zoe', 14), where ""def hash_string"" is included, the result is 2 out 2, when that code finished, why? or, in other words, does the other 2 defs causing that result?..in the 'finding buckets' code are 3 def. i exchanged the order of those def - the results are the same-does the order really does not matter?..def hash_string(keyword,buckets):.out = 0.for s in keyword:.out = (out + ord(s)) % buckets.return out..online blank tutor ""finding buckets"":..1 def hashtable_get_bucket(table,keyword):..2 return table[hash_string(keyword,len(table))].3.4 def hash_string(keyword,buckets):.5 out = 0.6 for s in keyword:.7 out = (out + ord(s)) % buckets.8 return out.9.10 def make_hashtable(nbuckets):.11 table = [].12 for unused in range(0,nbuckets):.13 table.append([]).14 return table.15 table = [[['francis', 13], ['ellis', 11]], [], [['bill', 17],.16 ['zoe', 14]], [['coach', 4]], [['louis', 29], ['rochelle', 4], ['nick', 2]]].17 print hashtable_get_bucket(table, ""zoe"")...    def hashtable_get_bucket(table,keyword):.         return table[hash_string(keyword,len(table))]..    def hash_string(keyword,buckets):.         out = 0.         for s in keyword:.            out = (out + ord(s)) % buckets.         return out..   def make_hashtable(nbuckets):.         table = [].         for unused in range(0,nbuckets):.            table.append([]).         return table...here the comment from the notes:..function hashtable_get_bucket returns the bucket containing the given keyword, from the hash .table, passed in as the first argument...if you remember structure of a hash table, you will find out that it is composed of n buckets, one of .which needs to be returned by the hashtable_get_bucket function. index of the bucket, which .would eventually contain the given keyword (in case the keyword will be present in the hash table), .is computed and returned by already defined function hash_string...the function hash_string will in turn take the keyword and number of buckets as its .arguments. first argument (the keyword) is straightforward, since it was passed directly to .hashtable_get_bucket function by its caller. the second argument (number of buckets) can be .computed using len function on the hashmap (recall how hashmap is composed of n buckets)."
