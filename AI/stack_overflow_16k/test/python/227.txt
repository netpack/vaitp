"using descriptor to access variable instead of binding this variable with the target in the instance i have just been reading momoko docs, and came across the following class:..class basehandler(requesthandler):.    @property.    def db(self):.        return self.application.db...every time we want to access db attribute of base_handler instance of basehandler, the db(self) will be called, returning self.application.db...what is the advantage of this code over the following?..class basehandler(requesthandler):.    def __init__(self):.        self.db = self.application.db...this will bind instance variable db to self.application.db. ..i understand that the former approach will avoid us of having self.db in each instance. on the other hand, self.application.db has extra attribute resolution step (extra .)...are there any advantages of the former approach that i don't see?"
