"find the common superstring from given list of strings in blank i have my strings in my input ..'attagacctg', 'cctgccggaa', 'agacctgccg', 'gccggaatac'...in output i want the common shortest superstring.  ..attagacctgccggaatac...i have completed it using the lambda expression but i want it without lambda expression.  ..from itertools import *.print min((reduce(lambda s,w:(w+s[max(i*(s[:i]==w[-i:])for i in range(99)):],s)[w in s],p).for p in permutations(input())),key=len)  ...i tried it without using lambda expression and got wrong output.  ..from itertools import permutations..def solve(*strings):.   """""".   given a list of strings, return the shortest string that contains them all..   """""".   return min((simplify(p) for p in permutations(strings)), key=len)..def prefixes(s):.   """""".   return a list of all the prefixes of the given string (including itself), in ascending order (from shortest to longest)..   """""".   return [s[:i+1] for i in range(len(s))].   return [(i,s[:i+1]) for i in range(len(s))][::-1]..def simplify(strings):.    """""".    given a list of strings, concatenate them wile removing overlaps between.    successive elements..    """""".    ret = ''.    for s in strings:.        if s in ret:.            break.        for i, prefix in reversed(list(enumerate(prefixes(s)))):.            if ret.endswith(prefix):.                ret += s[i+1:].                break.        else:.            ret += s.    return ret..print solve('attagacctg', 'cctgccggaa', 'agacctgccg', 'gccggaatac')  ...my wrong output:  ..attagacctgccggaa"
