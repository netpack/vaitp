"typeerror string indices must be integers not str blank i have defined a function get_class_average() having one argument ""students"". students is a list of 3 students: lloyd, alice, tyler, which are indirectly dictionaries. get_average() is a function that calculates average and it works fine. when i try to call the function get_class_average() i'm getting error:..typeerror string indices must be integers not str...my code..lloyd = {.    ""name"": ""lloyd"",.    ""homework"": [90.0, 97.0, 75.0, 92.0],.    ""quizzes"": [88.0, 40.0, 94.0],.    ""tests"": [75.0, 90.0].}.alice = {.    ""name"": ""alice"",.    ""homework"": [100.0, 92.0, 98.0, 100.0],.    ""quizzes"": [82.0, 83.0, 91.0],.    ""tests"": [89.0, 97.0].}.tyler = {.    ""name"": ""tyler"",.    ""homework"": [0.0, 87.0, 75.0, 22.0],.    ""quizzes"": [0.0, 75.0, 78.0],.    ""tests"": [100.0, 100.0].}..# add your function below!.from math import *.def average(numbers):.    total = sum(numbers).    total = float(total).    ans = total / len(numbers).    return ans.num = [1,2,4,5,6].a = average(num).print a..def get_average(student):.    homework = average(student[""homework""]).    quizzes = average(student[""quizzes""]).    tests = average(student[""tests""]).    sum = (0.1*homework) + (0.3 * quizzes) + (0.6 * tests).    return sum..student = [lloyd, alice, tyler].for key in student:   .    a = get_average(key).    print a..def get_letter_grade(score):.    if score &gt;= 90:.        return ""a"".    elif score &gt;= 80:.        return ""b"".    elif score &gt;= 70:.        return ""c"".    elif score &gt;= 60:.        return ""d"".    else:.        return ""f""..avg = get_average(lloyd).t = get_letter_grade(avg).print t...def get_class_average(students):.    results = [].    students = [lloyd, alice, tyler].    a= get_average(students).    r= results.append(a).    return r..student = [lloyd, alice, tyler].for key in student:   .    a = get_class_average(key)..print a"
