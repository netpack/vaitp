"how to combign callable enum with multivalueenum (aenum) i am trying to use a callable enum to do natural language interpolation of simple functions. this means my enum needs to be fetched with a token, but also hold a lambda function for use...i found code as follows to make the callable aspect i needed;..class funcenum(enum):.    def __init__(self, val, func=none):.        self.val = val.        self.func = func or (lambda x, y: none).    def __call__(self, *args, **kwargs):.        return self.func(*args, **kwargs)...but, i also need to retrieve the enum using its first value. doing this typically requires aenum...class operators(funcenum):.    add = ('+', lambda x, y: x+y).    sub = ('-', lambda x, y: x-y).    mult = ('*', lambda x, y: x*y).    div = ('/', lambda x, y: x/y)..    @staticmethod.    def do(token, x, y):.        opr = operators(token).        return opr(x,y)...tldr; i need my 'do' method to work..i know these four can be simplified, but i'm looking to add more once these four work for more complicated operations."
