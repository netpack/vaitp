"is it okay for tight loops to make calls to other files? i'm wondering whether it is bad practice for a loop to repeatedly make calls to other files in blank, or does blank handle this better than i'm thinking?..i have a package that looks like:..__init__.py.main.py.utils.py...main.py..import utils..def main_loop():.    urls = [list_with_many_strings].    for url in urls:.        data = utils.get_data(url).        print(data)...utils.py..import requests.from bs4 import beautifulsoup..def get_data(url):.    page = requests.get(url).    soup = beautifulsoup(page.text).    data = soup.find(id='spam').    return data...my question is whether it is wrong to make calls to other files like this in general. does blank have to reference utils.py with each iteration through the loop? or does it just need to cache the get_data() function a single time?..this is a pretty basic example, but i am running into memory errors with functions that make calls to other files repeatedly, and i'm wondering if this is the reason why."
