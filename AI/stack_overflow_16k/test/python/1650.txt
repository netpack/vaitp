"object has no attribute error when blank file is called from another blank file i have two blank files cron.py and workflow.py. workflow.py process files which are newly created and cron.py calls workflow.py every 5 seconds using scheduler...when i execute cron.py, the code works fine until all files to be processed. but as soon as there are no files to process, cron.py throws attribute error:..error:root:'cron' object has no attribute.traceback (most recent call last):.  file ""c:workflow.py"", line 371, in start.    self.setuploggingtofile().attributeerror: 'cron' object has no attribute 'setuploggingtofile'...below is my cron code:..import schedule.from workflow import workflow as w.import time.class cron:..    def start_job(self):.        print('************cron job cycle started**************').        w.start(self).        print('************cron job cycle ended **************')..    def start(self):..        scheduler = schedule().        scheduler.every(5).seconds.do(self.start_job()).        while 1:.            scheduler.run_pending().            time.sleep(1)..a = cron().a.start_job()...and workflow.py code:..import os.import subprocess.import pyodbc.import time.from multiprocessing.dummy import pool as threadpool.from lxml import etree.import os.path.import datetime.from os import listdir.from os.path import isfile, join.import logging.import logging.handlers.from logging.handlers import rotatingfilehandler.import json.import pandas.class workflow:..    def setuploggingtofile(self):.        logging.basicconfig(.                            # filemode='a',.                            format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',.                            datefmt= '%m-%d-%y %h:%m:%s',.                            level=logging.debug,.                            handlers=[rotatingfilehandler('c:/exceptionlogfiles/mylogs', maxbytes = 10485760, backupcount=100)].                            )...    def start(self):..        try:.            print('cron started..').            # self.createfolders().            self.setuploggingtofile()..            print('files folder setup completed ..')..            #get number of files which are not processed..            files = self.getrequestedfilescount()...            if files[0] &gt; 0:.                print(str(files[0]) + "" files to be processed.."")..                # get filing ids and status of files which are to be processed.                resultset = self.getrequestedfileinfo()..                filingid = []..                for fileid, status in resultset:.                    filingid.append(str(fileid) + ""##"" + str(status))...                #create threads based on number of filings ids to be processed..                pool = threadpool(len(filingid)).                results = pool.map(self.processfile,filingid) ## process the filingids in parallel..                pool.close().                pool.join().            else:.                print(""no files to be processed."")..        except attributeerror:.            logging.exception(""'cron' object has no attribute "", exc_info=true).        except exception:.            logging.exception(""processfile function: filing id: {} "".format(filingid), exc_info=true)....a = workflow().a.start()...any idea how to tell cron.py to stop peacefully without exception?"
