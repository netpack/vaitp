"ways to set per instance __call__? what i want to do is something like:..class foo(object):.    def __init__(self):.        pass.    def f(self):.        print ""f"".    def g(self):.        print ""g""...# programatically set the ""default"" operation.fer=foo().fer.__call__=fer.f..# a different instance does something else as its.# default operation.ger=foo().ger.__call__=ger.g..fer()  # invoke different functions on different.ger()  # objects depending on how they were set up....but as of 2.7 (which i'm currently using) i can't do this, the attempts at fer().raise an exception...is there a way to, in effect, set a per instance __call__ method?"
