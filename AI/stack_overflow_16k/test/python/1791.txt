"getting individual values from a nested list i'm currently trying to find similarities between multiple (~580) .csv files. the way i want to do this looks like this: ...put all the files in a list stored in variable.open each file one by one.split each file so each line is a list.get the header and data from the opened file and store them each in their own variable (headers and filelist).make each value inside a sublist(?), which stands for a file, unique..create a loop in which each file is compared to the filelist.if step 6 finds values which are similar to the file, print out the name of the file + the value...the filelist (completed step 4) looks like this: ..[['00000000b847912e,,1,1,1,1,1,1,1,1,1,1,alg0,,1,1,1,1,1,1,1,1,1,1,&lt;&gt;z*,,0,1,aut-analyse,0,0,1,25.10.2017, 09:38:42,0,0,1,3,1,1,1,1,1,1,1,1,0,0', ''], ['00000000b75b90e6,......i'm stuck at step 5. any idea how i can complete that step? ..current code looks like this:..from os import listdir, chdir.path = (r'c:...').chdir(path).files = [f for f in listdir(path)]..class dataset():..    def __init__(self, files):.        self.files = files..    def openfiles(self):.        self.filelist = [].        self.headers = [].        for file in self.files:.            if file.lower().endswith('.txt'):.                with open(file, 'r') as x:.                    x = x.read().                    x = x.split('n').                    #y = [line.split(',') for line in x].                    header = x[0].                    data = x[1:].                    self.filelist.append(data).                    self.headers.append(header)..        return self.filelist  ..    def uniquevalues(self):.        last = object().        self.uniquefilelist = [].        self.openfiles().        for file in self.filelist:.            for line in file:.                for value in line:.                    if value == last:.                        continue..                        self.uniquefilelist.append(item).                        last = item....        return self.uniquefilelist...edit desired output: if i take the list showed before, the desired output would look like this: ..[['00000000b847912e,1,alg0,&lt;&gt;z*,0,aut-analyse,25.10.2017, 09:38:42,3,''], ['00000000b75b90e6,......edit 2: edited the post. commented out y in openfiles() because it was creating a new list for each line in the file. i don't think that this helps my desired outcome..edit 3 answer novak: i put it in the code like this: ..def uniquevalues(self):.        self.uniquelist = [].        self.openfiles().        for file in self.filelist:.            file = list(set(file)).            self.uniquelist.append(file)      ..        return self.uniquelist ...output is still not unique + it adds '' at the start of each list: ..[['','00000000b847912e,,1,1,1,1,1,1,1,1,1,1,alg0,,1,1,1,1,1,1,1,1,1,1,&lt;&gt;z*,,0,1,aut-analyse,0,0,1,25.10.2017, 09:38:42,0,0,1,3,1,1,1,1,1,1,1,1,0,0'], ['', '00000000b75b90eb,......edit 4: function i wrote: ..def notonestring(self):.    self.openfiles().    self.useddata = [].    for i in self.filelist:.        l = i.split(',').        self.useddata.append(l)..    return self.useddata...input is the list from step 4..edit 5: code: ..for i in filelist:.    for j in range(len(i)):.        l = i[j].split(',').        useddata.append(l)...output(for file 2): print(useddata[1])..['00000000b75b90e7', '2', '12.04.2017 08:48:00', '01.01.1754 10:48:26', 'lfr\h.siepel', '156', '62001', '1', '14', '15', 'field1=0(abo)', '1', 'abo', '0', '', '0', '', '1', '0', 'lefier']...one line. it should be 7. it also starts at the second line now instead of the first."
