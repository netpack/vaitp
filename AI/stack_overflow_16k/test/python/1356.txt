"how to only allow function to be called from the repl, not by other functions? context:..i'm writing a personal blank module to simplify some scripts i have lying around. one of the functions i have is untested and may have undesirable edge cases that i still have to consider. in order to not allow myself from relying on it from other modules or functions, i was wondering whether i could enforce it to raise an error if not called directly from the repl...i'm not asking whether this is a good idea or not. it obviously isn't because it defeats the purpose of writing a function in the first place. i'm wondering if is is possible in blank, and how to do it...question:..is it possible to have a function raise an error if not called interactively? for example:..def is_called_from_top_level():.    ""how to implement this?"".    pass..def shady_func():.    ""only for testing at the repl. calling from elsewhere will raise."".    if not is_called_from_top_level():.        raise notimplementederror(""shady function can only be called directly."").    return true..def other_func():.    ""has an indirect call to shady."".    return shady_func()...and then at a repl:..[in:1] shady_func().[out:1] true.[in:2] other_func().[out:2] notimplementederror: ""shady function can only be called directly."""
