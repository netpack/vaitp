"shorten a multiple boolean operation to sort two sorted list i write the following recursive solution to merge two lists:..the base cases are:..1) assert empty of both list  ..2)assert only one list is  not empty   ..3)decrease case to remove element ..4) recursive case..     def merge(l1, l2):.    """""".    :rtype: list.    """""".    global res .    res = [].    #base cases .    #1 assert  empty.    if len(l1) == 0 and len(l2) == 0: #.        return res .    #2assert one not empty.    if len(l1) == 0 and len(l2) != 0:.        return res.extend(l2).    if len(l1) != 0 and len(l2) = 0:.        return res.extend(l1).    #3assert one element in both .    if len(l1) = 1 and len(l2) = 1:.        if l1[0] &lt; l2[0]:.            res.append(l1.pop()).            res.append(l2.pop()).        else:.            res.append(l2.pop()).            res.append(l1.pop()).        return res..    #4recur case.    else:.        return merge(l1, l2)      ...as for the #2 assert only one is not emtty, it 's cumbersome,.how could make the logic clear and concise?"
