"decorating base class method in child classes with different arguments i have below piece of code and what i am trying to achieve as follows. i have a base class named base and it has 2 sublcasses a and b. both child classes have a method which does exactly same thing at its core level but then i am decorating the class methods in child classes with different arguments...what i want to achieve is to eliminate some duplicate since it does same thing and put it in the base class...class base(object):.    pass..class a(base):.    @some_decorator(params = ('x', 'y')).     def some_method(self):.         return ""hello""..class b(base):.    @some_decorator(params = ('a', 'b')).     def some_method(self):.         return ""hello""...so is it possible to move some_method to base and then somehow we can call that in child classes and then decorate it with different arguments. i know its not really straight forward as method is not actually defined in the child classes...edit..here is what i am trying to come up with ..class base(object):.    args = ().    @some_decorator(params = args).     def some_method(self):.         return ""hello""...class a(base):.    args = ('x', 'y').    pass..class b(base):.    args = ('a', 'b')...the issue with this is when i call the method from child class it is called with empty args tuple which is defined in the base, so i tried modifying the actual decorator call like this ..@format_list_users(params=self.__class__.args)..but this fails and throws error that self is not defined"
