"instantiating a derived class object with a base class classmethod in blank i have a base class like the following:..class base(object):.    def __init__(self, arg1, arg2):.        #declare self.        self.arg1 = arg1.        self.arg2 = arg2..    @classmethod.    def from_ini_file(cls, f):.        # get arg1 and arg2 from ini file.        return cls(arg1, arg2)...and then i want to be able to use the classmethod constructor in a derived class.  naively, i tried:..class derived(base):.    def __init__(self):.        f = 'default.ini'.        base.from_ini_file(f)...but this doesn't work.  i think i understand why this doesn't work, but i haven't been able to figure out how to do this correctly, if it's possible...thanks for any and all help...edit..this feels very inelegant but i'm currently going with:..class derived(base):.    def __init__(self):.        t = base.from_ini_file('default.ini').        base.__init__(t.arg1, t.arg2)...there's a lot of redundant operations here, and i don't like having to have the arguments of the base.init function be something that necessarily gets saved to the object for use in this way.  so i'm all ears for better solutions.  thanks again."
