"better handling of keyboardinterrupt in cmd.cmd command line interpreter while using blank's cmd.cmd to create a custom cli, how do i tell the handler to abort the current line and give me a new prompt?..here is a minimal example:..# console_min.py.# run: 'blank console_min.py'..import cmd, signal..class console(cmd.cmd):.    def __init__(self):.        cmd.cmd.__init__(self).        self.prompt = ""[test] "".        signal.signal(signal.sigint, handler)..    def do_exit(self, args):.        return -1..    def do_eof(self, args):.        return self.do_exit(args)..    def preloop(self):.        cmd.cmd.preloop(self).        self._hist    = [].        self._locals  = {}.        self._globals = {}..    def postloop(self):.        cmd.cmd.postloop(self).        print ""exiting ...""..    def precmd(self, line):.        self._hist += [ line.strip() ].        return line..    def postcmd(self, stop, line):.        return stop..    def emptyline(self):.        return cmd.cmd.emptyline(self)..    def handler(self, signum, frame):.        # self.emptyline() does not work here.        # return cmd.cmd.emptyline(self) does not work here.        print ""caught ctrl+c, press return to continue""..if __name__ == '__main__':.    console = console().    console.cmdloop()...further help is greatly appreciated...original question and more details:.[currently the suggestions below have been integrated into this question -- still searching for an answer. updated to fix an error.]..i've since tried moving the handler to a function outside the loop to see if it were more flexible, but it does not appear to be...i am using blank's cmd.cmd module to create my own command line interpreter to manage interaction with some software. i often press ctrl+c expecting popular shell-like behavior of returning a new prompt without acting on whatever command was typed. however, it just exits. i've tried to catch keyboardinterrupt exceptions at various points in the code (preloop, etc.) to no avail. i've read a bit on sigints but don't quite know how that fits in here...update: from suggestions below, i tried to implement signal and was able to do so such that ctrl+c now doesn't exit the cli but does print the message. however, my new issue is that i cannot seem to tell the handler function (see below) to do much beside print. i would like ctrl+c to basically abort the current line and give me a new prompt."
