"multiprocessing file output significantly slower i am trying to improve performance on a script that parses data from large text files (1-100gb). i thought i would give multiprocessing a go to see if that would speed things up. as far as i can tell the processes are starting fine, but it is around 3x slower than saving without multiprocessing. ..the multiprocessing version:..from multiprocessing import lock, process.from datetime import datetime..def worker(mylist, count):.    outfile = str(count) + '.txt'.    out = open(outfile,'w').    for i in mylist:.        out.write(i)           ..def main():.    ##    lock = lock().    starttime = datetime.now().    jobs = [].    templist = [].    count = 0.    infile = open('batch1.kscsv','r').    for line in infile:.        if('traversal' in line and len(templist) == 0):.            traversalstring = line.        if('traversal' not in line and 'spot' not in line and 'xvalue' not in line):.            line = line.replace(',',' ').            templist.append(line).        if('traversal' in line and len(templist) &gt; 0):.            spotfromfile = (traversalstring.split(',')[1]).strip().            count += 1.            p = process(target=worker, args=(templist, count,)).            p.start().            templist = [].            traversalstring = line..    print ('run took: ' + str((datetime.now()-starttime)))...if __name__ == '__main__':.    main()...the regular script: ..from datetime import datetime      ..def main():.    starttime = datetime.now().    jobs = [].    templist = [].    count = 0.    infile = open('batch1.kscsv','r').    for line in infile:.        if('traversal' in line and len(templist) == 0):.            traversalstring = line.        if('traversal' not in line and 'spot' not in line and 'xvalue' not in line):.            line = line.replace(',',' ').            templist.append(line).        if('traversal' in line and len(templist) &gt; 0):.            spotfromfile = (traversalstring.split(',')[1]).strip().            count += 1..            outfile = str(count) + '.txt'.            out = open(outfile,'w').            for i in templist:.                out.write(i)..            templist = [].            traversalstring = line...    print ('run took: ' + str((datetime.now()-starttime)))...if __name__ == '__main__':.    main()...is this a problem that is just not well suited for multiprocessing? or is there a way to improve the multiprocessing?"
