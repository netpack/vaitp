"delete a node in the middle of a linked list, given only access to that node. - blank i am trying delete the middle node, but when i call the function and try to get hold of second node after the given node, it appears to be none. below is my code, please help me correct it...class node:.    # constructor to initialize the node object.    def __init__(self, data):.        self.data= data.        self.next= none..class linkedlist():..    # function to initialize head.    def __init__(self):.        self.head = none..    # function to insert a new node at the beginning.    def insert(self, data):.        node = node(data).        node.next=self.head.        self.head = node..    # function to print elements of the linked list    .    def printlist(self):.        current = self.head.        while current:.            print current.data .            current = current.next..    def deletemiddle(self, node):.        second = node.next.        print second.data.        if node is none:.            return.        node.data = second.data.        node.next = second.next..llist = linkedlist().llist.insert(10).llist.insert(15).mid = node(20).llist.insert(mid.data).llist.insert(16).llist.insert(17).llist.insert(19).print ""before deleting middle or any node"".llist.printlist().print ""after deleting middle or any node"".llist.deletemiddle(mid).llist.printlist()...update 1: i have added below changes, and it is working fine. but want to know, if it is correct and can be (insert and addnode function) combined into one function. also i want to understand better way to write this code, as there can be a case, where i want to delete any node and will have access to that node only. with my code, i am defining node and then deleting it, but i still feel there should be better approach than my code...def addnode(self, node):.        node.next =  self.head.        self.head = node..llist.addnode(mid)"
