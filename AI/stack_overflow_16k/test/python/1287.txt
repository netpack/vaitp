"compare lists with other lists for elements in preserved order i have a few lists of words. some of the lists share common words with each other. i'm trying see for each list, what other list has the common words in the same sequence. for example lets say these are my lists (using letters instead of words/strings for simplicity):..list1 = [a,b,c,d].list2 = [f,n,a,b,g].list3 = [x,f,g,z].list4 = [y,a,b,f,g,k]...over here we can see that [a,b] from list1 is also present in that order in list2 and list4. we can also see that [f,g] from list3 is present in list4. so we will map these lists to each other as follows:..list1: list2, list4 #(contains [a,b]).list2: list1, list4 #(contains [a,b]).list3: list4 #(contains [f,g]).list4: list1, list2, list3 #(contains [a,b] and [f,g])...you can ignore the comments since that's for explanation, it will be just the list names mapped to each other. note that even though list2 has the elements 'f' and 'g', since they are not in the order [f,g] it does not map to list3 or list4...i have written a function using set.intersection() to get the common words across all my lists, but it does not care for the order. so, i cant seem to figure out which data structure or algorithm to use in order to map the lists to each other in that fashion...i was trying the following, where wordlists is my list of lists, each containing their respective amount of words:..filelist = {}.for i in range(0, len(wordlists)):.    current_wordlist = wordlists[i].    for j, j_word in enumerate(current_wordlist):.        if current_wordlist[j] == j_word:.            if j_word not in filelist:.                filelist[i] = {j}.            else:.                filelist[i].append(j)...but it does not map correctly since its not mapping to the correct list number. i would appreciate some feedback or some other trick of checking this...how can i go about achieving this?"
