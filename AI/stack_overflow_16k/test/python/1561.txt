"blank: how to find value in list smaller than target for example i have a non-ordered list of values [10, 20, 50, 200, 100, 300, 250, 150]..i have this code which returns the next greater value:..def getnexthightemp(self,  temp,  templist):.    target = int(temp).    list = [].    for t in templist:.        if t != """":.            list.append(int(t)).    return str(min((abs(target - i), i) for i in list)[1])...e.g. if temp = 55, it will return '100'...but how can i get the lesser of the value? that is how to get it to return '50'?..thank you...edit - now working..def ontwmatcurrentindexchanged(self):.    self.cleartwselectinputs().    material = self.cb_tw_mat.currenttext().    temp = self.txt_design_temp.text().    if material != """":.        eref = self.getmaterialdata(material,  ""25"",  ""elast"").        if eref and eref != """":.            eref = str(float(eref) / 1000000000).            self.txt_tw_eref.settext(eref).        else:.            self.txt_tw_eref.settext(""194.8"").            self.showmsg(""no temperature match found for e&lt;sub&gt;ref&lt;/sub&gt; in material data file. value of 194.8 gpa will be used."",  ""blue"").    if material != """" and temp != """":.        if self.checktwtemp(material,  temp):.            dens = self.getmaterialdata(material,  temp,  ""dens"").            self.txt_tw_dens.settext(dens).            elast = self.getmaterialdata(material,  temp,  ""elast"").            elast = str(float(elast) / 1000000000).            self.txt_tw_et.settext(elast).            stress = self.getmaterialdata(material,  temp,  ""stress"").            stress = str(float(stress) / 1000000).            self.txt_tw_stress_limit.settext(stress).        else:.            self.showmsg(""no temperature match found for "" + temp + ""&amp;#x00b0; c in material data file. extrapolated data will be used where possible or add new material data."",  ""blue"").            dens = self.getextrapolatedmaterialdata(material,  temp,  ""dens"").            self.txt_tw_dens.settext(dens).            elast = self.getextrapolatedmaterialdata(material,  temp,  ""elast"").            elast = str(float(elast) / 1000000000).            self.txt_tw_et.settext(elast).            stress = self.getextrapolatedmaterialdata(material,  temp,  ""stress"").            stress = str(float(stress) / 1000000).            self.txt_tw_stress_limit.settext(stress).    else:.        self.cleartwselectinputs()..def checktwtemp(self, matvar, tempvar):.    for material in self.materials:.        if material.attrib[""name""] == matvar:.            temps = material.getiterator(""temp"").            for temp in temps:.                if int(temp.text) == int(tempvar):.                    return true.            return false..def getmaterialdata(self, matvar, tempvar, tag):.    for material in self.materials:.        if material.attrib[""name""] == matvar:.            temps = material.getiterator(""temp"").            for temp in temps:.                if temp.text == tempvar:.                    value = temp.find(tag).                    return value.text..def getextrapolatedmaterialdata(self, matvar, tempvar, tag):.    try:.        templist = qstringlist().        for material in self.materials:.            if material.attrib[""name""] == matvar:.                temps = material.getiterator(""temp"").                for temp in temps:.                    templist.append(temp.text).        templist.sort().        target = int(tempvar).        x1 = max(int(t) for t in templist if t != '' and int(t) &lt; target).        x2 = min(int(t) for t in templist if t != '' and int(t) &gt; target).        y1 = float(self.getmaterialdata(matvar, str(x1), tag)).        y2 = float(self.getmaterialdata(matvar, str(x2), tag)).        x = target.        y = y1 - ((y1 - y2) * (x - x1) / (x2 - x1)).        return str(y).    except exception, inst:.        return ""0"""
