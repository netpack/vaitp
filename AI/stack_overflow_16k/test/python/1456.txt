"an exercise from fundamentals of blank .  possible duplicate:.  fundamentals of blank chapter 8 project 3  .....hi i am a newbie programmer who just started to learn about blank..i have recently posted this same question before and i have solved it but my answer is not exactly what the question is asking. ..i need help on why i need to implement a new method even though i could do the other way...thanks..question:...  the __str__ method of the bank class returns a string containing the.  accounts in random order. design and implement a change that causes.  the accounts to be placed in the string by order of name. .  [this is the part where i don't understand].  (hint: you will also have to define a new method in the savingsaccount class.)...class bank(object):..    def __init__(self):.        self._accounts = {}.    def __str__(self):.        """"""return the string rep of the entire bank."""""".        ptemp =[].        for i in xrange(len(savingsaccount.temp)-1):.            if self._accounts.get(savingsaccount.temp[i]).getname() &gt;= self._accounts.get(savingsaccount.temp[i+1]).getname():.                temp = savingsaccount.temp[i].                savingsaccount.temp[i] = savingsaccount.temp[i+1].                savingsaccount.temp[i+1] = temp.        for i in savingsaccount.temp:.            ptemp.append(self._accounts[i]).        return 'n'.join(map(str, ptemp))..    def add(self, account): .        """"""inserts an account using its pin as a key."""""".        self._accounts[account.getpin()] = account.    def remove(self, pin):.        return self._accounts.pop(pin, none).    def get(self, pin):.        return self._accounts.get(pin, none).    def computeinterest(self):.        """"""computes interest for each account and .        returns the total."""""".        total = 0.0.        for account in self._accounts.values():.            total += account.computeinterest().        return total..class savingsaccount(object):.    """"""this class represents a savings account.    with the owner's name, pin, and balance."""""".    rate = 0.02.    temp = [].    def __init__(self, name, pin, balance = 0.0):.        self._name = name.        self._pin = pin.        self._balance = balance.        savingsaccount.temp.append(self).    def __str__(self):.        result =  'name:    ' + self._name + 'n' .        result += 'pin:     ' + self._pin + 'n' .        result += 'balance: ' + str(self._balance).        return result.    def getbalance(self):.        return self._balance.    def getname(self):.        return self._name.    def getpin(self):.        return self._pin.    def deposit(self, amount):.        """"""deposits the given amount and returns the.        new balance."""""".        self._balance += amount.        return self._balance.    def withdraw(self, amount):.        """"""withdraws the given amount..        returns none if successful, or an.        error message if unsuccessful."""""".        if amount &lt; 0:.            return 'amount must be &gt;= 0'.        elif self._balance &lt; amount:.            return 'insufficient funds'.        else:.            self._balance -= amount.            return none.    def computeinterest(self):.        """"""computes, deposits, and returns the interest."""""".        interest = self._balance * savingsaccount.rate.        self.deposit(interest)...def main():.    bank = bank().    bank.add(savingsaccount(""zelda"",""1003"",5000.00)).    bank.add(savingsaccount(""wilma"",""1001"",4000.00)).    bank.add(savingsaccount(""fred"",""1002"",1000.00)).    print bank..main()"
