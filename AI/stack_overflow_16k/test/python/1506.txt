"convert a string with escape sequences to their original character representation in blank let's assume i have a program that receives inputs that i can't really control.  the following variables are fed in as is (we can't change the inputs here):..a = ""c:temp"".b = ""c:games"".c = ""hello world"".d = ""t""...unfortunately, blank will misinterpret things and put in escape sequences:..in [138]: a[2].out[138]: 't'..in [139]: b[2].out[139]: '\'..in [140]: d[0].out[140]: 't'...let's assume the answer has already been found.  it should do the following:..def answer(x):.    pass #todo: your code goes here...desired outputs:..in [200]: answer(a)[2].out [201]: '\'..in [202]: answer(a)[3].out [203]: 't'..in [204]: answer(b)[2].out [205]: '\'..in [206]: answer(b)[3].out [207]: 'g'..in [208]: answer(c).out [209]: 'hello world'...i've already tried using the ast module and also using decode, to no avail:..in [144]: import ast..in [145]: ast.literal_eval(a).  file ""&lt;unknown&gt;"", line 1.    c:  emp.     ^.syntaxerror: invalid syntax...or with decode:..in [147]: a.decode('string-escape')[2].out[147]: 't'...solve for answer()..edit: """", not """" in the [204] example"
