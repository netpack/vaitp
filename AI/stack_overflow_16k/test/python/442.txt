"random geometry assignment (beginner blank) the problem i have is trying to make my shape files have random locations and size, without having to put the definitions in a for loop. here are my classes...# module imports.import math.import turtle as t..# class definitions.class circle:..    def __init__(self,x=0,y=0,r=0):.        self.center = point(x,y).        self.radius = r..    def circumference(self):.        result = (self.radius * 2) * math.pi.        return result..    def area(self):.        result = (self.radius ** 2) * math.pi.        return result..    def draw(self,fill_color,pen_color,pen_width):.        t.color(pen_color).        t.fillcolor(fill_color).        t.pensize(pen_width).        t.penup().        t.goto(self.center.x,self.center.y).        t.pendown().        t.begin_fill().        t.circle(self.radius).        t.end_fill().        t.penup()...class point:.    """"""represents a point with an x and y coordinate""""""..    def __init__(self, x=0, y=0):.        self.x = x.        self.y = y..    def show(self):.        print ""(%d, %d)"" % (self.x, self.y)..    def move_to(self,x,y):.        self.x = x.        self.y = y..    def distance(self,p):.        dx = self.x - p.x.        dy = self.y - p.y.        dist = math.sqrt(dx**2 + dy**2).        return dist...class rectangle:.    ""represented with upper left corner as a point, width, height""""""..    def __init__(self,x=0,y=0,width=100,height=100):.        self.corner = point(x,y).        self.width = width.        self.height = height..    def go_to(self,x,y):.        self.corner.move_to(x,y)..    def area(self):.        result = self.width * self.height.        return result..    def perimeter(self):.        result = 2*self.width + 2*self.height.        return result..    def draw(self,fill_color,pen_color,pen_width):.        t.color(pen_color).        t.fillcolor(fill_color).        t.pensize(pen_width).        t.penup().        t.goto(self.corner.x,self.corner.y).        t.pendown().        t.begin_fill().        t.goto(self.corner.x + self.width,self.corner.y).        t.goto(self.corner.x + self.width,self.corner.y - self.height).        t.goto(self.corner.x,self.corner.y - self.height).        t.goto(self.corner.x,self.corner.y).        t.end_fill().        t.penup()...class segment:..    def __init__(self,x1=0,y1=0,x2=100,y2=0):.        self.start = point(x1,y1).        self.end = point(x2,y2)..    def length(self):.        return self.start.distance(self.end)..    def draw(self,pen_color,pen_width):.        t.color(pen_color).        t.pensize(pen_width).        t.penup().        t.goto(self.start.x,self.start.y).        t.pendown().        t.goto(self.end.x,self.end.y).        t.penup()...class triangle:..    def __init__(self,x1=0,y1=0,x2=0,y2=0,x3=0,y3=0):.        self.start = point(x1,y1).        self.second = point(x2,y2).        self.third = point(x3,y3).        self.segmentf = segment(x1,y1,x2,y2).        self.segments = segment(x2,y2,x3,y3).        self.segmentt = segment(x3,y3,x1,y1)..    def area(self):.        a = self.segmentf.length().        b = self.segments.length().        c = self.segmentt.length().        s = (a + b + c) / 2.        result = (s*(s-a)*(s-b)*(s-c)) ** 0.5.        return result..    def perimeter(self):.        a = self.segmentf.length().        b = self.segments.length().        c = self.segmentt.length().        result = a + b + c.        return result..    def draw(self,fill_color,pen_color,pen_width):.        t.color(pen_color).        t.fillcolor(fill_color).        t.pensize(pen_width).        t.penup().        t.goto(self.start.x,self.start.y).        t.pendown().        t.begin_fill().        t.goto(self.second.x,self.second.y).        t.goto(self.third.x,self.third.y).        t.goto(self.start.x,self.start.y).        t.end_fill().        t.penup()...and here is my main function:..# module imports.import math.import turtle.import random .from suter_andrew_shapesfinal import *..# globals.max_s = 50..# list definitions.r = rectangle(random.randint(-100,100),random.randint(-100,100),random.randint(0,100),random.randint(0,100)).t = triangle(random.randint(-100,100),random.randint(-100,100),random.randint(-100,100),random.randint(-100,100),random.randint(-100,100),random.randint(-100,100)).c = circle(random.randint(-100,100),random.randint(-100,100),random.randint(0,100))..shapes = [r,t,c].colors = [""blue"",""green"",""red"",""purple"",""pink"",""yellow"",""orange"",""black"",""white""]..# main body.for i in range(max_s):.    s_choice = random.choice(shapes).    c_choice = random.choice(colors).    if s_choice == r:.        r.draw(c_choice,c_choice,random.randint(0,10)).    elif s_choice == t:.        t.draw(c_choice,c_choice,random.randint(0,10)).    elif s_choice == c:.        c.draw(c_choice,c_choice,random.randint(0,10))..turtle.mainloop()...the function works fine, but the problem is the definitions at the top. thanks for reading!"
