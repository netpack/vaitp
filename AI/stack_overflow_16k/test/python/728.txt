"good style for self commenting code without oop on the one hand, a framework bumps me to use functions rather than classes. it doesn't matter which framework it is..on the other hand a self commenting code should be subdivided into a short subprograms with descriptive names...this means that for a single function that can be reused we have to write several functions just for our code to be readable...in case of using oop it is not a problem at all. we organise a class and create private method in it (marked _ in front in case of blank)...but if we don't use oop, these auxiliary functions are spread all over the module. they are much more numerous than functions that can be reused. and one can even get lost in them and forget that a function for this particular purpose already exists..example:..def combine(str1, str2):.    return ""{}_{}"".format(str1, str2)..def get_salted_str(str):.    salt = ""slkdjghslkdjfghsldfghaaasd"".    return combine(str, salt)...def get_salted_string(str):    .    return combine(str, get_salted_str(str))...def get_salted_peppered_string(str):.    salted_str = get_salted_str(str).    pepper = ""1234128712908369735619346""..    return ""{}_{}"".format(pepper, salted_str)...in the example there are two main functions: get_salted_string and get_salted_peppered_string.  they can be imported and reused. everything else is just auxiliary functions. this is a fake example, don't be overenthusiastic about criticizing it...as for the style: how can one distinguish between main and aux functions? if there are a lot of aux functions, everything becomes a mess. ..two questions:..1) is it better to use underline symbol to mark unimported functions? like this: _get_salted_str. or how can we mark aux functions?.2). is there any style guide mentioning solutions to this problem?"
