"how to distribute an integer number across bins by probability i have an integer value k and a list of probabilities which sum to 1. i want to create a new list which breaks up k into smaller integers according to the probabilities in my list. ..the issues are that i do not know the size of my list in advance and multiple probabilities in my list could be small and equal, so my new list doesn't always sum to k...for example:..&gt; k = 10.&gt; l = [0.12, 0.12, 0.04, 0.04, 0.02, 0.02, 0.03, 0.03, 0.02, 0.02, 0.27, 0.27].&gt; sum(l).1.0.&gt; new_l = [int(round(k*v)) for v in a].&gt; print(new_l).[1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3].&gt; sum(new_l).8...how can i enforce that sum(new_l) == k? ..maybe this isn't even possible, at least with my method. even if k is larger than len(l), if k is odd it doesn't seem to ever work:..&gt;&gt;&gt; for k in [10, 11, 12, 13, 14, 15, 16, 20, 50, 75, 101, 1001, 1002, 10001, 10002, 100001, 100002]:....     print(k, sum([round(k*v,0) for v in a])).... .(10, 8.0).(11, 8.0).(12, 8.0).(13, 14.0).(14, 14.0).(15, 14.0).(16, 14.0).(20, 18.0).(50, 52.0).(75, 76.0).(101, 100.0).(1001, 1000.0).(1002, 1002.0).(10001, 10000.0).(10002, 10002.0).(100001, 100000.0).(100002, 100002.0)"
