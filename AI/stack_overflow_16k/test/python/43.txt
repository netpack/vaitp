"is there a way to shallow copy an existing file-object? the use case for this would be creating multiple generators based on some file-object without any of them trampling each other's read state. ..originally i (thought i) had a working implementation using seek() and tell() where each generator was decorated by a meta-generator which maintained the file-handle position. this worked fine on things like stringio, but failed on real files due the to read-ahead buffer mutilating the offset. ..using readline() or otherwise mocking the real file-object isn't viable as the reason for doing this was the excessively large files prompting a generator expression in the first place. so losing the read-ahead buffer isn't really a good option (as an aside, why was blank implemented this way in the first place? shouldn't the buffer be like a cache and not actually exposed to the user? proper encapsulation should have prevented this tell() issue in the first place...)..i then tried to use copy.copy, but that results in something like this: &lt;closed file '&lt;uninitialized file&gt;', mode '&lt;uninitialized file&gt;' at 0x7f722ffda810&gt;. which appears unusable. ..does there exist an alternative way to copy? is there a way to initialize a file-object? or should i give up on this use case entirely because it is not possible in blank?"
