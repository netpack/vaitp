"how to improve run time of while loop i'm trying to use a greedy algorithm to solve the problem of refueling a car minimum number of times on a road trip. unfortunately my code so far has exceeded the time limit in place for this problem. ..i wanted to ask if the problem is coming from my nested while loop, because this seems to be the process that iterates the highest number of times. here is the code:..def compute_min_refills(distance, tank, stations):.trip = distance.dist_traveled = 0..tank_capacity = tank.refills = 0 ##keeps track of total refills ..stations = stations.stations.append(trip) ..if tank &gt; trip:.    return 0.elif station[-1] - station[-2] &gt; tank:.    return -1.else:.    dist_traveled = tank.    while dist_traveled &lt; trip:.        n = 0 .        while stations[n] &lt;= dist_traveled:.            n+=1 .        if dist_traveled - stations[n-1] &lt;= tank:.            refills+=1.        else:.            return -1.        dist_traveled = stations[n-1] + tank.        stations = stations[n-1:].    return y...the constraints are as follows:..1 &lt; distance &lt; 10^5..1 &lt; tank &lt; 400..stations is an array containing at most 300 elements...this is my first time dealing with problems of runtime so any advice even in how to approach the problem would be greatly appreciated."
