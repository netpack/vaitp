"this blank code for pretty printing a tree blows up with a stack overflow i cannot figure out why this explodes and i'm still trying to learn blank debugging...class node():.    def __init__(self, parent = none, children = [], data = none):.        self.parent = parent.        self.children = children.        self.data = data.        if parent == none:.            self.root = self.        else:.            self.root = self.parent.root..    def add_child(self, child):.        self.children.append(child).        child.parent = self...    def is_root(self):.        return self.root == self..    def is_leaf(self):.        return self.children == []..    def is_empty(self):.        return self.data == none..    def pprint(self):.        def _pprint(ast, l):.            if not self.is_empty():.                print(l * "" "", self.data).            if not self.is_leaf():.                for child in self.children:.                    _pprint(child, l + 1)..        _pprint(self, 0)...i use the code this way:..root = node().root.add_child(node(data=""a"")).root.pprint()...after a while, the pprint method gives an exception:......  file ""ll.py"", line 56, in _pprint.    _pprint(child, l + 1).  file ""ll.py"", line 56, in _pprint.    _pprint(child, l + 1).  file ""ll.py"", line 56, in _pprint.    _pprint(child, l + 1).  file ""ll.py"", line 56, in _pprint.    _pprint(child, l + 1).  file ""ll.py"", line 52, in _pprint.    if not self.is_empty():.  file ""ll.py"", line 48, in is_empty.    return self.data == none.recursionerror: maximum recursion depth exceeded in comparison...the ""base case"" should be, i think, the leaf nodes, with no children. what am i missing?"
