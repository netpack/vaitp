"why no __getitem__ raises typeerror so the question is pretty simple:.if we have a random class, let's say an int and we try to access a non defined attribute: ..my_int = 5.my_int.this_is_a_test...we will get this error:..attributeerror: 'int' object has no attribute 'this_is_a_test'...but if we try to access an index of it (in which case blank will do a lookup for a __getitem__ attribute):..my_int = 5.my_int[0]...we get:..typeerror: 'int' object has no attribute '__getitem__'...what is the logic behind the change in exception type? it seems weird to me that a typeerror is raised, complaining about a missing attribute (attributeerror seems like a much better candidate for that)"
