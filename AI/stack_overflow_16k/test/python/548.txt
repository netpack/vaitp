"how can i apply a or/and operation to all element in a blank list with efficiency i know that reduce and all/any can do the trick, but its performance is bad when the list is large. ..for example:..define a function including print to check whether the function has been executed..in [33]: def func(x):.   ....:     print x.   ....:     return bool(x).   ....: ...pass operator.or_ as the reduce function..in [34]: import operator.in [35]: reduce(operator.or_, [func(1), func(0)]).1.0.out[35]: true...then we found that the second function has been executed even that the first function returns true...if i use or operation directly, it will return immediately once it find that one of them return true...in [36]: func(1) or func(0).1.out[36]: true...however, i can't do so if i have a large list...is there any elegant way to do that? or i should what a for loop to check?..update..the origin way i use for any is..in [26]: any([func(1), func(0)]).1.0.out[26]: true...it did evaluate all the function...via @martijn pieters' answer, i now know that i might use it in the wrong way. sorry for the unclearing."
