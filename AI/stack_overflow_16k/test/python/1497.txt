"how to correctly inherit class from another file i have 2 files. driver.py and stack.py. i would like to inherit the base class stack.py's 2 functions into driver.py, but i am having issues with actually creating the class (encounter attribute errors while running). the code is supposed to ask for user input until 'end' is received and the program should output all the input...please disregard the ill-formatting, i had issues including the 'import' lines in the snippets....stack.py.....class stack:..def __init__(self):.    '''a new empty stack'''.    self.items = []..def push(self, o):.    '''make o the new top item in this stack.'''.    self.items.append(o).    .def pop(self):.    '''remove and return the top item.'''.    return self.items.pop()..def peek(self):.    '''return the top item.'''.    return self.items[-1]..def isempty(self):.    '''return whether this stack is empty.'''.    return self.items == []..def size(self):.    '''return the number of items in this stack.'''.    return len(self.items)..class upstack:...def __init__(self):.    '''a new empty stack'''.    self.stack = []..def push(self, o):.    '''make o the new top item in this stack.'''.    self.stack.insert(0, o).    .def pop(self):.    '''remove and return the top item.'''.    return self.stack.pop(0)..def peek(self):.    '''return the top item.'''.    return self.stack[0]..def isempty(self):.    '''return whether this stack is empty.'''.    return self.stack == []..def size(self):.    '''return the number of items in this stack.'''.    return len(self.stack)......driver.py.....from stack import *..if __name__ == '__main__':.#-----------------------------------stack code-----------------------------------..                    s = stack().                    s.push('hello').                    print(s.pop())..                    data = """".                    while data.lower() != 'end':.                            data = input(""enter command: "").                            if data.lower() != 'end':.                                    s.push(data)..                    while not s.isempty():.                            print(s.pop())..    #-----------------------------------upstack code-----------------------------------..                    u = upstack().                    u.push('hello').                    print(u.pop())..                    data = """".                    while data.lower() != 'end':.                            data = input(""enter command: "").                            if data.lower() != 'end':.                                    u.push(data)..                    while not u.isempty():.                            print(u.pop())......driver.py attempted class version.....from stack import *..    class test:. #-----------------------------------stack code-----------------------------------.                def stacker(self):.                        s = stack().                        s.push('hello').                        print(s.pop())..                        data = """".                        while data.lower() != 'end'.                        data = input(""enter command: "").                                if data.lower() != 'end':.                                        s.push(data)..                                while not s.is_empty():.                                        print(s.pop())..        #-----------------------------------upstack code-----------------------------------.                def upstacker(self):.                        u = upstack().                        u.push('hello').                        print(u.pop())..                        data = """".                        while data.lower() != 'end':.                        data = input(""enter command: "").                                if data.lower() != 'end':.                                        u.push(data)..                                while not u.is_empty():.                                        print(u.pop()).....since i don't see anything when i actually run the code, i make an instance of it and this is what i get...    &gt;&gt;&gt; s = stack().    &gt;&gt;&gt; s.    &lt;stack.stack object at 0x103bb3a58&gt;.    &gt;&gt;&gt; s.push(2).    &gt;&gt;&gt; s.stacker().    traceback (most recent call last):.      file ""&lt;pyshell#11&gt;"", line 1, in &lt;module&gt;.        s.stacker().    attributeerror: 'stack' object has no attribute 'stacker'"
