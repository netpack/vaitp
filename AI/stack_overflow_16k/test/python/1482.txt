"check if a directory is a (file system) root i have a script that searches for a directory containing a specific file, starting from the current directory and going up the tree (think of trying to find out where the .git directory sits)...my method looks like this:..def getdir(self,cwd):.  path = os.path.abspath(cwd).  if not os.path.isdir(path):.    raise runtimeerror(""getdir should not be run on files"").  if file in os.listdir(path):.    return path.  parent = os.path.join(path, os.path.pardir).  if os.access(parent, os.r_ok) and os.access(parent, os.x_ok):.    return self.getdir(parent).  else.    return none...now the problem with this method is that, if it cannot find the directory, it loops (and eventually stack-overflows) because apparently joining / and .. gives you / again. i tried comparing path with parent or their reprs, but that did not work (they were always distinct). my workaround for now is to include a depth counter in the recursive method and stop at some random maximum threshold...my question is thus, is there a reliable cross-platform way to check whether i have reached a root in the file system?"
