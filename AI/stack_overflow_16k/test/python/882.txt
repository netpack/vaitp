"repeatedly write to stdin and read from stdout of a process from blank i have a piece of fortran code that reads some numbers from stdin and writes results to stdout. for example:..do.  read (*,*) x.  y = x*x.  write (*,*) y.enddo...so i can start the program from a shell and get the following sequence of inputs/outputs:..5.0.25.0.2.5.6.25  ..now i need to do this from within blank. after futilely wrestling with subprocess.popen and looking through old questions on this site, i decided to use pexpect.spawn:..import pexpect, os.p = pexpect.spawn('squarer').p.setecho(false).p.write(""2.5"" + os.linesep).res = p.readline()...and it works. the problem is, the real data i need to pass between blank and my fortran program is an array of 100,000 (or more) double precision floats. if they're contained in an array called x, then..p.write(' '.join([""%.10f""%k for k in x]) + os.linesep)...times out with the following error message from pexpect:..buffer (last 100 chars):   .before (last 100 chars):   .after: &lt;class 'pexpect.timeout'&gt;  .match: none  .match_index: none  .exitstatus: none.flag_eof: false.pid: 8574.child_fd: 3.closed: false.timeout: 30.delimiter: &lt;class 'pexpect.eof'&gt;.logfile: none.logfile_read: none.logfile_send: none.maxread: 2000.ignorecase: false.searchwindowsize: none.delaybeforesend: 0.05.delayafterclose: 0.1.delayafterterminate: 0.1...unless x has less than 303 elements. is there a way to pass large amounts of data to/from stdin/stdout of another program?..i have tried splitting the data into smaller chunks, but then i lose a lot in speed...thanks in advance."
