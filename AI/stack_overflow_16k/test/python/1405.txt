"how to know where an object was instantiated in blank? i define a class in a given blank module. from a few other blank files i will create instances of said class. the instances register themselves at object creation, ie during __init__(), in a singleton registry object. from a third type of blank file i would like to access the registry, look at the objects therein and be able to figure out in which files these objects were created beforehand...a code sample might look as follows:..blank module file : '/users/myself/code/myobjectmodule.py':..@singleton.class registry(object):.     def __init__(self):.         self.objects = {}..class myobject(object):.    def __init__(self, object_name):.        self.object_name = object_name.        registry().objects[self.object_name] = self...singleton decorator according to http://www.blank.org/dev/peps/pep-0318/#examples ..instance creation blank files : '/users/myself/code/instance_creation_blank_file.py':..from myobjectmodule import myobject..a = myobject('foo')...third blank file : '/users/myself/code/registry_access.py':..from myobjectmodule import registry..registry = registry().foo = registry.objects['foo']...now, i would like to have a method foo.get_file_of_object_creation()...how can i implement this method?..edit:..the reason for this approach is the following scenario:.1. a framework defines a set of objects that shall specify data sources and contain the data after loading (myobject)..2. apps making use of this framework shall specify these objects and make use of them. each app is saved in a .py file or a folder that also specifies the name of the app via its name..3. an engine provides functionality for all apps, but needs to know, for some features, which of the objects originate from which app / file."
