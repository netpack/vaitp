"delete operation in basic implementation of the binary search tree in blank i am almost done with my binary search tree implementation in blank except for the deletion operation...so far, in all the use cases of the function that i have tested so far:.1. leaf nodes are deleted correctly.2. nodes with two children are deleted correctly.3. root nodes are deleted correctly..but i am not able to delete nodes with either the left child or the right child. my eclipse ide showed me that some of the statements have no effect (the statements that are underlined as yellow in the following picture), so i have tried the program in my iblank notebook local server, but the result seems to be the same...lines 43-57:...what is it that i am missing out in my blank program? please help me out. here is my code :..prevnode = none..class node:     .    def __init__(self,data):.        self.data = data.        self.left = none.        self.right = none..def insert(node,info):.    if node.data is none:.        node.data = info.    elif info &lt; node.data:.        if node.left is none:.            node.left = node(none).        insert(node.left,info).    elif info &gt;= node.data:.        if node.right is none:.            node.right = node(none).        insert(node.right,info)..def search(node,info):.    if node is none:.        print ""node with the mentioned data is not found"".    if node.data == info:.        print ""found the node containing value held by info"".    elif info &lt; node.data and node.left is not none:.        search(node.left,info).    elif info &gt; node.data and node.right is not none:.        search(node.right,info) ..def delete(node,info):.    global prevnode.    if info == node.data:.        print ""this is the place where info is stored"".        if node.left is none and node.right is none:.            if prevnode.left is not none and prevnode.left.data == node.data:.                prevnode.left = none.                del node.            elif prevnode.right is not none and prevnode.right.data == node.data:.                prevnode.right = none.                del node .            return                 .        elif node.left is not none and node.right is none:.            if prevnode.left is not none and prevnode.left.data == node.data:.                prevnode.left == node.left.                del node.            elif prevnode.right is not none and prevnode.right.data == node.data:.                prevnode.right == node.left.                del node.            return.        elif node.left is none and node.right is not none:.            if prevnode.left is not none and prevnode.left.data == node.data:.                prevnode.left == node.right.                del node.            elif prevnode.right is not none and prevnode.right.data == node.data:.                prevnode.right == node.right.                del node .            return           .        elif node.left is not none and node.right is not none:.            node.data = none.            prevnode = node.right.            successor = prevnode.left.            if successor is none:.                node.data = prevnode.data.                node.right = prevnode.right.            elif successor is not none:.                while successor.left is not none:.                    prevnode = successor.                    successor = prevnode.left.                if successor.right is none:.                    node.data = successor.data.                    prevnode.left = none.                    del successor.                elif successor.right is not none:.                    prevnode.left = successor.right.                    node.data = successor.data.                    successor.right = none.                    del successor               .    elif info &lt; node.data:.        print ""we will have to go to the left child of the current node"".        prevnode = node.        print ""parent of the left child will be prevnode : "",prevnode.data.        delete(node.left,info).    elif info &gt;= node.data:.        print ""we will have to go to the right child of the current node"".        prevnode = node.        print ""parent of the right child will be prevnode : "",prevnode.data.        delete(node.right,info)..def display(node,parent):.    if node is not none:.        print ""value at this node is "",node.data.        if parent is none:.            print ""it is the root node"".        else:.            print ""the parent is "",parent.data.    if node.left is not none:.        display(node.left,node).    if node.right is not none:.        display(node.right,node).    else:.        return..bst = node(none).while true:.    choice = int(raw_input(""please enter your choice 1.insert, 2.search, 3.delete, 4.display, 5.exit"")).    if choice == 1:.        num = int(raw_input(""please enter the number you wish to insert"")).        insert(bst,num).    elif choice == 2:.        num = int(raw_input(""please enter the number you wish to find"")).        search(bst,num).    elif choice == 3:.        num = int(raw_input(""please enter the number you wish to delete"")).        delete(bst,num).    elif choice == 4:.        print ""displaying the tree"".        display(bst,none).    elif choice == 5:.        break.    else:.        print ""please enter the correct input""...p.s: just in case there are any wrong indentations(i am pretty sure there are none though), they can be indented properly"
