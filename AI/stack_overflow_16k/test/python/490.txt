"httperror: forbidden when importing urllib.request i wrote this currency conversion code last year for a blank project. i went to run it again and make sure it still works because i want to list it as a project on github, but i'm getting an httperror: forbidden.  i have searched and found other posts on here asking about this as well, but none of those have worked for me. is there a way that i can still scrape from the same url using what i have? or will i need to re-write this without urllib, as i know that this can be protected against due to bots (learned this from one of the other posts i read on this subject)...code:..    ognumber = str.    import urllib.request..    while true:.        ogcurrency = str((input(""what is the original currency? ""))).upper().        newcurrency = str((input(""what currency do you want to convert to? ""))).        .upper().        # asks the first two questions..            while true:.                ognumber_str = input(""how much do you want to convert (int)? "").                    # asks how much needs to be converted.                if(ognumber_str.isdigit()):.                    ognumber_int = int(ognumber_str).                    break.                    # if the is str is an integer, continue, if not, ask to try again.                else:.                    print(""the value you input must be an integer. please try again."")...            if ognumber_str != str:..                url = .                ""https://finance.google.com/finance/converter?a={:d}&amp;from={:s}&amp;to={:s}.                "".format(ognumber_int, ogcurrency, newcurrency).                    # calls to conversion api.                response = urllib.request.urlopen(url).                result = str(response.read())..                index_back = result.find(""&lt;/span"") #end of api we want.                index = result.find(""span"") #beginning of api section we want.                index_s = result[index+15:index_back] #spliced more.                index_flt = float(index_s[:-4]) #the floating integer values of the str..                index_currency = index_s[-3:] # string of the currency.                print(""{} {} is {:.2f} {}"".format(ognumber_int, ogcurrency, index_flt,.          index_currency)) #formatting for expected final result...                leave = input(""do you want to convert another currency? "").upper().                #input no in any format to leave the program..                if leave == ""no"":.                    break..                else:.                    continue...error:..traceback (most recent call last):..file ""&lt;iblank-input-19-1cc53791cbcf&gt;"", line 1, in &lt;module&gt;.runfile('c:/users/laddand1/test.py', wdir='c:/users/laddand1')..file ""c:usersladdand1appdatalocalcontinuumanaconda3libsite-packagesspyderutilssitesitecustomize.py"", line 705, in runfile.execfile(filename, namespace)..file ""c:usersladdand1appdatalocalcontinuumanaconda3libsite-packagesspyderutilssitesitecustomize.py"", line 102, in execfile.exec(compile(f.read(), filename, 'exec'), namespace)..file ""c:/users/laddand1/test.py"", line 37, in &lt;module&gt;.  response = urllib.request.urlopen(url)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 223, in urlopen.  return opener.open(url, data, timeout)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 532, in open.  response = meth(req, response)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 642, in http_response.  'http', request, response, code, msg, hdrs)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 570, in error.  return self._call_chain(*args)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 504, in _call_chain.  result = func(*args)..file ""c:usersladdand1appdatalocalcontinuumanaconda3liburllibrequest.py"", line 650, in http_error_default.  raise httperror(req.full_url, code, msg, hdrs, fp)..httperror: forbidden"
