"at work, see blank programmer define an empty class inside of a class to get ""dot structure"". is this bad? i have seen this from a coworker, and want to know if this is legit. a class is defined in order to get the self.thing.morethings structure...import numpy as np.class mybigthing:.    def __init__(self):.        self.thing_builder()..    def compute(self):.        print(self.thing.morethings)..    def thing_builder(self):.        self.x = 2.        self.y = 2.        self.z1 = (2, 2).        class thing:.            pass.        self.thing = thing.        self.thing.morethings = np.zeros(self.z1)...personally, i would define an entirely separate class. i think the first implementation is meaningless, and will be better formed like this. meaning we can construct more things later down the line rather than create them adhoc in the mybigthing...import numpy as np.class mybigthing:.    def __init__(self):.        self.thing_builder()..    def compute(self):.        print(self.thing.morethings)..    def thing_builder(self):.        self.x = 2.        self.y = 2.        self.z1 = (2, 2) .        self.thing = thing(self.z1)..class thing:.    def __init__(self, shape):.        self.morethings = np.zeros(shape)...you can test either one with:..import test.x = test.mybigthing().x.compute()...you should get with either implementation:..[[0. 0.]. [0. 0.]]"
