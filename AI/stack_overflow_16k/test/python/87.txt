"how to create a function that will collect some scope/env information inline of the caller first? the question can be illustrated using a simple example, the mainline.py calls a function in prettyprint.py:..# in mainline.py.from prettyprint import prettyprint.array = list('abc').prettyprint('array', {**globals(), **locals()})..# in prettyprint.py.def prettyprint(codestring, env):.    print( eval(codestring, env) )...the question is, is there anything i can do in def prettyprint to ask prettyprint to collect the caller's scope information {**globals(), **locals()} implicitly, so that:  ...i don't have to type {**globals(), **locals()} everytime i call.prettyprint. i will be always collecting that.   .in my mainline.py, calling prettyprint can be simplified by only typing.prettyprint('array')"
