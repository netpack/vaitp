"blank: usage of relative paths in modules i have a directory structure that looks like this:..foo/.   __init__.py.   db.py.   database.db.main.py...now, in db.py, i read the contents of the database:..open('database.db').read()..this works as long as i am running db.py directly. however, when i try to import the foo package in main, and then run db.py, it fails with a file not found error. ..how can i avoid this? (preferably without making any changes to the modules in the foo package)..(note: i am aware of a solution like this relative paths in blank but that would entail a lot of modifications to my foo package)..edit 1: is it not possible to add something to __init__.py so that blank can find my files? ..edit 2: as another small example, consider what happens when i start to have nested packages:..foo/.  baz/.    __init__.py.    mod.py.    modules.json.  __init__.py.  db.py.  database.py.main.py...now, if main.py uses the foo package, and db.py requires the baz package, then i need to start making more complicated changes in the modules of the baz as well as the foo package, so that the file reads succeed...this kind of a situation is happening when i need to use a git module that has several nested submodules. obviously, it's not very convenient to make so many changes."
