"is there a way to check a function's signature in blank? i'm looking for a way to check the number of arguments that a given function takes in blank.  the purpose is to achieve a more robust method of patching my classes for tests.  so, i want to do something like this:..class myclass (object):.    def my_function(self, arg1, arg2):.        result = ... # something complicated.        return result..def patch(object, func_name, replacement_func):.    import new..    orig_func = getattr(object, func_name).    replacement_func = new.instancemethod(replacement_func, .                           object, object.__class__)..    # ....    # verify that orig_func and replacement_func have the .    # same signature.  if not, raise an error..    # .....    setattr(object, func_name, replacement_func)..my_patched_object = myclass().patch(my_patched_object, ""my_function"", lambda self, arg1: ""dummy result"").# the above line should raise an error!...thanks."
