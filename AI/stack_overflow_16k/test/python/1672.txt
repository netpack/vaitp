"how does getmail's file-descriptor handling (dup2'ing stdout/stderr) work? note: i'm asking a question about blank and getmail, not about how to get getmail working with dovecot. they are two different questions and i want to understand the source code of a library i'll be relying on as much as the immediate problem i face. thanks...i've been trying to get getmail to work with dovecot. it's not happening for me so i thought i'd see what getmail was sending to dovecot by cleverly (or so i thought) inserting a ""tee"" file that would print out the incoming data from getmail. i couldn't get that to work either, regardless of the stream i looked at, so i looked at the getmail source to see how it's sending the data:..def _deliver_command(self, msg, msginfo, delivered_to, received,.               stdout, stderr):.  try:.    # write out message with native eol convention.    msgfile = tempfile.temporaryfile().    msgfile.write(msg.flatten(delivered_to, received,.                              include_from=self.conf['unixfrom'])).    msgfile.flush().    os.fsync(msgfile.fileno()).    # rewind.    msgfile.seek(0).    # set stdin to read from this file.    os.dup2(msgfile.fileno(), 0).    # set stdout and stderr to write to files.    os.dup2(stdout.fileno(), 1).    os.dup2(stderr.fileno(), 2)...note, i'm not particularly familiar with blank...those os.dup2 are duplicating the file descriptors, but the fileno's they are using appear to be the fileno's of the handles they have. for example:..os.dup2(stdout.fileno(), 1)...stdout's fileno is 1 so what could the call to os.dup2 be for? i could understand if those streams had been redirected and were now being redirected back but the comment # set stdout and stderr to write to files appears to be saying the opposite...i'm having one of those days where nothing much has worked so any help will be much appreciated, probably a bit more than normal!"
