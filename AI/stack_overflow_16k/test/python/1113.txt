"blank calculator over localhost - unexpected results when getting result i'm trying to make a ""localhost calculator"", where you can send any equation over to the server, and the server will then return the result of the equation. for now i'm just printing the result in the server program...the problem..i have a little problem; i get unexpected results, when i run the program. for example: “10 + 45” will evaluate to “65” and that’s not right...i have a feeling that it’s something simple that i’m missing...the code..here is my code:..the server tmserver.py:.."""""".   this is the server, that hosts the connection between the client.   and the server..   this server stores the clients math equation, finds out what kind.   of equation it is, and returns back the final answer to the equation..""""""..import socket.import sys..import exceptions as exc..# socket for creating a connection..s = socket.socket(socket.af_inet, socket.sock_stream)..host = ''..# try getting the port from the commandline..try:.    port = int(sys.argv[1]).except indexerror:.    err = true.else:.    err = false..# if err is true, no argument is provided..# raise exception..if err == true:.    msg = ""you can't run this in the main with no port argument!"".    raise exc.runninginmainfileornoargumentexception(msg)..# host the connection with s.bind().s.bind((host, port))..# listen after request for connection.# and if so, accept connection..s.listen(1).print(""waiting for connection with client..."").conn, addr = s.accept().print(""client is at"", str(addr))..# get the raw math equation from client..client_data = conn.recv(100000)..# decode the data to string..decoded_data = client_data.decode()..# split the lines into understandable characters,.# and make all the numbers integer..splitted_eq = decoded_data.split(' ').new_splitted_eq = [].for item in splitted_eq:.    try:.        new_splitted_eq.append(int(item)).    except valueerror:.        # if not a number, just append..        new_splitted_eq.append(item)..# use this variable, for knowing when to check for math signs..last_was_num = false.done = false..final_result = 0.checking_signs = ['+', '-', '*', '/']..# then, go through the new list..for index, item in enumerate(new_splitted_eq):.    if type(item) == int:.        # then it's a number..        # set last_was_num to true..        last_was_num = true.        # loop back..        continue.    if last_was_num == true:.        # check for math signs..        for sign in checking_signs:.            if item == sign:.                if item == '+':.                    # just add the last number to the final_result..                    final_result += new_splitted_eq[index-1]..                    # check that the index does not exceed the lists boundaries..                    if index+2 &lt; len(new_splitted_eq):.                        if new_splitted_eq[index+2] == new_splitted_eq[-1]:.                            # then it's the last number in the list..                            # just add it, and break..                            final_result += new_splitted_eq[index+2].                            break.                    else:.                        # then it's the last two numbers..                        final_result += new_splitted_eq[index-1].                        final_result += new_splitted_eq[-1]...# print the final result, for now..# next step, is to send it back to the client...# but there are unexpected outputs, .# it's plussing the first number in the equation.# at the last iteration, so fx:.# 10 + 45 = 65.print(str(final_result))...the client tmclient.py:.."""""".   this is the client that is sending the raw math equation.   to the server..""""""..import socket.import sys..import exceptions as exc..# create socket..s = socket.socket(socket.af_inet, socket.sock_stream)..# connect to the server via. locahost..host = '127.0.0.1'..# try getting the port from the commandline..try:.    port = int(sys.argv[1]).except indexerror:.    err = true.else:.    err = false..# if err is true, no argument is provided..# raise exception..if err == true:.    msg = ""you can't run this in the main or with no port argument!"".    raise exc.runninginmainfileornoargumentexception(msg)..# ask for connection..s.connect((host, port))..# ask for an equation by the user..equation = input(""write an equation with spaces to seperate: "")..# send the equation to the server, for evaluation..s.send(str(equation).encode())..# read the answer..i = 0.# make the final result an empty string..eq_result = ''..while(true):.    # ask for the data..    # allow the client to read up to 100.000 bytes..    data = s.recv(100000).    # to minimize lag, read the output in chunks..    if i &lt; 5:.        eq_result += str(data.decode())..    # if the output is done;.    # break out of loop..    if not data:.        break..# print the equations result..if eq_result:.    print(""the answer to "" + equation + "" is equal to "" + eq_result).else:.    print(""no result has been returned. please try again later."")..# finally, terminate the connection with the server..s.close()...any help is highly appreciated."
