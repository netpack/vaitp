"how can i create two objects that monitor each other? my goal is to make two objects that interact, specifically, one object that creates data and appends it to a list, and another object that can check that list and output the data...based on another stackoverflow question, someone recommended creating a third object to store the data, and having the first two objects get initiated with that...the code works something like this:..class master:.    def __init__(self):.        self.data = [].    (some methods for interaction)..class a:.    def __init__(self, master_instance):.        ....        self.master_instance = master_instance.        (call method that randomly generates data and adds it to the master_instance data.        , and run this for a while (essentially as long as i want this process to continue)).    def my_a_method(self):.        .....class b:.    def __init__(self, master_instance):.        ....        self.master_instance = master_instance.        (call method that monitors master_instance to see if object a has added any data .        to it, and spit it out. like above, run this for as long as i want the process .        to continue).    def my_b_method(self):.        .....master = master().a = a(master).b = b(master)...so ideally, both of the process run at the same time. however, what ends up happening is the first object is created, sends out all the data, and then the second object runs, rather then running at the same time. it works in the sense that they can both share data, but it doesn't work in the sense of them both running at the same time...(this is an exercise in a book, from the chapter on classes, but they didn't really discuss how this would be done)"
