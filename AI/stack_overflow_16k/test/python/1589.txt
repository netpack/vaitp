"blank/django - class cross referencing is it possible to have classes in blank cross reference each other in a class attribute?  for example:..class a(object):.    ref = b..class b(object):.    reverse = a...the specific use case is a django model and it's serializer from django rest framework.  typically, you have to pass in a django model instance to its serializer to instantiate the serializer, but i'd like to be able to get a serializer from the model instance, like so:..class mymodel(models.model):.    class meta:.        default_serializer = myserializer..    def get_default_serializer(self):.        return self.meta.default_serializer(self)..class myserializer(serializers.modelserializer):.    class meta:.        model = mymodel..# this is how you normally get a serializer:.myserializer(mymodel.objects.get(id=1))..# but i want to do this, so i don't need to know what the default .# serializer is in order to get one:.mymodel.objects.get(id=1).get_default_serializer()...i know that django models allow you to use strings as foreign key arguments, then it lazy loads the related model.  could i implement something similar here?"
