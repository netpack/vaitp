"finding the ""root"" of a directory i am attempting to write a function in blank that scans the contents of a directory at the script's level (once de-bugged i'll switch it to not needing to be at the same level but for this problem it's irrelevant) and recursively lists the paths to anything that is not a directory. the logic i am working with is:..if the parent ""directory"" is not a directory then it must be a file so print the path to it. otherwise, for every ""file"" in that directory, if each ""file"" is not actually a directory, state the path to the file, and if the ""file"" is actually a directory, call the function again. ..the environment i am using is as follows: i have the script at the same level as a directory named a, and inside a is a file d.txt, as well as another directory named b. inside b is a file c.text. per the way i would like this function to execute, first it should recognize that a is in fact a directory, and therefore begin to iterate over its contents. when it encounters d.txt, it should print out the path to it, and then when it encounters directory b it should begin to iterate over it's contents and thereby print the path to c.txt when it sees it. so in this example, the output of the script should be ""c:privatead.txt, c:privateabc.txt"" but instead it is ""c:privated.txt, c:privateb"". here is the code thus far:..import os..def find_root(directory):.    if not os.path.isdir(directory):.        print(os.path.abspath(directory)).    else:.        for file in os.listdir(directory):.            if not os.path.isdir(file):.                print(os.path.abspath(file)).            else:.                find_root(file)..find_root('a')"
