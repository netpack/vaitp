"catch the continuous output from a subprocess i'm trying to catch the output of airodump-ng, that has a continuous output, and process every line searching for a string. but that doesn't work. so i try the same thing with ""htop"" command that has the same kind of output, and it still doesn't work..i'm trying this with blank 3.4 and blank 2.7, both on arch linux and osx mavericks. here's the code (not every import is necessary but nevermind):..import subprocess.import sys.import os.import time..command = [""htop""].proc = subprocess.popen(command, stdout = subprocess.pipe)..outs, errs = proc.communicate(timeout=3).proc.kill()...and it gives me:.. traceback (most recent call last):. file ""/users/andrei/dropbox/blank/file_prova.py"", line 8, in &lt;module&gt;. outs, errs = proc.communicate(timeout=3). file ""/library/frameworks/blank.framework/versions/3.4/lib/blank3.4/subprocess.py"", line 960, in communicate. stdout, stderr = self._communicate(input, endtime, timeout). file ""/library/frameworks/blank.framework/versions/3.4/lib/blank3.4/subprocess.py"", line 1618, in _communicate. self._check_timeout(endtime, orig_timeout). file ""/library/frameworks/blank.framework/versions/3.4/lib/blank3.4/subprocess.py"", line 986, in _check_timeout. raise timeoutexpired(self.args, orig_timeout). subprocess.timeoutexpired: command '['htop']' timed out after 3 seconds...seems like it crashes at proc.communicate() and doesn't execute the lines under that. i also tried to handle the exception but no way to make it work.....[edit].ok so it's for 4 am, i learned the try - exception handling, and after a looong time a managed to make it work with htop, following the tips hardly found here (the 2nd solution doesn't seem to work):.this is how it looks..from subprocess import popen, pipe.from time import sleep.from fcntl import fcntl, f_getfl, f_setfl.from os import o_nonblock, read..# run the shell as a subprocess:.p = popen(['htop'], stdout = pipe).# set the o_nonblock flag of p.stdout file descriptor:.flags = fcntl(p.stdout, f_getfl) # get current p.stdout flags.fcntl(p.stdout, f_setfl, flags | o_nonblock)..# let the shell output the result:.# get the output.while true:.    sleep(1).    try:.        print (read(p.stdout.fileno(), 1024).decode(""utf-8"")),.    except oserror:.        # the os throws an exception if there is no data.        print ('[no more data]').        continue...it works flawlessly. with htop..but not with airodump-ng. it prints on the terminal its output and every 1 second (the sleep() in the while loop) prints [no more data], like the stream is going elsewhere.....edit 2:.solved! the thing was just that airodump-ng dumps data to stderr, not stdout. pretty straight forward try ahah :d"
