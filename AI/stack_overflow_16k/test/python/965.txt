"kill a function after a certain time in windows i've read a lot of posts about using threads, subprocesses, etc.. a lot of it seems over complicated for what i'm trying to do.....all i want to do is stop executing a function after x amount of time has elapsed...def big_loop(bob):.    x = bob.    start = time.time().    while true:.        print time.time()-start...this function is an endless loop that never throws any errors or exceptions, period..i""m not sure the difference between ""commands, shells, subprocesses, threads, etc.."" and this function, which is why i'm having trouble manipulating subprocesses...i found this code here, and tried it but as you can see it keeps printing after 10 seconds have elapsed:..import time.import threading.import subprocess as sub.import time..class runcmd(threading.thread):.    def __init__(self, cmd, timeout):.        threading.thread.__init__(self).        self.cmd = cmd.        self.timeout = timeout..    def run(self):.        self.p = sub.popen(self.cmd).        self.p.wait()..    def run(self):.        self.start().        self.join(self.timeout)..        if self.is_alive():.            self.p.terminate().            self.join()..def big_loop(bob):.    x = bob.    start = time.time().    while true:.        print time.time()-start..runcmd(big_loop('jimijojo'), 10).run()  #supposed to quit after 10 seconds, but doesn't.x = raw_input('doneeeeeeeeeeee')...what's a simple way this function can be killed. as you can see in my attempt above, it doesn't terminate after 20 seconds and just keeps on going.....***oh also, i've read about using signal, but i""m on windows so i can't use the alarm feature..  (blank 2.7)..**assume the ""infinitely running function"" can't be manipulated or changed to be non-infinite, if i could change the function, well i'd just change it to be non infinite wouldn't i?..here are some similar questions, which i haven't able to port over their code to work with my simple function:.perhaps you can?..blank: kill or terminate subprocess when timeout..signal.alarm replacement in windows [blank]..ok i tried an answer i received, it works.. but how can i use it if i remove the if __name__ == ""__main__"": statement? when i remove this statement, the loop never ends as it did before....import multiprocessing.import queue.import time...def infinite_loop_function(bob):.    var = bob.    start = time.time().    while true:.        time.sleep(1).        print time.time()-start.    print 'this statement will never print'..def wrapper(queue, bob):.    result = infinite_loop_function(bob).    queue.put(result).    queue.close()....#if __name__ == ""__main__"":..queue = multiprocessing.queue(1) # maximum size is 1.proc = multiprocessing.process(target=wrapper, args=(queue, 'var')).proc.start()..# wait for timeout seconds.try:.    timeout = 10.    result = queue.get(true, timeout).except queue.empty:.    # deal with lack of data somehow.    result = none.finally:.    proc.terminate()..print 'running other code, now that that infinite loop has been defeated!'.print 'bla bla bla'.x = raw_input('done')"
