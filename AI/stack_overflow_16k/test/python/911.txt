"blank - function attributes or mutable default values say you have a function that needs to maintain some sort of state and behave differently depending on that state.  i am aware of two ways to implement this where the state is stored entirely by the function:...using a function attribute.using a mutable default value...using a slightly modified version of felix klings answer to another question, here is an example function that can be used in re.sub() so that only the third match to a regex will be replaced:..function attribute:..def replace(match):.    replace.c = getattr(replace, ""c"", 0) + 1.    return repl if replace.c == 3 else match.group(0)...mutable default value:..def replace(match, c=[0]):.    c[0] += 1.    return repl if c[0] == 3 else match.group(0)...to me the first seems cleaner, but i have seen the second more commonly.  which is preferable and why?"
