"how to target a sprite randomly i am trying to create a retro style 2d shooter game and am currently making a homing missile. i need to randomly select a sprite from a group (pygame.sprite.group) and find out its x and y coords. i have already made it home in on these coords so i do not need help with that. my code is:..an enemy class (they are all the same just with different sizes and pictures):.. class enemyshiplevel1(pygame.sprite.sprite):.        def __init__(self):.            super().__init__().            self.image = pygame.image.load(""c:/users    /me/pycharmprojects/game folder/spaceship game/enemy1.png"").            self.rect = self.image.get_rect().            self.rect.y = -50.            self.rect.centerx = random.randint(15, screen_width-15).            self.change_y = 0.            self.cooldown = 0.            self.targetx = 500.            self.health = 1.            if self.targetx &gt;= self.rect.centerx:.                self.change_x = 2.            else:.                self.change_x = -2..    def update(self):.        self.rect.x += self.change_x.        self.rect.y += self.change_y..        if self.rect.centery &lt; 200:.            self.rect.centery += 2.        self.get_target().        if self.targetx &gt; self.rect.centerx+10:.            self.change_x = 3.        elif self.targetx &lt; self.rect.centerx-10:.            self.change_x = -3.        else:.            self.change_x = 0.        self.cooldown -= 1.        if self.rect.left &lt; screen_rect.left:.            self.change_x = -self.change_x.        if self.rect.right &gt; screen_rect.right:.            self.change_x = -self.change_x..        if self.cooldown &lt; 0 and (self.rect.centerx-50 &lt; self.targetx &lt; self.rect.centerx+50) and player.trans is false:.            self.cooldown = random.randint(15, 25).            laser = normallaser(self.rect.centery, self.rect.centerx, false, 0, 8).            all_sprite_list.add(laser).            enemy_laser_list.add(laser).        player_laser_hit_list = pygame.sprite.spritecollide(self, player_laser_list, true).        for laser in player_laser_hit_list:.            if self.health &lt; 1:.                all_sprite_list.remove(self).                enemy_list.remove(self).            else:.                self.health -= 1..    def get_target(self):.        self.targetx = player.rect.centerx...targeting laser class (i know you can't bend lasers):..    class targetinglaser(pygame.sprite.sprite):.        def __init__(self, start_x, start_y, dest_x, dest_y):.        super().__init__().        self.floating_point_x = start_x.        self.floating_point_y = start_y.        self.x_diff = dest_x - start_x.        self.y_diff = dest_y - start_y.        self.angle = math.atan2(self.y_diff, self.x_diff).        self.velocity = 10.        self.change_x = math.cos(self.angle) * self.velocity.        self.change_y = math.sin(self.angle) * self.velocity.        self.image = pygame.image.load(""c:/users/minecraft/pycharmprojects/game folder/spaceship game/laser.png"").        self.image = pygame.transform.rotate(self.image, -(math.degrees(self.angle)+90)).        self.rect = self.image.get_rect().        self.rect.centerx = start_x.        self.rect.centery = start_y..def update(self):.    self.floating_point_y += self.change_y.    self.floating_point_x += self.change_x.    self.rect.y = int(self.floating_point_y).    self.rect.x = int(self.floating_point_x).    if self.rect.top &lt; screen_rect.top:.        player_laser_list.remove(self).        enemy_laser_list.remove(self).        all_sprite_list.remove(self).    if self.rect.bottom &gt; screen_rect.bottom:.        player_laser_list.remove(self).        all_sprite_list.remove(self).        enemy_laser_list.remove(self).    if self.rect.left &lt; screen_rect.left:.        player_laser_list.remove(self).        all_sprite_list.remove(self).        enemy_laser_list.remove(self).    if self.rect.right &gt; screen_rect.right:.        player_laser_list.remove(self).        all_sprite_list.remove(self).        enemy_laser_list.remove(self)...game loop:..all_sprite_list = pygame.sprite.group().enemy_list = pygame.sprite.group().player_list = pygame.sprite.groupsingle().player_laser_list = pygame.sprite.group().enemy_laser_list = pygame.sprite.group().live_list = pygame.sprite.group().health_bar_list = pygame.sprite.groupsingle()..screen = pygame.display.set_mode([screen_width, screen_height]).screen_rect = screen.get_rect().pygame.display.set_caption('game')..clock = pygame.time.clock().play = true.player = player(screen_width/2, screen_height-30).all_sprite_list.add(player).player_list.add(player)...for counter in range(2):.    enemy = enemyshiplevel1().    all_sprite_list.add(enemy).    enemy_list.add(enemy)...live1 = livesicon(5, 0, 1).live_list.add(live1).live1 = livesicon(27, 30, 2).live_list.add(live1).live1 = livesicon(50, 0, 3).live_list.add(live1).live1 = livesicon(72, 30, 4).live_list.add(live1).live1 = livesicon(95, 0, 5).live_list.add(live1).all_sprite_list.add(live_list)..health_bar = playerhealthbar(0, 690).all_sprite_list.add(health_bar).health_bar_list.add(health_bar)..ship = enemyshiplevel3().all_sprite_list.add(ship).enemy_list.add(ship)...while play is true:.    # shooting.    if player.shooting is true:.        if player.laser_cooldown &lt; 0:.            player.laser_cooldown = 5.            if player.last_shot == ""left"":.                player.last_shot = ""right"".                laser = normallaser(player.rect.centery-2,                 player.rect.centerx + 11, true, 0, 8).            all_sprite_list.add(laser).            player_laser_list.add(laser).        else:.            player.last_shot = ""left"".            laser = normallaser(player.rect.centery-2, player.rect.centerx - 11, true, 0, 8).            all_sprite_list.add(laser).            player_laser_list.add(laser).    if player.rocket_cooldown &lt; 0:.        player.rocket_cooldown = 15.        for counter in range(10):.            laser = targetinglaser(player.rect.centerx,player.rect.centery, player.rect.centerx, 0).            all_sprite_list.add(laser).            player_laser_list.add(laser).# shooting.# levels.if len(enemy_list) == 0:.    all_sprite_list.remove(enemy_laser_list).    all_sprite_list.remove(player_laser_list).    enemy_laser_list.empty().    player_laser_list.empty().    player.level += 1.    for counter in range(player.spawn_enemies1):.        enemy = enemyshiplevel1().        all_sprite_list.add(enemy).        enemy_list.add(enemy).    for counter in range(player.spawn_enemies2):.        enemy2 = enemyshiplevel2().        all_sprite_list.add(enemy2).        enemy_list.add(enemy2).    for counter in range(player.spawn_enemies3):.        ship = enemyshiplevel3().        all_sprite_list.add(ship).        enemy_list.add(ship).    if player.level == 2:.        player.spawn_enemies1 = 3.        player.spawn_enemies2 = 1.    if player.level == 3:.        player.spawn_enemies1 = 5.        player.spawn_enemies2 = 2.    if player.level == 4:.        player.spawn_enemies1 = 10.        player.spawn_enemies2 = 5.    if player.level == 5:.        player.spawn_enemies1 = 12.        player.spawn_enemies2 = 8.        player.spawn_enemies3 = 1.# levels.# end game.if player.lives == 0:.    play = false.# end game.# keys.for event in pygame.event.get():.    if event.type == pygame.quit:.        play = false.    elif event.type == pygame.keydown:.        if (event.key == pygame.k_a) or (event.key == pygame.k_left):.            player.change_x = -5.        elif (event.key == pygame.k_d) or (event.key == pygame.k_right):.            player.change_x = 5.        if event.key == pygame.k_space:.            player.shooting = true.    elif event.type == pygame.keyup:.        player.rotation = 0.        player.change_x = 0.        player.change_y = 0.        if event.key == pygame.k_space:.            player.shooting = false.# keys.all_sprite_list.update().screen.fill(black).all_sprite_list.draw(screen).enemy_laser_list.draw(screen).player_laser_list.draw(screen).pygame.display.update().clock.tick(60).quit()...each time you kill all of the spawned enemies then the game spawns in more and adds them to enemy_list()."
