"types.methodtype and the for loop i'm trying to use types.methodtype to modify the behaviour of some iterator...def parse(line):.    return line.upper()..def reader(f):.    f.__next__ = types.methodtype(lambda x: parse(_io.textiowrapper.readline(x)), f).    f.__iter__ = types.methodtype(lambda x: x, f).    return f...i guess i'm using types.methodtype correctly, because running the following code i get the expected result:..&gt;&gt;with open(""myfile.txt"") as f:.&gt;&gt;    x = reader(f).&gt;&gt;    print(f.__next__()).normal line...however, as soon as i use a for loop, it seems that the parse() function is not called...&gt;&gt;with open(""myfile.txt"") as f:.&gt;&gt;    for line in reader(f):.&gt;&gt;        print(line).normal line...it's as if the for-loop was using the original next() method of my object instead of the overwritten one...what am i missing here? i know i could achieve the same results in a simpler way, for instance yielding parsed lines in reader(), but i would really prefer to return this 'decorated' file object instead...thanks in advance."
