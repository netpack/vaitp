"efficiently detect overlapping networks i know how to detect overlapping networks. there are two ways to do this: by using netaddr's ""ipnetwork in ipnetwork"" or ipaddress's ""overlaps"" method. the question is how to find overlapping networks in array in most efficient way...at the moment, i use this code:..networks = {.    ipnetwork('10.1.0.0/24'): 'net2',.    ipnetwork('10.0.0.0/8'): 'net1',.    ipnetwork('10.0.0.0/16'): 'net3',.    ipnetwork('10.0.0.0/24'): 'net4',.    ipnetwork('192.168.0.0/16'): 'net5',.    ipnetwork('192.168.0.0/23'): 'net6',.    ipnetwork('192.168.1.0/24'): 'net7',.    ipnetwork('172.16.0.0/12'): 'net8'.}..net = sorted([key for key in networks.keys()]).for pi in range(0, len(net)-1):.    for si in range(pi+1, len(net)):.        if net[si] in net[pi]:.            print(f'{net[si]} ({networks[net[si]]}) overlaps with '.                  f'{net[pi]} ({networks[net[pi]]})')...it does the job, but uses many iterations (e.g. for 8 entries there are 7+6+5+... = 28 comparisons) and i'm looking for a more efficient way."
