"keeping the continued code that will not fail still in try...except? dive into blank -..this is a small snippet from fileinfo.py used in the book. this is opening an mp3 file and reading the last 128 bytes to fetch and later parse the metadata...try:                                .  fsock = open(filename, ""rb"", 0) .  try:                           .    fsock.seek(-128, 2)         .    tagdata = fsock.read(128)   .  finally:                        .    fsock.close()              .  ..  .                       # process tagdata: will never raise ioerror though.  ..except ioerror:                     .  pass...this can be refactored as:..try:                                .  fsock = open(filename, ""rb"", 0) .  try:                           .    fsock.seek(-128, 2)         .    tagdata = fsock.read(128)         .except ioerror:                     .  pass.finally:.  fsock.close()              .....                       # process tagdata.....i even used to have this question when i was learning java. should we just keep the logic that can actually raise an exception inside the try..except block or for the sake of keeping a code that does one particular job in one place; keep the other code that will never raise an exception also within a try...except?"
