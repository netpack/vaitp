"why blankâ€™s function call semantics pass-in keyword arguments are not ordered? using the double star syntax in function definition, we obtain a regular dictionary. the problem is that it loose the user input order. sometimes, we could want to know in which order keyword arguments where passed to the function...since usually a function call do not involved many arguments, i don't think it is a problem of performance so i wonder why the default is not to maintain the order...i know we can use:..from collections import ordereddict.def my_func(kwargs):.    print kwargs.my_func(ordereddict(a=1, b=42))...but it is less concise than:..def my_func(**kwargs):.    print kwargs.my_func(a=1, b=42)...[edit 1]:..1) i thought there where 2 cases:...i need to know the order, this behaviour is known by the user through the documentation..i do not need the order, so i do not care if it is ordered or not....i did not thought that even if the user know it use the order, he could use:..a = dict(a=1, b=42).my_func(**a)...because he did not know that a dict is not ordered (even if he should know)..2) i thought that the overhead would not be huge in case of a few arguments, so the benefits of having a new possibility to manage arguments would be superior to this downside...but it seems (from joe's answer) that the overhead is not negligible...[edit 2]:..it seems that the pep 0468 -- preserving the order of **kwargs in a function is going in this direction."
