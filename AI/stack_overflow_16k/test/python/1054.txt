"good convention for function return i have a object instance which needs to be compared against a list of instances of the same class,to find out one with equal attributes..the attributes to be used for comparing is also provided,and are loaded dynmically every invocation..at the end ,i need to return the successful instance(if any),the attributes used for comparing,or a list of failed instances along with the differing fields(if none matched).  ..def func(tomatch,listofprospects):.    attrs = &lt;load dynamically&gt;.    for l in listofprospects:.        failues=list().        mismatch=match(tomatch,l,attrs)#returns any mismatched fields for this element.        if not mismatch:.            return (l,attrs).        else:.            filures.extend(dict(l.name(),mismatch)).    return(failures,attrs)...i am not comfortable with the fact that returning values of the function mean different for different circumstances..what would be the recommended convention around this?.also ,can there be a way to accommodate this into a comprehension/map form - inspite of the ugliness of the returning values."
