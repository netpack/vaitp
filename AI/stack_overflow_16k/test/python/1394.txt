"assignment to value returned from list i have a class with multiple vectors from measurements. i need to iterate over these vectors but would like to use only chosen measurements. the simplified version of what i build so far is below:..import pylab as pl.class iterationreturn(object):.    def __init__(self):.        self.a = (1,2,3,4,5,6,7,8,9).        self.b = (10,20,30,40,50,60,70,80,90).        self.c = (-1,-2,-3,-4,-5,-6,-7,-8,-9).        self.i = 0..    def returnnextset(self):.        self.aiter = self.a[self.i].        self.biter = self.b[self.i].        self.citer = self.c[self.i].        self.i +=1.        return (self.aiter, self.biter, self.citer)               ..if __name__ == '__main__':.    iteration = iterationreturn().    for i in range(len(iteration.a)): .        # x takes aiter value from iteration.returnnextset().        # y takes biter value from iteration.returnnextset()        .        x,y = iteration.returnnextset()    .        pl.scatter(x, y).    pl.show()...i don't want to use x,y,z = iteration.returnnextset() which would work in this example, but in practice i have many more values and do not want to assign them all. i can't find a way to assign only to aiter and biter. ..i have an error:..    x,y = iteration.returnnextset()      .valueerror: too many values to unpack...in my problem i have many measurements (a,b, ... ,z) and for example i want to assign x=d and y=k.i also think it should be done in different way from the beginning like designing new class with inheritance but not sure how to do that. would appreciate your help"
