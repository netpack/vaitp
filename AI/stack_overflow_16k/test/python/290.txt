"convert **kwargs arguments to positional i want to write a wrapper for functions which is aware of positional arguments. unfortunately, i also want to allow the wrapped function to be called with named positional arguments (for readability). since the wrapped function is actually a new function, it would not have the positional argument names for the old function...example: here is a wrapper...def double_second_argument(f):..    def g(*args):.        newargs = list(args).        newargs[1] *= 2.        return f(*newargs)..    return g...here is a function...def add(x, y):.    return x + y...i wrap the function...add_twice = double_second_argument(add)...i call the function without and with named parameters...&gt;&gt;&gt; add_twice(3, 5).13.&gt;&gt;&gt; add_twice(x=3, y=5) # = 13.typeerror: g() got an unexpected keyword argument 'x'...i get an error, because g doesn't have **kwargs, and adding it in would have just turned the error into an indexerror, since newargs[1] would have indexed an empty list...even worse is if the original function itself is wrapped (perhaps by the same wrapper). we would have to define both wrappers in a way that preserves the argument list."
