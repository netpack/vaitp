"how to rearrange a string's characters such that none of it's adjacent characters are the same, using blank in my attempt to solve the above question, i've written the following code:..logic: create a frequency dict for each character in the string (key= character, value= frequency of the character). if any character's frequency is greater than ceil(n/2), there is no solution. else, print the most frequent character followed by reducing its frequency in the dict/..import math, operator.def rearrangestring(s):.    # fill this in..    n = len(s).    freqdict = {}.    for i in s:.        if i not in freqdict.keys():.            freqdict[i] = 1.        else:.            freqdict[i] += 1..    for j in list(freqdict.values()):.        if j &gt; math.ceil(n / 2):.            return none..    return maxarrange(freqdict)[:-4]..temp = """"..def maxarrange(inp):.    global temp.    n = len(inp).    if list(inp.values()) != [0] * n:.        resch = max(inp.items(), key=operator.itemgetter(1))[0].        if resch is not none and resch != temp:.            inp[resch] -= 1.            # terminates with none.            temp = resch.            return resch + str(maxarrange(inp))..# driver.print(rearrangestring(""abbccc"")).# cbcabc.print(rearrangestring(""abbcccc""))...in the first try, with input abbccc, it gives the right answer, i.e. cbcabc, but fails for the input abbcccc, returning ccbcabc, without handling it using the temp variable, else returning cbcabc and skipping c altogether when handled using temp..how should i modify the logic, or is there a better approach?"
