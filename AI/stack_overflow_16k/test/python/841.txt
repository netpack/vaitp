"how do i repeat this and save the result for each section? def main():.    section = 'a'.    while section:.        section = (input('what section are you inputing ticket numbers for? ')).        if section in ('a', 'a') :.            limit = 300.            cost = 20.            ticketsold = gettickets(section, limit).            sectionacost = calcincome(ticketsold, cost).        elif section in ('b', 'b'):.            limit = 500.            cost = 15.            ticketsold = gettickets(section, limit).            sectionbcost = calcincome(ticketsold, cost).        elif section in ('c', 'c'):.            limit = 200.            cost = 10.            ticketsold = gettickets(section, limit).            sectionbcost = calcincome(ticketsold, cost).    displaytotals()....def gettickets(section, limit):.    ticketsold = int(input('how many tickets were sold? ')).    return int(ticketsold).    if ticketsvalid(ticketsold, limit):.         return ticketsvalid..def ticketsvalid(ticketsold, limit):.    if ticketsold &lt;= limit:.        status = true.    else:.        status = false.    return status..def calcincome(ticketsold, cost):.    sectionincome = ticketsold * cost.    return sectionincome.. def displaytotals():.     print('section a generated {}'.format(sectionacost)).    print('section b generated {}'.format(sectionbcost)).    print('section c generated {}'.format(sectionccost)).    totalrevenue = sectionacost + sectionbcost + sectionccost.    print('the total revenue is {}'(totalrevenue))...main()...my problem is now that the loop doesn't exit to display the totals..additional problem requirements:..• create a main module as your program start module..• use local named constants in the main module for seat costs and section seat limits that will be passed to the modules and functions described under the following points...• although there are three seating sections in the problem, a set of generic modules and functions will be created that are used for any given section based upon the passed parameters. the general logic for these function is described below:..o include input function (gettickets) that takes section letter and seat limit for given section as parameters. the number of tickets for the given section is returned. this function should only return a valid number of tickets; the validation function, ticketsvalid, should be called from this function...o include validation function (ticketsvalid) that takes the tickets sold per section and seat limit per section as passed parameters. a boolean indicating whether the passed tickets sold for the given section is in the valid range is returned. this validation function will be called from within the previously defined gettickets function...o include income calculation function (calcincome) that takes tickets sold and seat cost as passed parameters and returns the income generated for the section...• be sure to use the currencyformat"
