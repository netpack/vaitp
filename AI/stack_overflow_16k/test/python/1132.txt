"tagging an arbitrary value with metadata in blank i've devised an evil scheme to add tags to blank objects via inheritance the following way:..def tag(val, tag_cls):.    val_cls = type(val).    class tagged_cls(val_cls, tag_cls):.        pass.    tagged_cls.__name__ = '{}({})'.format(tag_cls.__name__, val_cls.__name__).    return tagged_cls(val)..# example tags.class foo: pass.class bar: pass..def foo(val): return tag(val, foo).def bar(val): return tag(val, bar)...so then i can wrap values with these and they will behave exactly like original values when comparing, but will have extra info on them...&gt;&gt;&gt; k = foo('key').&gt;&gt;&gt; k.'key'.&gt;&gt;&gt; k == 'key'.true.&gt;&gt;&gt; {'key': 'value'}[k].'value'.&gt;&gt;&gt; isinstance(k, foo).true.&gt;&gt;&gt; isinstance(k, bar).false...the above works, but i feel like this is a bit too clever and surely there is a more blankic way to do it...any better way? anything immediately wrong with the above approach?"
