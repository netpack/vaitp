"it appears some parts of an expression may be evaluated at compile-time, while other parts at run-time probably a silly question, since i may have already answered my question, but i just want to be sure that i'm not missing something ..constant expressions are evaluated at compile time within checked context. i thought the following expression shouldn't be evaluated at compile time, since i assumed blank considers a particular expression as a constant expression only if all operands on the left-hand side are constants:..int i= 100;.long u = (int.maxvalue  + 100 + i); //error...instead it appears compiler considers any subexpression where both operands are constants as a constant expression, even if other operands in an expression are non-constants? thus compiler may only evaluate a part of an expression at compile time, while the remained of the expression ( which contains non-constant values ) will get evaluated at run-time --> i assume in the following example only (200 +100) gets evaluated at compile time..int i=100;.long l = int.maxvalue  + i + ( 200 + 100 ); // works...are my assumptions correct?..thanx"
