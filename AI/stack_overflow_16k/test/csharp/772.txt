"blank - can i derive from class with generic base type? intro..i am creating a asp.net webapi application with enity framework. what i need to do is return different representations of the same resource for one uri, depending on user role. for example, api/employees/1 will return two different objects for admin and standard user:..standard user..public class employeebasic {.    public string firstname { get; set; }.    public string lastname { get; set; }.}...admin..public class employeeextended : employeebasic {.    public decimal salary { get; set; }.}.....the idea and the attempts..for each resource representation, i will need to provide some related classes, let's say sort models for example. i was wondering if it is possible to use generic types and inheritance to create a generic repository methods for related representations. i thought of the following way of doing this:..1) create some base interface for sort models:..public interface isortmodel&lt;out tbusinessentity&gt; {..}...2) create generic sortmodel as a base type for all sort models.. public abstract class sortmodel&lt;tdbentity, tbusinessentity&gt; : isortmodel&lt;tbusinessentity&gt;. {.    // database sorting.    public abstract iqueryable&lt;tdbentity&gt; applytoquery(iqueryable&lt;tdbentity&gt; query);..    // local sorting.    public abstract ienumerable&lt;tbusinessentity&gt; applytolocal(ienumberable&lt;tbusinessentity&gt; locallist);..    // ....    // some private logic (expression mappers, etc.).}...3) create sort model for basic resource..public class employeebasicsortmodel : sortmodel&lt;dbmodel.employee, employeebasic&gt;.{.    public int fullname { get; set; }..    public override iqueryable&lt;dbmodel.employee&gt; applytoquery(iqueryable&lt;dbmodel.employee&gt; query) {.        // implementation.    }..    public override ienumerable&lt;employeebasic&gt; applytolocal(ienumberable&lt;employeebasic&gt; locallist) {.        // implementation.    }.}...4) extend the basic sort model and add sorting for the extended resource properties..public class employeeextendedsortmodel : employeebasicsortmodel //, ... is it possible to somehow do that?.{.   public override ienumerable&lt;employeeextended&gt; applytolocal(ienumberable&lt;employeeextended&gt; locallist) {.        var partiallyorderedlist = base.applytolocal(locallist);..        // add extended sorting.   }..   // ... ?.}...5) use the above classes to create generic service:..class employeesservice() {.    public ilist&lt;temployee&gt; getall&lt;temployee&gt;(isortmodel&lt;temployee&gt; sortmodel).        where temployee : basicemployee.    {.        // implementation.    }..}.....the problem..when i thought about it for the first time, it seemed pretty simple. but when i started implementing this, i couldn't figure out the way to implement step 4. either i am missing something in my blank knowledge (which is quite possible) or this is not possible in the way i am trying to do this. so the question is: can i create a base class with generic type, derive from it with basic resource as a type and derive one more time with the extended class?"
