"why is an implicit operator static? i notice that an implicit operator is required to be called static but it actually is not really static at all... how come the implicit operator cannot be accessed statically but it can be accessed through an instance. this is the complete opposite of static. suppose i wanted a static static implicit operator so that i could implicitly convert the static states of a class. ..for example..a = new b(); // implicitly converts b to a..a = b(); // implicitly convert the static states of b to a....so for example b is a non-static class because it has a form but for all intents and purposes it is static and all instances are sharing the same information so i want to implicitly convert the class' static internals...i will try to go into more detail of my example since jeff thinks it makes no sense...class b displays a dialog form, but it saves all the information entered into static variables. this is because the instances of b are only to display the dialog form and the data entered is one logical block of data(there is only one logical instance of the data entered). all the static variables fit directly into class a and so i can seamlessly convert the static variables in b to an instance of a class, however i would like to use implicit operator for this task instead of having a separate method. but it laments me that i cannot have an actual static implicit operator. perhaps i am misunderstanding the word static and i am only using it in terms of how it works with methods and classes."
