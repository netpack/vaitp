"double reference delegate sorry, i did not describe the real problem. and i decided to edit my question..how can i simplify my example to dispense with the getdelegate statistical function?.there are many classes of c in which, for a specific event e, it is required to perform the action cd. but before performing the very action of cd, you need to check the permission. the results of the permission check, i get in the main stream of class a, the method call back. and already by the result of the check i decide whether to start the action cd..that is, in class c for event e, it is necessary to set the cd for the delegate declared in class a. and from class a to call cd if permission is obtained..in a real application, there is multithreading...    public delegate void d();.public delegate ref d getd();.class a//this is thread 1.{.    static d d;.    static void main(string[] args).    {.        c c1 = new c(getdelegate, ""name1"");.        c c2 = new c(getdelegate, ""name2"");.        console.readline();.    }.    static ref d getdelegate().    {.        return ref d;.    }.    void onpermissionsresult(bool result)//this is a permission check callback method..    {.        if (result).        {.            d();.        }.        else.        {.            console.writeline(""you do not have permission.r"");.        }.    }.}.class c//this is thread 2.{.    string name;.    getd getd;.    public c(getd getd, string name).    {.        this.name = name;.        this.getd = getd;           .    }.    void m().    {.        //this is example of event 'e'.        button.click += () =&gt;.        {.            getd() = () =&gt;//this is ation 'cd'.            {.                console.writeline($""action: {name}r"");.            };.            checkpermissions();//begin check permission.               .        };.    }.}"
