"what's is the essential difference between inheritance and interface implementation mechanisms? since interface is actually a type, i always regard interface implementation as a special kind of inheritance mechanism, treating the interface as the base type and the type implementing it as a derived type. when an instance of the 'derived' type is created, the methods defined in the 'base' type, i mean the interface, are added into the method table, then the methods defined in this 'derived' type itself are added into the method table too. .when there is a 'grandson' type, it will add all methods defined in its father and grandfather(the interface) declaration into its method table. virtual methods can be overridden of course...is my interpretion correct?.it seems not to make sense in this scenerio: what if the grandson implements the interface again? like:..interface ifather { void m(); }..class son: ifather{}..class grandson : son, ifather{}...the grandson adds the methods in the interface into its method table twice?"
