"does the lack of the async keyword in interfaces break di in blank5.0? i was excited to create my first app with blank5.0, and i wanted to use the async/await keywords to ease the pains of async data calls...i'm a bit baffled that interfaces does not allow the async keyword to be part of the contract, as the await keyword only works for async marked methods. this would mean that it is impossible to call async methods through interface references. this also goes for abstract methods. am i missing something here? this would mean that my regular di-stuff will no longer work:..iasyncrepository&lt;t&gt; {. task&lt;ilist&lt;t&gt;&gt; getasync(); // no 'async' allowed.}..abstract class asyncrepositorybase&lt;t&gt; {. public abstract task&lt;ilist&lt;t&gt;&gt; getasync(); // no 'async' allowed...// client code:..iasyncrepository&lt;model&gt; repo = ioc.resolve&lt;iasyncrepository&lt;model&gt;&gt;();.var items = await repo.getasync(); // doooooh, will not compile!...this is my current solution:..public abstract class asyncrepositorybase&lt;t&gt;.{.    protected task&lt;ilist&lt;t&gt;&gt; _fetchertask;..    protected asyncrepositorybase(task&lt;ilist&lt;t&gt;&gt; fetchertask).    {.        _fetchertask = fetchertask;.    }..    public virtual async task&lt;ilist&lt;t&gt;&gt; getasync().    {.        return await _fetchertask;.    }.}...will i have to choose between abstraction and the langauge feature? please tell me i'm missing something."
