"is the static initialization order of this code implementation specific? i have a design that relies heavily on static initialization. i've noticed that after a series of os updates, my design appears to be failing on some older versions of the .net framework (v&lt;3.5), and only under release configuration. ..i think i've been able to narrow the issue down to a block of code similar in design to this:..public abstract class foo { public static object a; }.public class bar : foo { .    public static object b = initb();.    private static object initb(){ return a }; }..public static void main().{.    foo.a = new object();.    bar bar = new bar();.    console.write((bar.b==null).tostring());.}...on .net 2.0, under release build, on my system, it appears my code is printing true. whereas on .net 4.5, it's printing false. is the behavior of the code above implementation specific?"
