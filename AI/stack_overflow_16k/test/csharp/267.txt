"try/catch underflow and overflow exceptions need to utilize underflow and overflow exceptions using try/catch to pass the tests. there are series of tests that need to pass testing inputs that are outside of the bounds of the array. ..here is the code that is provided to me. i have to modify the smartarray class. the program class contains all the tests i need to pass...using system;...namespace smartarray_test.{..class underflowexception : exception.{.    public underflowexception(string s) : base(s) { }.}.class overflowexception : exception.{.    public overflowexception(string s) : base(s) { }.}..class smartarray.{.    int[] rgnums;..    public smartarray().    {.        rgnums = new int[5];.    }.    public smartarray(int howmany).    {.        rgnums = new int[howmany];.    }..    public void setatindex(int idx, int val).    {.        try.        {.            rgnums[idx]=val;.        }.        catch (underflowexception exception).        {..            console.writeline(exception.message);.        }.        catch (overflowexception exception).        {.            console.writeline(exception.message);.        }.    }..    public int getatindex(int idx).    {.        try.        {.            return rgnums[idx];..        }.        catch (underflowexception exception).        {.            console.writeline(exception.message);.        }.        catch (overflowexception exception) .        {    .            console.writeline(exception.message);.        }.        return 0;.    }..    public void printallelements().    {.        for (int i = 0; i &lt; rgnums.length; i++).            console.writeline(rgnums[i]);.    }..    public bool find(int val).    {.        for (int i = 0; i &lt; rgnums.length; i++).        {.            if (rgnums[i] == val).                return true;.        }.        return false;.    }..}...class program.{.    static void main(string[] args).    {.        smartarray sa = new smartarray();.        const int smart_array_size = 5;.        bool testpassed = false;..        console.writeline(""check this: smartarray starts with all zeros"");.        sa.printallelements();.        console.writeline(""n*******************n"");..        try .        {.            console.writeline(""================= setatindex ================="");.            console.writeline(""autochecked: can add at slot 0?"");.            sa.setatindex(0, 10);.            console.writeline(""test passed: able to set element 0!"");.        }.        catch(exception e).        {.            console.writeline(""test failed: unable to set element 0!"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: can add at slots 0-4?"");.        testpassed = true;.        for (int i = 0; i &lt; smart_array_size; i++).        {.            try.            {.                sa.setatindex(i, 10 * i);.            }.            catch (exception e).            {.                console.writeline(""test failed: unable to set element {0}!"", i);.                console.writeline(e.message);.                testpassed = false;.                break; // out of the loop.            }.        }.        if (testpassed).            console.writeline(""test passed: able to set all elements!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to add at slot {0}?"", smart_array_size);..        try.        {.            sa.setatindex(smart_array_size, 10);.            console.writeline(""test failed: set element {0} did not overflow (but should have)"", smart_array_size);.        }.        catch (overflowexception e).        {.            console.writeline(""test passed: unable to set element {0}!"", smart_array_size);.        }.        catch (exception e).        {.            console.writeline(""test failed: set element {0} failed, but for the wrong reason"", smart_array_size);.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");...        console.writeline(""autochecked: should not be able to add at slot {0}?"", smart_array_size + 10);.        try .        {.            sa.setatindex(smart_array_size + 10, 10);.            console.writeline(""test failed: set element {0} didn't overflow"", smart_array_size + 10);.        }                  .        catch (overflowexception e).        {.            console.writeline(""test passed: unable to set element {0}!"", smart_array_size);.        }.        catch (exception e).        {.            console.writeline(""test failed: set element {0} failed, but for the wrong reason"", smart_array_size);.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to add at slot -1?"");.        try .        {.            sa.setatindex(-1, 10);.            console.writeline(""test failed: set element -1 didn't underflow"");.        }                  .        catch (underflowexception e).        {.            console.writeline(""test passed: unable to set element -1!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: set element -1 failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to add at slot -10?"");.        try.        {.            sa.setatindex(-10, 10);.            console.writeline(""test failed: set element -10 didn't underflow"");.        }.        catch (underflowexception e).        {.            console.writeline(""test passed: unable to set element -10!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: set element -10 failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""check this: should see 0, 10, 20, 30, 40"");.        sa.printallelements();.        console.writeline(""n*******************n"");..        console.writeline(""================= getatindex ================="");.        int valuegotten;.        console.writeline(""autochecked: can get from slot 0?"");.        try.        {.            valuegotten = sa.getatindex(0);.            if (valuegotten != 0).            {.                console.writeline(""test failed: unexpected value from slot 0: (expected 0, got {0})"", valuegotten);.            }.            else.                console.writeline(""test passed: able to get expected value from slot 0!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: unable to get from slot 0"");.            console.writeline(e.message);.        }..        console.writeline(""n*******************n"");..        console.writeline(""autochecked: can get from slots 0-4?"");.        testpassed = true;.        for (int i = 0; i &lt; smart_array_size; i++).        {.            try.            {.                valuegotten = sa.getatindex(i);.                if (valuegotten != 10 * i).                {.                    console.writeline(""test failed:  unexpected value at slot {0} (expected {1}, got {2})"", i, i * 10, valuegotten);.                    testpassed = false;.                    break; // out of the loop.                }.                else.                    console.writeline(""test passed: able to get expected value from slot 0!"");.            }.            catch (exception e).            {.                console.writeline(""test failed: unable to get from slot {0}"", i);.                console.writeline(e.message);.                break;.            }.        }.        if (testpassed).            console.writeline(""test passed: able to get expected values!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to get from slot {0}?"", smart_array_size);.        try.        {.            valuegotten = sa.getatindex(smart_array_size);.            console.writeline(""test failed: get from element {0} didn't overflow?"", smart_array_size); .        }.        catch (overflowexception e).        {.            console.writeline(""test passed: unable to get element at smart_array_size!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: get element at smart_array_size failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to get from slot {0}?"", smart_array_size + 10);.        try.        {.            valuegotten = sa.getatindex(smart_array_size + 10);.            console.writeline(""test failed: get from element {0} didn't overflow?"", smart_array_size + 10);.        }.        catch (overflowexception e).        {.            console.writeline(""test passed: unable to get element at smart_array_size!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: get element at smart_array_size failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to get from slot -1?"");.        try.        {.            valuegotten = sa.getatindex(-1);.            console.writeline(""test failed: get from element -1 didn't underflow"");.        }.        catch (underflowexception e).        {.            console.writeline(""test passed: unable to get element at -1!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: get element at -1 failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to get from slot -10?"");.        try.        {.            valuegotten = sa.getatindex(-10);.            console.writeline(""test failed: get from element -10 didn't underflow"");.        }.        catch (underflowexception e).        {.            console.writeline(""test passed: unable to get element at -10!"");.        }.        catch (exception e).        {.            console.writeline(""test failed: get element at -10 failed, but for the wrong reason"");.            console.writeline(e.message);.        }.        console.writeline(""n*******************n"");..        console.writeline(""================= find ================="");.        console.writeline(""autochecked: can find 0?"");.        if (!sa.find(0)).            console.writeline(""test failed: unable to find value 0!"");.        else.            console.writeline(""test passed: able to find value 0!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: can find the values in slots 0-4?"");.        testpassed = true;.        for (int i = 0; i &lt; smart_array_size; i++).        {.            try.            {.                valuegotten = sa.getatindex(i);.                if (!sa.find(valuegotten)) // test by getting from array.                {.                    console.writeline(""test failed: unable to find {0}!"", valuegotten);.                    testpassed = false;.                    break; // out of the loop.                }.            }.            catch (exception e).            {.                console.writeline(""test failed: find (iteration "" + i + "") failed because getatindex failed"");.            }.        }.        if (testpassed).            console.writeline(""test passed: able to find values that are already in the array!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: can find the values calculated to be in slots 0-4?"");.        testpassed = true;.        for (int i = 0; i &lt; smart_array_size; i++).        {.            if (!sa.find(i * 10)) // test by re-calculating the result.            {.                console.writeline(""test failed: unable to find {0}!"", i * 10);.                testpassed = false;.                break; // out of the loop.            }.        }.        if (testpassed).            console.writeline(""test passed: able to find values calculated to be in the array!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to find -1?"");.        if (sa.find(-1)).            console.writeline(""test failed: able to find -1, which should not be present"");.        else.            console.writeline(""test passed: unable to find nonexistent value -1!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to find -10?"");.        if (sa.find(-10)).            console.writeline(""test failed: able to find -10, which should not be present"");.        else.            console.writeline(""test passed: unable to find nonexistent value -10!"");.        console.writeline(""n*******************n"");..        console.writeline(""autochecked: should not be able to find 11?"");.        if (sa.find(11)).            console.writeline(""test failed: able to find 11, which should not be present"");.        else.            console.writeline(""test passed: unable to find nonexistent value 11!"");.        console.writeline(""n*******************n"");.    }.}...}"
