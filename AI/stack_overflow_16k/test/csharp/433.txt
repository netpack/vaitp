"blank error - invalid character in a base-64 string i am writing a blank assembly to take advantage of the gzip functionality in newer versions of the .net framework, and i am copying code i have used successfully elsewhere...the way this works is that an application we are using feeds a stream to the assembly, the assembly reads it, compresses it, then returns the compressed result as a string.  that string is then put back into the assembly through a stream to uncompress it (normally it will be stored, but i am simply running a basic test)...however, when i feed the string back to the assembly, it errors out while reading it from a byte array that is read from the application's stream.  here is the code:..    private void readstream(istream stream, out byte[] data).    {.        using (memorystream writer = new memorystream()).        {.            intptr rwbytes = marshal.allochglobal(4);.            int _rwbytes = 0;.            data = new byte[0xafc8];..            do.            {.                stream.read(data, 0xafc8, rwbytes);.                _rwbytes = marshal.readint32(rwbytes);.                writer.write(data, 0, _rwbytes);.            }.            while (_rwbytes &gt; 0);.            writer.close();..            marshal.freehglobal(rwbytes);.        }.    }..    public string compressstring([in, marshalas(unmanagedtype.asany)] object appstream).    {.        byte[] buffer = null;.        readstream(appstream as istream, out buffer);..        memorystream ms = new memorystream();.        using (gzipstream zip = new gzipstream(ms, compressionmode.compress, true)).        {.            zip.write(buffer, 0, buffer.length);.        }..        ms.position = 0;.        memorystream outstream = new memorystream();..        byte[] compressed = new byte[ms.length];.        ms.read(compressed, 0, compressed.length);..        byte[] gzbuffer = new byte[compressed.length + 4];.        system.buffer.blockcopy(compressed, 0, gzbuffer, 4, compressed.length);.        system.buffer.blockcopy(bitconverter.getbytes(buffer.length), 0, gzbuffer, 0, 4);.        string str = convert.tobase64string(gzbuffer);..        gzbuffer = convert.frombase64string(str);.        return str;.    }..    public string decompressstring([in, marshalas(unmanagedtype.asany)] object appstream).    {.        byte[] buffer = null;.        readstream(appstream as istream, out buffer);..        string compressedtext = encoding.utf8.getstring(buffer); ..        byte[] gzbuffer = convert.frombase64string(compressedtext);..        using (memorystream ms = new memorystream()).        {.            int msglength = bitconverter.toint32(gzbuffer, 0);.            ms.write(gzbuffer, 4, gzbuffer.length - 4);..            buffer = new byte[msglength];..            ms.position = 0;.            using (gzipstream zip = new gzipstream(ms, compressionmode.decompress)).            {.                zip.read(buffer, 0, buffer.length);.            }.        }..        return encoding.utf8.getstring(buffer);.    }...the string is returned from the compressstring function as:..yk8aab+lcaaaaaaabadtvqdghemwjsyvbcp7f0r1stfgdkeiggatjniqqbdswyjn5plshwlhiymrkohkzvzlxwywqmztnbz33nvvvffee++997o7nu4n99//p1xmzafs9s5k2smeiycqyb8/fnwfpyk+ndd5wjrplk6rxarom6aolmmbn+04tz/n7cdn2utu4jwt2vsqqt8241/jr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhz/67nr9j86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89/99/fjschz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj5//7z49g8kpnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9px///nrch70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj57/7z8/gsgpnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50fp/nef/ayk/ubjirwaa...when it is read back from the stream in the encoding.utf8.getstring call, it is:..yk8aab+lcaaaaaaabadtvqdghemwjsyvbcp7f0r1stfgdkeiggatjniqqbdswyjn5plshwlhiymrkohkzvzlxwywqmztnbz33nvvvffee++997o7nu4n99//p1xmzafs9s5k2smeiycqyb8/fnwfpyk+ndd5wjrplk6rxarom6aolmmbn+04tz/n7cdn2utu4jwt2vsqqt8241/jr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhz/67nr9j86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89/99/fjschz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj5//7z49g8kpnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9px///nrch70/oj50foj50fpj54fpt96fvt86pnr86pnr8+pnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50foj50fpj57/7z8/gsgpnh89p3p+9pzo+dhzo+dhz4+ehz0/en70/oj50fp/nef/ayk/ubjirwaa...these strings are identical.  i can even convert it back and forth in the compressstring function with no problem.  any thoughts out there?  this is very strange."
