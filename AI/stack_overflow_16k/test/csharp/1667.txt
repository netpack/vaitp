"update data in a listbox from another form i'm creating a program that maintains student scores. i've created a class called students that stores the data and displays it in a list box. once the user clicks add a new form (frmaddstudent) loads that allow them to add the user by name and their scores and display it in the list box in the main form. it also allows the update/delete functions. i can successfully add students to the list and edit them, but when i press the ok button in the update students form i get the error...  system.argumentoutofrangeexception: 'index was out of range. must be non-negative and less than the size of the collection. parameter name: index'...i looked up that this means its thrown when the value of an argument is outside the allowable range of values as defined by the invoked method, but not sure how it applies here. my value i enter when updating is within range...source code below..https://github.com/triptonix/student.git..frmupdatestudent.cs..private void updatebutton_click_1(object sender, eventargs e)  //open update form for current student.{.    student form1 = new student();.    form1.name = studentname.text;.    parentform.updatestudent(index, form1);.    close();.}...form1.cs..public list&lt;student&gt; studentlist = new list&lt;student&gt;();..public student getstudent(int id)  //get student index.{.    return studentlist[id];.}..public void updatestudentlist().{.    students.datasource = null;.    students.datasource = studentlist;.    students.displaymember = ""name"";.}..public bool updatestudent(int originalindex, student studenttoedit).{.    try.    {.        student student = getstudent(originalindex);  //select index of student.        student.name = studenttoedit.name;  //name of student.        studentlist.removeat(originalindex); //remove the student at the index selected.        studentlist.insert(originalindex, student); //insert new student at index..        updatestudentlist(); //update student list.    }.    catch { return false; }.    return true;.}...student.cs..public class student.{.    public list&lt;int&gt; scores = new list&lt;int&gt;();.    public string name { get; set; }.    public bool addscore(int score).    {.        try.        {.            scores.add(score);.        }.        catch { return false; }.        return true;.    }.    public list&lt;int&gt; getscores().    {.        return scores;.    }.    public int getscoreat(int index).    {.        return (int)scores[index];.    }.    public int getscoretotal().    {.        int sum = 0;.        foreach (int score in scores).        {.            sum += score;.        }.        return sum;.    }.    public int getscorecount().    {.        return scores.count;.    }.    public int getscoreaverage().    {.        return getscoretotal() / getscorecount();.    }.    public void destroyscores().    {.        scores = new list&lt;int&gt;();.    }.}...frmupdatestudent..public partial class frmupdatestudent : form.{.    private form1 parentform;  //main form.    private student studenttoedit; //student list.    private int index; //index..    public frmupdatestudent(form1 parentform, int index)  //update parent form (form1) with the new student and scores.    {.        this.parentform = parentform;.        this.index = index;.        studenttoedit = this.parentform.getstudent(index);..        initializecomponent();..        studentname.text = studenttoedit.name;.        updatescoredisplay();.    }..    public void addscoretostudent(int value) //add score to current student and display in the list.    {.        studenttoedit.addscore(value);.        updatescoredisplay();.    }..    public void updatescoreatindex(int id, int value)  //update a score selected from the list.    {.        studenttoedit.getscores()[id] = value;.        updatescoredisplay();.    }..    public int getscoreatindex(int id)  //get the score index.    {.        return studenttoedit.getscoreat(id);.    }..    private void updatescoredisplay()  //update the score display list.    {.        currentscores.datasource = null;.        currentscores.datasource = studenttoedit.getscores();.    }..    private void addscorebutton_click(object sender, eventargs e)  //open the add score form.    {.        frmaddscore addscoreform = new frmaddscore(this);.        addscoreform.show();.    }..    private void removescorebutton_click_1(object sender, eventargs e) //remove a score from current index and update display list.    {.        studenttoedit.getscores().removeat(currentscores.selectedindex);.        updatescoredisplay();.    }..    private void clearscoresbutton_click_1(object sender, eventargs e) //clear all scores.    {.        studenttoedit.destroyscores();.        updatescoredisplay();.    }..    private void closebutton_click_1(object sender, eventargs e).    {.        close();  //close form.    }..    private void updatebutton_click_1(object sender, eventargs e)  //open update form for current student.    {.        student form1 = new student();.        form1.name = studentname.text;.        parentform.updatestudent(index, form1);.        close();.    }..    private void updatescoresbutton_click(object sender, eventargs e).    {.        frmupdatescore updatescoreform = new frmupdatescore(this, currentscores.selectedindex);.        updatescoreform.show();.    }.}"
