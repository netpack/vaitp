"blank delegates and lambdas... not pointing to the expected method i'm reading the blog about y combinators and there's a mention of a snippet of code posted below:..http://blogs.msdn.com/b/wesdyer/archive/2007/02/02/anonymous-recursion-in-c.aspx ..func&lt;int, int&gt; fib = null;.fib = n =&gt; n &gt; 1 ? fib(n - 1) + fib(n - 2) : n;.func&lt;int, int&gt; fibcopy = fib;.console.writeline(fib(6));                        // displays 8.console.writeline(fibcopy(6));                    // displays 8.fib = n =&gt; n * 2;.console.writeline(fib(6));                        // displays 12.console.writeline(fibcopy(6));                    // displays 18....  huh!?  notice how the result of calling fib changes and that the.  result of calling fibcopy differs even from the result of calling fib!.  (see if you can figure out why)...the poster mentions that this result will occur however, he doesn't mention why and i can't to see to figure it out either. the way i see it is.....fib -&gt; points to fib sequence lambda.fibcopy -&gt; points to fib sequence lambda.lambda -&gt; n * 2.fib -&gt; points to new lambda.fibcopy -&gt; points to fib which is pointing to new lambda.... ...but obviously that's not what's going on."
