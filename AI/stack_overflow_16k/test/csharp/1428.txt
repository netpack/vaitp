"manage a list of constants in several projects, we have a list of constant values in the database.  these each have a table, name, and a guid value.  for example a ticket status table might have 3 values, ""open"", ""closed"" and ""hold"".  in our blank code a framework generates a blank file, as follows...public class ticketstatus { .     public static guid open =  new guid( ""7ae15a71-6514-4559-8ea6-06b9ddc7a59a"");.     public static guid closed =  new guid( ""41f81283-57f9-4bda-a03c-f632bd4d1628"");.     public static guid hold =  new guid( ""41bcc323-258f-4e58-95be-e995a78d2ca8"");.}; // end of ticketstatus...this allows us to write some clean(ish) code that sets ticket status as follows.ticket.strstatus = ticketstatus.open.tostring();..while this works:.- it produces pretty clean blank code that's easy to ready and maintain.- it's supported by intellisense..it's still clumsy, in that.- we have to continually convert to string for many operations.- the use of guids seems like overkill..- we cannot write a ""normal"" switch statement..// this won't compile.        switch( strstatus ) {.        case ticketstatus.open:.        case ticketstatus.closed:.        // do some stuff..        break;.        }...the code was originally implemented with a bunch of guids, to manage the case when a database would return the values in all upper case...the question: what's the best way to code these constant values, so that it supports intellisense and switch statements?"
