"is there anyway to get all files names without exceptions in blank? update: i be glad to drop the blank requirement, and just see any program that can list all the files running as admin or system, my question is has anyone seen such a thing?..there are numerous methods of enumerating files in a directory, but all suffer the same problems:..""the specified path, file name, or both are too long. the fully qualified file name must be less than 260 characters, and the directory name must be less than 248 characters.""..""access to the path 'c:usersall usersapplication data' is denied""..etc...even running under admin, single user machine, it seems impossible to list all the files without encountering exceptionserrors...is it really an impossible task just to get list of all the files under windows? has anyone ever been able to obtain the complete list of all files on their machine using blank or any other method?..this link from ms with the title ""enumerate directories and files"" , does not show how to enumerate directories and files, it only show a subset of what that will not throw : directorynotfoundexception, unauthorizedaccessexception, pathtoolongexception, ..update : here is sample code to run over c and attempt to enumerate all the files and errors. even when running this as admin there are folders that not only can be access, but i even can't change their ownership to admin! for example : ""c:windowscsc""..just have look at ""errors {0}.csv"" log file to see how many places are inaccessible to admin...using system;.using system.collections.generic;.using system.io;.using system.linq;...class program.{..static system.io.streamwriter logfile;.static system.io.streamwriter errorfile;.static void main(string[] args).{.    string directory = @""c:"";..    logfile = new system.io.streamwriter(string.format(@""e:files {0}.csv"", datetime.now.tostring(""yyyymmddhhmm"")));.    errorfile = new system.io.streamwriter(string.format(@""e:errors {0}.csv"", datetime.now.tostring(""yyyymmddhhmm"")));.    traversetree(directory, ongotfileinfo, ongotexception);..    logfile.close();.    errorfile.close(); .}..public static void ongotfileinfo(system.io.fileinfo fileinfo).{.    logfile.writeline(""{0},{1},"", fileinfo.fullname, fileinfo.length.tostring(""n0""));.}..public static void ongotexception(exception ex, string info).{.    errorfile.writeline(""{0},{1}"", ex.message, info);.}..public static void traversetree(string root, action&lt;system.io.fileinfo&gt; fileaction, action&lt;exception, string&gt; erroraction).{.    // data structure to hold names of subfolders to be .    // examined for files..    stack&lt;string&gt; dirs = new stack&lt;string&gt;(20);..    if (!system.io.directory.exists(root)).    {.        throw new argumentexception();.    }.    dirs.push(root);..    while (dirs.count &gt; 0).    {.        string currentdir = dirs.pop();.        string[] subdirs;.        try.        {.            subdirs = system.io.directory.getdirectories(currentdir);.        }.        // an unauthorizedaccessexception exception will be thrown if we do not have .        // discovery permission on a folder or file. it may or may not be acceptable  .        // to ignore the exception and continue enumerating the remaining files and  .        // folders. it is also possible (but unlikely) that a directorynotfound exception  .        // will be raised. this will happen if currentdir has been deleted by .        // another application or thread after our call to directory.exists. the  .        // choice of which exceptions to catch depends entirely on the specific task  .        // you are intending to perform and also on how much you know with certainty  .        // about the systems on which this code will run. ..        catch (system.exception e).        {.            erroraction(e, currentdir);.            continue;.        }..        string[] files = null;.        try.        {.            files = system.io.directory.getfiles(currentdir);.        }..        catch (system.exception e).        {.            erroraction(e, currentdir);.            continue;.        }..        // perform the required action on each file here. .        // modify this block to perform your required task. .        foreach (string file in files).        {.            try.            {.                // perform whatever action is required in your scenario..                system.io.fileinfo fi = new system.io.fileinfo(file);.                fileaction(fi);.            }.            catch (system.exception e).            {.                // if file was deleted by a separate application .                //  or thread since the call to traversetree() .                // then just continue..                erroraction(e ,file);.                continue;.            }.        }..        // push the subdirectories onto the stack for traversal. .        // this could also be done before handing the files. .        foreach (string str in subdirs).            dirs.push(str);.    }..    }.}"
