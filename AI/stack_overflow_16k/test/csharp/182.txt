"rationale beyond null for reference types i am new to the language coming from a c++ background and i have a hard time understanding the reason for allowing a reference type to be null...consider the following snippet ..class person {.  private string _name;.  public person(string name) {_name = name;}..  void print() {.    console.writeline(_name);.  }.}...now there is nothing to stop a caller from doing the following..person p = new person(null);.p.print();...this will crash, i can safeguard this (not really) by throwing an exception if null was passed to the constructor, but that just means i crash on the first line if it is not caught (which i cannot enforce afaik in blank) instead of the second line...the caller has to read the documentation (which means i cannot forget to document that the constructor might throw) to know all of this....what is (plausibly) the reason the language allows null reference types?.when is this advantageous and not just a ticking timebomb? the one case i can think of is lazy initialization, wanting to allocate an object conditionally..how do i deal with this in code i write?"
