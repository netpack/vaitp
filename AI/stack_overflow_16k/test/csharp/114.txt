"blank dynamic acceptable use so i have a choice to make regarding 'object' or 'dynamic'...would dynamic be an acceptable/viable to use?..i've kept the code short, so please ignore any runtime exceptions such as null propertyname and null newvalue or index not found for dictionary...what i do know:...oldvalue and newvalue will be the same type as each other..propertyname will always give the same type. (always comparing same types).additional checks and operations will be carried out depending on type..oldvalue and newvalue could be value or reference types....calling:..public int index.{.    get { return _index; }.    set.    {.        if (_index == value) return;..        int oldvalue = _index;..        _index = value;..        onchanged(oldvalue, value);.    }.}.private int _index;..public string name.{.    get { return _name; }.    set.    {.        if (_name == value) return;..        string oldvalue = _name;.        _name = value;..        onchanged(oldvalue, value);.    }.}.private string _name;...example 1:..private dictionary&lt;string, dynamic&gt; modifiedvalues = new dictionary&lt;string, dynamic&gt;();..protected internal virtual void onchanged(dynamic oldvalue, dynamic newvalue, string propertyname).{.    if (modifiedvalues[propertyname] == newvalue).        modifiedvalues.remove(propertyname);.    else.        modifiedvalues[propertyname] = newvalue;..    //....}...example 2:..private dictionary&lt;string, object&gt; modifiedvalues = new dictionary&lt;string, object&gt;();..protected internal virtual void onchanged(object oldvalue, object newvalue, [callermembername] string propertyname = null).{.    if (newvalue.gettype().isvaluetype).    {.        if (newvalue.equals(modifiedvalues[propertyname])).            modifiedvalues.remove(propertyname);.        else.            modifiedvalues[propertyname] = newvalue;..    }.    else.    {.        if (newvalue == modifiedvalues[propertyname]).            modifiedvalues.remove(propertyname);.        else.            modifiedvalues[propertyname] = newvalue;.    }..    //....}"
