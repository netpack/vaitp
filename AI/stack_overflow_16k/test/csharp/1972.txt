"blank streamwriter disposal - return underlying memorystream (open) except for the comments here ( memorystream disables reading when returned ), i haven't found a good answer to my concerns about leaving a streamwriter open. i would like to return a memorystream (open) that is written by a streamwriter in a safe and clean way. ..let me give a rather simple example..i would like to use the method getmemorystream() like this:..        string[] content = { ""large"", ""string"", ""array"", ""test"" };.        memorystream ms = getmemorystream(content);.        //byte[] array = ms.toarray(); //still works after stream is closed but i want an open and working stream..        using (filestream fs = new filestream(@""c:test.txt"", filemode.create, fileaccess.readwrite)).        {.            //fs.write(array, 0, array.length); .            ms.writeto(fs);.        }.        ms.dispose();...now here are two ways i found to do so:...copy the memorystream ..public static memorystream getmemorystream(string[] content).{.    memorystream result = new memorystream();.    using (memorystream ms = new memorystream()).    using (streamwriter sw = new streamwriter(ms)).    {.        foreach (string s in content).            sw.writeline(s);.        sw.flush();.        ms.copyto(result);.    }.    return result;.}....this aproach looks like a workaround to me. it seems (correct me if i'm wrong) to need twice as much memory and more time. then i read about the next aproach:...leave the streamwriter open (>=.net 4.5) ..public static memorystream getmemorystream(string[] content).{.     memorystream ms = new memorystream();.     using (streamwriter sw = new streamwriter(ms, encoding.default, 1024, true)).     {.          foreach (string s in content).               sw.writeline(s);.     }.     return ms;.}....but i have concerns with that aproach: ...  what happens to the streamwriter when i leave the scope?.  is the data still referenced/held by that streamwriter object?.  will it be garbage-collected? maybe even before i get to use the memorystream in.  the calling scope?.  is it still ""connected"" to the memorystream, and maybe disposed when i dispose ms?  ...to sum it up: is the second aproach going to cause any trouble?..thanks in advance"
