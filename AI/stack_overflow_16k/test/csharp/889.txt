"how could i genericize a range expansion function? i have the following class:..public class state {.  public datetime created { get; set; }.  public double a { get; set; }.  public double b { get; set; }.}...then i have two states:..state start = new state { created = datetime.utcnow, a = 10.2, b = 20.5 }..state end = new state { created = datetime.utcnow.adddays(40), a = 1, b = 80 }...i would like to create a list between start and end where the values of a and b evolve in a linear way between their start and end values...i was able to create a list as follows:..ilist&lt;datetime&gt; dates = new range&lt;datetime&gt;(start.created, end.created,).expand(dateinterval.day, 1)...range and expand are a few helpers i created .....what is the best way to create the values evolution?..my idea would to do something like:..ilist&lt;state&gt; states = new range&lt;state&gt;( // here ""tell"" how each property would evolve ...)...update..range class..public class range&lt;t&gt; where t : icomparable&lt;t&gt; {..    private t _minimum;.    private t _maximum;..    public t minimum { get { return _minimum; } set { value = _minimum; } }.    public t maximum { get { return _maximum; } set { value = _maximum; } }..    public range(t minimum, t maximum) {.      _minimum = minimum;.      _maximum = maximum;.    } // range..    public boolean contains(t value) {.      return (minimum.compareto(value) &lt;= 0) &amp;&amp; (value.compareto(maximum) &lt;= 0);.    } // contains..    public boolean containsrange(range&lt;t&gt; range) {.      return this.isvalid() &amp;&amp; range.isvalid() &amp;&amp; this.contains(range.minimum) &amp;&amp; this.contains(range.maximum);.    } // containsrange..    public boolean isinsiderange(range&lt;t&gt; range) {.      return this.isvalid() &amp;&amp; range.isvalid() &amp;&amp; range.contains(this.minimum) &amp;&amp; range.contains(this.maximum);.    } // isinsiderange..    public boolean isvalid() {.      return minimum.compareto(maximum) &lt;= 0;.    } // isvalid..    public override string tostring() {.      return string.format(""[{0} - {1}]"", minimum, maximum);.    } // tostring..} // range...a few range extensions:..public static ienumerable&lt;int32&gt; expand(this range&lt;int32&gt; range, int32 step = 1) {.  int32 current = range.minimum;.  while (current &lt;= range.maximum) {.    yield return current;.    current += step;.  }.} // expand..public static ienumerable&lt;datetime&gt; expand(this range&lt;datetime&gt; range, timespan span) {.  datetime current = range.minimum;.  while (current &lt;= range.maximum) {.    yield return current;.    current = current.add(span);.  }.} // expand"
