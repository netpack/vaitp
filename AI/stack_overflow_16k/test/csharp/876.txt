"constructor exceptions in dispposable object consider folowing classes:..class c1 : idisposable {...}..class c2 : idisposable {...}..sealed class c3 : idisposable.{.   public c3().   {.      c1 = new c1();.      throw new exception(); //oops!.   }.   ~c3().   {.      //what can we do???.   }.   public void dispose().   {.      if ( c1 != null ) c1.dispose();.      if ( c2 != null ) c2.dispose();.   }..   private c1 c1;.   private c2 c2;.   //assume that this class does not contains native resources.}...now, assume we correctly use disposable object:..using (var c3 = new c3()).{.}...what about this code snippet? ..in this case we can't call dispose method, because our object never exists...we know, that in this case finalizer would be called, but there we can dispose only criticalfinilizedobjects and we can't dispose c1 or c2 objects...my solution is pretty simple:..sealed class c3 : idisposable.{.   public c3().   {.      try {.      c1 = new c1();.      throw new exception(); //oops!.      c2 = new c2();.      }.      catch(exception).      {.        disposeimpl();.        throw;.      }.   }.   ~c3().   {.      //not deterministically dispose detected!.      //write to log! .      //invalid class usage. or not??.   }.   public void dispose().   {.      disposeimpl();.   }.   private void disposeimpl().   {.     if ( c1 != null ) c1.dispose();.     if ( c2 != null ) c2.dispose();.     gc.suppressfinalize(this); //all resources are released.   }..   private c1 c1;.   private c2 c2;.}...this solution may vary in some details but i think you can understand key principle: if constructor throws an exception we forcedly release acquired resources and suppress finalization...have any one other idias, suggestions or better solutions?..p.s. herb sutter in his blogpost (http://herbsutter.wordpress.com/2008/07/25/constructor-exceptions-in-c-c-and-java/) opened the question but he does not proposed a solution."
