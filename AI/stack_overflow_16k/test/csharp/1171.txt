"evaluate in property getter or when creating an instance? ok, an easy question...first of all, i have to say that my concern is not performance. i'm totally aware that whatever performance costs one option or the other may entail are probably meaningless and not even worth considering in normal scenarios. it has more to do with design standards and curiosity as to how the majority of coders would do it...ok, so the question is rather simple:..suppose i have a complexnumber struct which i could implement the following way:..public struct complex : iequatable&lt;complex&gt;, iformattable.{.    readonly double realpart, imaginarypart, magnitude, argument;.    readonly static complex j = new complex(0, 1);..    public complex(double realpart, double imaginarypart).    {.        this.realpart = realpart;.        this.imaginarypart = imaginarypart;.        this.magnitude = math.sqrt(math.pow(realpart, 2) + math.pow(imaginarypart, 2));.        this.argument = math.atan2(imaginarypart, realpart);.    }..    public double realpart { get { return this.realpart; } }.    public double imaginarypart { get { return this.imaginarypart; } }.    public double magnitude { get { return this.magnitude; } }.    public double argument { get { return this.argument; } }..    public static complex j { get { return complex.j; } }.    .... }...the magnitude and argument properties have backing fields that are evaluated at construction time. another option would be to simply evaluate the corresponding value in either getter...what is the most recommended way to do this? is there any coding standard that recommends any option for the sake of having a standard? and if there isn't one, what is normally the preferred choice? or is it only performance dependant which in my case is irrelevant?"
