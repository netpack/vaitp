"passing 2 parameters to a single class through map[x][y] goal:..i’m currently working on an addition to an already existing library (a maze generator). what i’m trying to do is define a new way of storing the maze (partially in memory and partially on the hard disk)...-skip to the problem paragraph if you just want to see the question. i added some extra information since you might suggest a completely other approach...current situation:..the current way the maze generator stores mazes (in memory) is with a map. the map contains a bunch of innermaparrays which each contain a line of pixels in the maze. points can be read/written in the maze like this:..… //code that creates maze map.map[x][y] = true;...in the map class there’s a method to return the correct array (x)..public override innermaparray this[int x].{.    [methodimpl(methodimploptions.aggressiveinlining)].    get.    {.        return innerdata[x];.    }.}...then it will call [y] on the innerdata which also contains a similar method to ultimately return the right pixel...problem:..going back to what i want to do is create a new map type that saves parts of the maze in memory and parts of the maze on the disk. i want to load areas of the maze in sets of 100x100 pixels for example, not by line. (in the image below the red part should be loaded when pixel x=50,y=50 is changed for example)....the current implementation of the map/innermaparray structure does not allow for this. what i want is a way to actually get the x and y that are passed in one method..what i thought that could possibly work is the following (not working code):..public override innermaparray this[int x][int y].{.    get.    {.        //load a certain 100x100 part of the maze in memory and set it as current.        //so while generating the maze pixels near the currently generated/read pixel.        //can be read really fast while others far away won't use any memory.    }.}...sadly the blank compiler doesn’t allow this. does anyone have a clue that could help me solve this issue in a ‘nice’ way."
