"save large list of ints in memory for fast access first, a little background:  i enjoy working on project euler problems (https://projecteuler.net/archives) but many of them require a ton of heavy computation so i try to save known constants in memory so they don't have to be recalculated every time.  these include things like n!, npr, ncr, and lists of primes.  for the purpose of this question let's just stick with primes because any solution with those can be easily ported to the others...the question:  let's say i want to save the first 1,000,000 primes in memory for repeated access while doing heavy computation.  the 1,000,000th prime is 15,485,863 so ints will do just fine here.  i need to save these values in a way such that access is o(1) because these will be access a lot...what i've tried so far:.clearly i can't put all 1,000,000 in one cs file because visual studio throws a fit.  i've been trying to break it into multiple files using a partial class and 2-d list&lt;list&lt;int&gt;&gt; ..public partial class primes.{.    public readonly list&lt;int&gt; _primes_1 = new list&lt;int&gt;.    {.        2, 3, ... 999983.    }.}...so _primes_1 has the primes less than 1,000,000, _primes_2 has the primes between 1,000,000 to 2,000,000, etc, 15 files worth.  then i put them together..public partial class primes.{.    public list&lt;list&lt;int&gt;&gt; _primes = new list&lt;list&lt;int&gt;&gt;().    {.        _primes_1, _primes_2, _primes_3, _primes_4, _primes_5,.        _primes_6, _primes_7, _primes_8, _primes_9, _primes_10,.        _primes_11, _primes_12, _primes_13, _primes_14, _primes_15.    };.} ...this methodology does work as it is easy to enumerate through the list and isprime(n) checks are fairly simple as well (binary search).  the big downfall with this methodology is that vs starts to freak out because each file has ~75,000 ints in it (~8000 lines depending on spacing). in fact, much of my editing of these files has to be done in npp just to keep vs from hanging/crashing. ..other things i've considered:.i originally read the numbers in off a text file and could do that in the program but clearly i would want to do that at startup and then just have the values available.  i also considered dumping them into sql but again, eventually they need to be in memory.  for the in memory storage i considered memcache but i don't know enough about it to know how efficient it is in look ups...in the end, this comes down to two questions:...how do the numbers get in to memory to begin with?.what mechanism is used to store them? ...spending a little more time in spin up is fine (within reason) as long as the lookup mechanism is fast fast fast.  ..quick note:  yes i know that if i only do 15 pages as shown then i won't have all 1,000,000 because 15,485,863 is on page 16.  that's fine, for our purposes here this is good enough."
