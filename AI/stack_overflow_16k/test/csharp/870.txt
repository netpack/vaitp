"help creating an interface i'm starting to see the value of interfaces vs. lets say an abstract class...currently i'm working on a paypal wrapper project.  we'll also be probably doing a google payments, billmelater, and amazon wrapper.  i've been asked to identify some commonalities (methods, properties, whatever) that we could use across the board, in most any web service soap wsdl wrapper project for any web services we do...so as i was coding out my paypal wrappers, i created a new class to hold errors received back from any paypal response:..public class apierror.{..    #region constructors..    /// &lt;summary&gt;.    /// disallow default instantiation..    /// &lt;/summary&gt;.    private apierror().    {.    }..    internal apierror(errortype error).    {.        if(error.errorcode != null).        {.            this._errorcode = error.errorcode;.        }.    }..    #endregion..    #region member variables..    private string _errorcode = string.empty;.    private string _erormessage = string.empty;..    #endregion..    #region properties..    public string errorcode.    {.        get { return _errorcode; }.        set { _errorcode = value; }.    }..    public string errormessage.    {.        get { return _errormessage; }.        set { _errormessage = value; }.    }..    #endregion..}...anyway, i said hey, these errormessage and errorcode properties are most likely going to be in every third party api.  so why not create an interface in a new project called [mycompany].webservices.common and in that interface add those 2 properties.  then any class wrapper that i create that has functionality to make api proxy calls can implement this interface and then i know any of those kinds of wrapper classes in any of our web service projects will be guaranteed to have these kind of properties in them that will be impolemented and filled with any errors that come back from an api response.  ..and if they do, then that's great because i can then start to create some helper methods that we can use across the board if i can somehow take in a generic response object and fill the array of errors and set the property...anyway, my problem is, i'm new to interfaces a litte.  so the error array property from above for example is of a custom type...well if i create interface in a seperate physical project, i can't use that custom type because it doesn't exist..it only exists so far in my paypal wrapper project...so then when stubbing this interface out, how would i handle this?..namespace [mycompany].webservices.common.{.    interface irequest.    {..        public apierror type { get; set; } //whoops, that's a custom type that this project does not know about (apierror).    }..}"
