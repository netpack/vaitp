"object initializer and dispose when property can throw exception i've got the following setup:..public class someclass.{.  private directoryentry _root;.  private directorysearcher _searcher;..  public someclass().  {.    _root = new directoryentry(""ldap://bla"");.    _searcher = new directorysearcher(_root).      {.        pagesize = int.maxvalue,.        sizelimit = int.maxvalue.      }.  }.}...the reason i use int.maxvalue is because in this case i know i'll exceed the defaults, but the number will never be ridiculously large, so i'm fine about that point...but if i turn on code analysis and microsoft basic correctness rules it complains:...  warning   2 ca2000 : microsoft.reliability : in method  'someclass.someclass()', object '&lt;>g_initlocal0' is not disposed along all exception paths. call system.idisposable.dispose on object '&lt;>g_initlocal0' before all references to it are out of scope....it's problem is that pagesize and sizelimit can throw exceptions, and if that happens the g__initlocal0 object doesn't get disposed (even if _searcher does get disposed). the exception they can throw is if you assign them to a negative number, which can't happen here but it still complains...next i set the properties outside an object intitializer with regular assignment statements, but then resharper complains telling me that i should be using initializer. i could suppress resharper, but i like to figure a way of getting things to work without adding suppressing...so i figured i had to catch the error and i don't like catch errors in my constructors if possible, so i created a property called searcher like this:..private directorysearcher _searcher;.public directorysearcher searcher.{.  get.  {.    if (_searcher != null) return _searcher;.    var searcher = new directorysearcher();.    try.    {.      searcher.pagesize = int.maxvalue;.      searcher.sizelimit = int.maxvalue;.      _searcher = searcher;.    }.    catch.    {.      searcher.pagesize = 1000;.      searcher.sizelimit = 1000;.    }.    finally.    {.      searcher.dispose();.    }.    return _searcher;.  }.}...now code analysis and everything is happy, but i'm not happy with the solution at all...any hints?"
