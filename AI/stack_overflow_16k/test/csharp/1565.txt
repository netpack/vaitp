"method parameter dilemma i always come to a halt when creating classes.  i'm fairly intermediate to architecture so bear with me.  here's my dilemma.  i come to a point eventually in a class where i have to ask myself, ""does this method need parameters when i can just get what i need from the class's property or private backing field?""...now for public methods, obviously you should most likely have parameters because someone's going to be consuming your class and using these methods whether they're in an instance class or static class.  that debate is not about public methods because that is obvious to me.  that if you have a public method(s) inside your class, even though lets say you can get one of the values you need from a property or private field in that class instead of requiring a param to that method and using the param, you should still require params and use the params or at least don't count them out when you can specify some params.  at least this is how i view public methods because who knows how someone else might use that method and they need to know what needs to be passed and they need to pass the actual data to the method as they are outside your class...the issue comes when for example i'm creating and using private methods or something of that sort.  lets say i create a custom control (.cs).  its job is to run a bunch of methods that i've broken out the logic for this control and create some strings of html to output to the browser.  well, i create a property that is public so that whoever is using this control can feed it a certain object.  and that certain object is what half of the methods in my class use to help generate that html.  because it's a property, any of the methods in my custom class can use it.  so it completely bypasses any need to create parameters in some of those methods because i can just get it form the property.   but then i get to a point where i'm creating an awful lot of parameterless methods because i'm getting objects from the backing fields or combination of backing fields and properties.  or i might be just getting them from a few propewhen i am able to get what i need other ways inside this class?  but then something says to you no, that's bad man, you do need parameters once in a while dude...at least a combo of parameters and using some backing fields or properties in your method, etc. but don't always discount parameters even if those params might be some internals passed to it (fields or properties).  but then again if i'm gonna be passing internals as params where's the fine line between just accessing and using those fields or properties not through the method as params but directly inside the method itself...but that bothers me because then i question why i need method parameters in cases where i can get the value elsewhere. ..can someone explain the fine line here and help me come to a conclusion on the line between using a lot of backing fields in your methods or properties rather than some params you specify in the methods..even though some of those params may still be passed a value from a backing field or property when another method calls it?..i hope this makes any inkling of sense but i can't be the only one who comes across this dilemma. maybe i'm the only one who thinks about this sh** and i over think i don't know.  but the main problem i have personally with oop is that there are so many damn ways to get what you need (constructor, property, backing field, method)."
