"blank - internal static readonly is null on access i have the following code:..internal class fakeinvitationsrepository : invitationsrepository.{.    internal readonly static dictionary&lt;guid, invitationdbentity&gt; data = new dictionary&lt;guid, invitationdbentity&gt;().    {.        { ......here's a screen-shot, for what its worth:....it's just some in-memory fake data, 3 items in all. the class lives inside an asp.net webapi project, not in a test dll but in the webapi dll for the time being...an api call comes in and hits a breakpoint in the controller action where it tries to consume this fake data directly, no ioc yet or anything clever...but the field data is null. it's causing a null ref exception at runtime.....the blank language spec says:...  if a static constructor (section 10.11) exists in the class, execution of the static field initializers occurs immediately prior to executing that static constructor. otherwise, the static field initializers are executed at an implementation-dependent time prior to the first use of a static field of that class....what's happening here such that the field is not initialized prior to first-use? ..note: a colleague has quickly sanity checked and is also bemused. data is only ever set, never nulled by my code (its readonly afterall)...edit..here's the callstack of just my code:..system.diagnostics.stacktrace t = new system.diagnostics.stacktrace();.{   at company.product.webapi.controllers.renamedcontroller.&lt;getinvitations&gt;d__14.movenext().   at company.product.webapi.controllers.renamedcontroller.getinvitations(guid id).   at lambda_method(closure , object , object[] ).   at company.webapi.product.areas.routedebugger.inspectactioninvoker.invokeactionasync(httpactioncontext actioncontext, cancellationtoken cancellationtoken).   at company.webapi.product.areas.routedebugger.inspecthandler.&lt;&gt;n__fabricatedmethod12(httprequestmessage , cancellationtoken ).   at company.webapi.product.areas.routedebugger.inspecthandler.&lt;sendasync&gt;d__e.movenext().   at company.webapi.product.areas.routedebugger.inspecthandler.sendasync(httprequestmessage request, cancellationtoken cancellationtoken).}.    framecount: 84.    frames: {system.diagnostics.stackframe[87]}.    m_imethodstoskip: 3.    m_inumofframes: 84.....answer..i can't answer because the question was put on hold. debatable...thanks to mstodd. the answer is silly and straight-forward, but somewhat surprising; i don't recall having ever seen this in 11 years of .net programming...the data field was not yet initialized...placing a breakpoint in the initializer, the entire block goes red, showed that it was called on the next step...the nullreferenceexception was a red-herring and due to this.invitations being null...of course, i was expecting the field to be initialized by the time that line is stopped at, i just didn't expect it to happen so late, and so assumed the null was causing my runtime exception...there you go."
