"filesystemwatcher not recognizing change in directory so i am trying to create a console application that will watch a directory and when a folder is dropped into the directory it will optimize the files inside of the folder. the optimization part is working. i am currently concerned with the fact that once i run the program with the filesystemwatcher it never recognizes the change. is the class only focusing on the root directory and not going any deeper?..i also saw on microsoft's website that the way to watch for a file that has been copy pasted or moved into the directory is by using filesystemwatcher.renamed instead of .changed which is what i was having an issue with before...using system;.using system.componentmodel;.using system.diagnostics;.using system.io;.using system.linq;.using system.net.mime;.using system.runtime.compilerservices;.using system.threading;.using pdftron;.using pdftron.common;.using pdftron.filters;.using pdftron.sdf;.using pdftron.pdf;.using optimizertestcs;..namespace pdfnetsamples.{..    class class1.    {...        private static pdftron.pdfnetloader pdfnetloader = pdftron.pdfnetloader.instance();..        public static void optimize().        {.            thread.sleep(1000);.                pdfnet.initialize();..                string input_path = @""c:usersuserdesktoptestinp"";.                string output_path = @""c:usersuserdesktopoutput"";.                string[] files = directory.getfiles(input_path, ""*.pdf"", searchoption.alldirectories);..                foreach (string file in files).                {.                    string filename = path.getfilename(file);.                    console.writeline($""optimizing {filename}"");.                    string sub = file.substring(35, 7);.                    createfolder(output_path + sub);..                    try.                    {.                        using (pdfdoc doc = new pdfdoc(file)).                        {.                            doc.initsecurityhandler();.                            optimizer.optimize(doc);.                            doc.save(output_path + sub + filename, sdfdoc.saveoptions.e_linearized);.                            console.writeline(""done..n"");.                        }.                    }.                    catch (pdfnetexception e).                    {.                        console.writeline(e.message);.                    }.                }.        }..        private static void run().        {.            string[] args = environment.getcommandlineargs();..            if (args.length != 2).            {.                thread.sleep(3000);.                console.writeline(""usage: watcher.exe (directory)"");.                return;.            }..            using (filesystemwatcher watcher = new filesystemwatcher()).            {.                watcher.path = @""c:usersuserdesktoptestinp"";..                watcher.notifyfilter = notifyfilters.lastaccess.                                       | notifyfilters.lastwrite.                                       | notifyfilters.filename.                                       | notifyfilters.directoryname;..                watcher.filter = ""*.pdf"";..                watcher.renamed += onchanged;..                watcher.enableraisingevents = true;..                console.writeline(""press 'q' to quit the sample."");.                while (console.read() != 'q') ;.            }.        }..        private static void onchanged(object source, filesystemeventargs e) =&gt;.            optimize();..    static void createfolder(string path).        {.            directory.createdirectory(path);.        }..        public static void main(string[] args).        {.            while (true).            {.                run();.            }.        }..    }.}"
