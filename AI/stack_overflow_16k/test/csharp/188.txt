"why must i define a commutative operator twice? i wonder if i must define a commutative operator (like *) twice!..public static myclass operator *(int i, myclass m).{.    return new myclass(i * m.value);.}..public static myclass operator *(myclass m, int i).{.    return new myclass(m.value * i);.}...what's the logic behind this?....additional descriptions: dear @marc's answer about vector and matrix multiplication was good  if and only if we assume operand types are different !!! it's evident that we can define * operator only once to perform vector or matrix multiplication. so i think this is not the answer....  @marc: order is sometimes important in operators....yes, but this is not equivalent with order is sometimes important in operands! the above sentence may be used in case of using + operator before (or after) * operator that it will cause to different results. for example:..0 + 2 * 2 != 0 * 2 + 2..â™¦..assume that we've defined * operator as:..public static myclass operator *(myclass m1, myclass m2).{.    return new myclass(m1.value * m2.value /* or some other kind of multiplication */);.}...we can not define it again...public static myclass operator *(myclass m2, myclass m1) { ... }...if so, compiler would tell us that type myclass already defines a member called 'op_multiply' with the same parameter types...now, we can use this operator in two ways: m1 * m2 or m2 * m1 and they may have different results which depend on multiplication procedure."
