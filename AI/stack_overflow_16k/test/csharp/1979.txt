"sjf algorithm sorting blank thats my code . i want to use a faster sorting algorithm maybe quick sort or comb sort. i sorted the list twice first according to arrival then to brust time..i need help implementing  a faster sorting algorithm my main mwthod..static void main(string[] args).        {.            //----------------------------------------reading i/o file--------------------------------------.            string s = environment.currentdirectory.tostring();   // returns the directory of the exe file.            if (file.exists(s + @""input.txt""))  //checking if the input files exists.                console.writeline(""file exists"");.            else.            {.                console.writeline(""file not found"");.                console.writeline(""-----------------------------------------------------"");.                return;.            }.            console.writeline(""-----------------------------------------------------"");.            //----------------------------------------data into list--------------------------------------.            string filetext = file.readalltext(s + @""input.txt""); //reading all the text in the input file.            string[] lines = filetext.split('n'); //splitting the lines.            list&lt;process&gt; processes = new list&lt;process&gt;();.            for (int i = 1; i &lt; lines.length; i++).            {.                string[] tabs = lines[i].split('t');//splitting the tabs to get objects' variables.                process x = new process(tabs[0], int.parse(tabs[1]), int.parse(tabs[2]), int.parse(tabs[3]));//creating object.                processes.add(x);//adding object to the list.            }.            //   ----------------------------------------sorting the list--------------------------------------.            process temp;.            for (int k = 0; k &lt; processes.count; k++).            {.                for (int i = k + 1; i &lt; processes.count; i++).                {.                    if (processes[k].arrivaltime &gt; processes[i].arrivaltime).                    {.                        temp = processes[i];.                        processes[i] = processes[k];.                        processes[k] = temp;.                    }.                }.            }.            int tempclock = 0;.            for (int i = 0; i &lt; processes.count; i++).            {.                if (processes[i].arrivaltime &gt; tempclock).                    tempclock = processes[i].arrivaltime;.                for (int k = i + 1; k &lt; processes.count; k++).                {.                    if (processes[k].arrivaltime &lt;= tempclock &amp;&amp; processes[k].brust &lt; processes[i].brust).                    {.                        temp = processes[i];.                        processes[i] = processes[k];.                        processes[k] = temp;.                    }.                }.                tempclock += processes[i].brust;.            }.            console.writeline(""processes after sorting"");.            console.writeline(""-----------------------------------------------------"");.            console.writeline(""nametarrivaltbrusttpriority"");.            for (int i = 0; i &lt; processes.count; i++).            {.                console.write(processes[i].name + ""t"" + processes[i].arrivaltime + ""t"" + processes[i].brust + ""t"" + processes[i].priority);.                console.writeline();.            }.            console.writeline(""-----------------------------------------------------"");.            //----------------------------------------gantt chart--------------------------------------.            console.writeline(""gantt chart"");.            console.writeline(""-----------------------------------------------------"");.            int counter = 0;.            for (int i = 0; i &lt; processes.count; i++).            {.                console.write(processes[i].name + ""t"");.               if (processes[i].arrivaltime &lt; counter).                    printspaces(counter);.               else.               {.                   printspaces(processes[i].arrivaltime);.                   counter = processes[i].arrivaltime;.               }.                printhashes(processes[i].brust);.                counter += processes[i].brust;.                console.writeline();.            }.            console.writeline(""-----------------------------------------------------"");.            //-----------------------------------completing data and final table-------------------------.            int clock = 0, totalwait = 0, totalturnaround = 0;.            for (int i = 0; i &lt; processes.count; i++).            {.                if (processes[i].arrivaltime &gt; clock).                {.                    processes[i].start = processes[i].arrivaltime;.                    clock += processes[i].start - processes[i].arrivaltime;.                    clock += processes[i].brust;..                }.                else.                {.                    if (i &gt; 0).                        processes[i].start = processes[i - 1].end;.                    clock += processes[i].brust;.                }.                if (processes[i].start &gt; processes[i].arrivaltime).                    processes[i].wait = processes[i].start - processes[i].arrivaltime;.                else processes[i].wait = 0;.                processes[i].end = processes[i].start + processes[i].brust;.                processes[i].turnaround = processes[i].wait + processes[i].brust;.                totalwait += processes[i].wait;.                totalturnaround += processes[i].turnaround;.            }.            console.writeline(""nametarrivaltbrusttstarttendtwaittturnaround"");.            for (int i = 0; i &lt; processes.count; i++).            {.                console.write(processes[i].name + ""t"" + processes[i].arrivaltime + ""t"" + processes[i].brust + ""t"" + processes[i].start + ""t"" + processes[i].end + ""t"" + processes[i].wait + ""t"" + processes[i].turnaround);.                console.writeline();.            }.            double att = 0, awt = 0;.            awt = (double)totalwait / (double)processes.count;.            att = (double)totalturnaround / (double)processes.count;.            console.writeline(""a.w.t= {0}"", awt + ""t a.t.t= "" + att);.            console.readkey();.        }....class process..class process.    {.        public process(string name, int arrivaltime, int brust, int priority).        {.            this.name = name;.            this.arrivaltime = arrivaltime;.            this.brust = brust;.            this.priority = priority;.        }.        public process().        {..        }.        public string name;.        public int arrivaltime;.        public int brust;.        public int priority;.        public int wait;.        public int end;.        public int start;.        public int turnaround;.    }"
