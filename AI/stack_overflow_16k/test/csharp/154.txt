"finding combinations from a list of objects and sorting them according to property value i have a list of type cardslot, each of these cardslot objects will contain different cards , say , card1, card2, card3 (the number may differ). ..each cardslot object has maximum quantity of card1, card2 and card3 pre-set. now, user inputs the amount of cards required and should get a combination of cardslot that fulfill the criteria...for eg:.. list&lt;cardslot&gt; listcardslot = new list&lt;cardslot&gt;();. cardslot cardslot1 = new cardslot();. cardslot1.name = ""cardslot1"";. cardslot1.price = 900;. cardslot1.card1 = 2;. cardslot1.card2 = 3;. cardslot1.card3 = 4;. listcardslot.add(cardslot1);.. cardslot cardslot2 = new cardslot();. cardslot2.name = ""cardslot2"";. cardslot2.price = 850;. cardslot2.card1 = 3;. cardslot2.card2 = 2;. cardslot2.card3 = 4;. listcardslot.add(cardslot2);.. cardslot cardslot3 = new cardslot();. cardslot3.name = ""cardslot3"";. cardslot3.price = 950;. cardslot3.card1 = 4;. cardslot3.card2 = 3;. cardslot3.card3 = 2;. listcardslot.add(cardslot3);...now, if user inputs card1 = 4, card2 = 5 and card3 = 4, the end result should be the combination of cardslot objects with the least possible price...can someone please give me a nudge in the right direction?kindly tell me if something is unclear and i'll try and improve it...edit..i have tried finding all the possible combinations that can be in the list using following function:..public static list&lt;list&lt;t&gt;&gt; itemcombinations&lt;t&gt;(list&lt;t&gt; inputlist, int minimumitems = 1).    {.        int nonemptycombinations = (int)math.pow(2, inputlist.count) - 1;.        list&lt;list&lt;t&gt;&gt; listofcombinations = new list&lt;list&lt;t&gt;&gt;(nonemptycombinations + 1);..        if (minimumitems == 0)  .            listofcombinations.add(new list&lt;t&gt;());..        for (int i = 1; i &lt;= nonemptycombinations; i++).        {.            list&lt;t&gt; thiscombination = new list&lt;t&gt;(inputlist.count);.            for (int j = 0; j &lt; inputlist.count; j++).            {.                if ((i &gt;&gt; j) % 2 != 0).                    thiscombination.add(inputlist[j]);.            }..            if (thiscombination.count &gt;= minimumitems).                listofcombinations.add(thiscombination);.        }..        return listofcombinations;.    }...this successfully returns all the possible combinations. however, it still does not take care of the situations where repeated occurance of the same card slot may be the correct choice. for e.g in the above mentioned scenario the correct choice would be 1 x cardslot1 + 1 x cardslot2..edit 2..i reached an intermediate solution and have posted it as an answer, it still does not give me required answer in case of mix and match combinations. could anyone take a look and suggest something towards that end ?"
