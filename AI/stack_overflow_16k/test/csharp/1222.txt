"trouble with in-game currency conversion i am writing a small mockup of an in-game currency system which is more or less like the dungeons and dragons currency system, or the everquestii currency system. basically i have four different types of currency: copper, silver, gold, and platinum. the system is done with an exchange rate of 100, so:..1 platinum = 100 gold..1 gold = 100 silver..1 silver = 100 copper....the thing is, though, i can't quite figure out how to convert the money between each other, and by that i mean, i can't wrap my head around how to convert 12 platinum to copper coins, which given the hefty conversion rate will result in a pretty astronomical number...here is the class that i am using to hold the money:..public class currencydata.    {.        public enum currencytype.        {.            copper ,.            silver ,.            gold ,.            platinum.        }.        public uint copper { get; set; }.        public uint silver { get; set; }.        public uint gold { get; set; }.        public uint platinum { get; set; }..        public currencydata( uint platinum , uint gold , uint silver , uint copper ).        {.            copper = copper;.            silver = silver;.            gold = gold;.            platinum = platinum;.        }.    }...one of the issues that i am facing is reverse-exchange. by that i mean suppose i wanted to ""try"" to convert 123 copper to silver. well, that would result in 1 silver coin, but then we have some remainder which cannot be converted because it requires 100 copper to make 1 silver coin. i would have an extra 23 copper coins remaining after the conversion which would need to get added back to the copper coin pile. how do i do that? and in general, what is the best way to convert the money in both directions?..edit:..using the excellent examples below, this is the class that i inevitably ended up with...using system;.using system.collections.generic;.using system.drawing;..namespace novaengine4framework.framework.game.currency.{.    /// &lt;summary&gt;.    /// .    /// coinbag.cs.    /// v1.1.0.    /// gordon kyle wallace, ""krythic""..    /// lordkrythic@gmail.com.    /// .    /// this class was created with the goal of replicating a ""dungeons and.    /// dragons"" or original ""everquest"" style currency system. in which there.    /// are 4 different levels of currency: copper, silver, gold, and platinum..    /// each coin has a different monetary worth, such that platinum is the most.    /// expensive coin, and copper is the least expensive. the bag holds a desired.    /// amount of money, and can be dynamically exchanged with the other denominations.    /// at user whim. each denomination is worth 100 of the lesser, so 1 platinum is.    /// equal to 100 gold and so on..    /// .    /// &lt;/summary&gt;.    public class coinbag.    {.        public enum coins.        {.            /// &lt;summary&gt;.            /// copper is the lowest denominator of currency..            /// it requires 100 copper to make 1 silver..            /// &lt;/summary&gt;.            copper = 1 ,.            /// &lt;summary&gt;.            /// silver is the second most common form of currency..            /// it requires 100 silver to make 1 gold..            /// &lt;/summary&gt;.            silver = 2 ,.            /// &lt;summary&gt;.            /// gold is the most common form of currency. it takes.            /// part in most expensive transactions..            /// it requires 100 gold to make 1 platinum..            /// &lt;/summary&gt;.            gold = 3 ,.            /// &lt;summary&gt;.            /// platinum is a coin which most people never see. a single.            /// platinum coin can purchase almost anything..            /// 1 platinum coin = 100 gold..            /// 1 platinum coin = 10,000 silver..            /// 1 platinum coin = 1,000,000 copper..            /// &lt;/summary&gt;.            platinum = 4.        }.        private readonly dictionary&lt;coins , long&gt; _internalwallet;.        public const int currencyminimum = 0;.        public const int currencymaximum = 99999;.        public const string coppername = ""copper"";.        public const string silvername = ""silver"";.        public const string goldname = ""gold"";.        public const string platinumname = ""platinum"";.        public const char copperabbreviation = 'c';.        public const char silverabbreviation = 's';.        public const char goldabbreviation = 'g';.        public const char platinumabbreviation = 'p';.        public static readonly color coppertextcolor = color.saddlebrown;.        public static readonly color silvertextcolor = color.silver;.        public static readonly color goldtextcolor = color.gold;.        public static readonly color platinumtextcolor = color.slateblue;.        public long copper { get { return _internalwallet[ coins.copper ]; } }.        public long silver { get { return _internalwallet[ coins.silver ]; } }.        public long gold { get { return _internalwallet[ coins.gold ]; } }.        public long platinum { get { return _internalwallet[ coins.platinum ]; } }..        public coinbag( uint platinum , uint gold , uint silver , uint copper ).        {.            _internalwallet = new dictionary&lt;coins , long&gt;.            {.                {coins.platinum, platinum},.                {coins.gold, gold},.                {coins.silver, silver},.                {coins.copper, copper}.            };.        }..        /// &lt;summary&gt;.        /// increases the chosen currency field by a desired amount..        /// &lt;/summary&gt;.        /// &lt;param name=""amount""&gt;the amount to be added.&lt;/param&gt;.        /// &lt;param name=""type""&gt;the type of currency that will be increased.&lt;/param&gt;.        public void add( uint amount , coins type ).        {.            _internalwallet[ type ] += amount;.        }..        /// &lt;summary&gt;.        /// parses the given coin type and returns the in-game.        /// text color, which will be used when drawing the name.        /// within the game world..        /// &lt;/summary&gt;.        /// &lt;param name=""type""&gt;&lt;/param&gt;.        /// &lt;returns&gt;the color associated with the coin enum to be used for rendering.&lt;/returns&gt;.        public static color parsecointextcolor( coins type ).        {.            switch( type ).            {.                case coins.copper:.                    return coppertextcolor;.                case coins.silver:.                    return silvertextcolor;.                case coins.gold:.                    return goldtextcolor;.                case coins.platinum:.                    return platinumtextcolor;.                default:.                    throw new exception( ""could not parse coin color: "" + type );.            }.        }..        /// &lt;summary&gt;.        /// retrieves the current balance of a specified coin.        /// within the bag, then returns that value with the .        /// appended abbreviation attached to the end of it..        /// so, coins.copper would return ""32c"" if the current.        /// balance were 32 copper at the time of invocation..        /// &lt;/summary&gt;.        /// &lt;param name=""coin""&gt;&lt;/param&gt;.        /// &lt;returns&gt;the abbreviated balance of the specified coin.&lt;/returns&gt;.        public string checkbalance( coins coin ).        {.            switch( coin ).            {.                case coins.copper:.                    return """" + _internalwallet[ coin ] + copperabbreviation;.                case coins.silver:.                    return """" + _internalwallet[ coin ] + silverabbreviation;.                case coins.gold:.                    return """" + _internalwallet[ coin ] + goldabbreviation;.                case coins.platinum:.                    return """" + _internalwallet[ coin ] + platinumabbreviation;.                default:.                    throw new exception( ""could not parse abbreviated render text: "" + coin );.            }.        }..        /// &lt;summary&gt;.        /// parses the given coin type and returns the in-game.        /// string abbreviation. coins.copper returns 'c'; etc..        /// &lt;/summary&gt;.        /// &lt;param name=""type""&gt;&lt;/param&gt;.        /// &lt;returns&gt;the char abbreviation associated with the coin enum.&lt;/returns&gt;.        public static char parseabbreviation( coins type ).        {.            switch( type ).            {.                case coins.copper:.                    return copperabbreviation;.                case coins.silver:.                    return silverabbreviation;.                case coins.gold:.                    return goldabbreviation;.                case coins.platinum:.                    return platinumabbreviation;.                default:.                    throw new exception( ""could not parse coin abbreviation: "" + type );.            }.        }..        /// &lt;summary&gt;.        /// parses the given coin type and returns the in-game.        /// string name. coins.copper returns ""copper""; etc..        /// &lt;/summary&gt;.        /// &lt;param name=""type""&gt;&lt;/param&gt;.        /// &lt;returns&gt;the string name associated with the coin enum.&lt;/returns&gt;.        public static string parsename( coins type ).        {.            switch( type ).            {.                case coins.copper:.                    return coppername;.                case coins.silver:.                    return silvername;.                case coins.gold:.                    return goldname;.                case coins.platinum:.                    return platinumname;.                default:.                    throw new exception( ""could not parse coin name: "" + type );.            }.        }..        /// &lt;summary&gt;.        /// increases the current balance of this bag with the.        /// desired currency..        /// &lt;/summary&gt;.        /// &lt;param name=""platinum""&gt;the amount of platinum to be added.&lt;/param&gt;.        /// &lt;param name=""gold""&gt;the amount of gold to be added.&lt;/param&gt;.        /// &lt;param name=""silver""&gt;the amount of silver to be added.&lt;/param&gt;.        /// &lt;param name=""copper""&gt;the amount of copper to be added.&lt;/param&gt;.        public void add( uint platinum , uint gold , uint silver , uint copper ).        {.            _internalwallet[ coins.copper ] += copper;.            _internalwallet[ coins.silver ] += silver;.            _internalwallet[ coins.gold ] += gold;.            _internalwallet[ coins.platinum ] += platinum;.        }..        /// &lt;summary&gt;.        /// increases the current balance of this bag with the .        /// current balance of another..        /// &lt;/summary&gt;.        /// &lt;param name=""bag""&gt;the other bag.&lt;/param&gt;.        public void add( coinbag bag ).        {.            _internalwallet[ coins.copper ] += bag.copper;.            _internalwallet[ coins.silver ] += bag.silver;.            _internalwallet[ coins.gold ] += bag.gold;.            _internalwallet[ coins.platinum ] += bag.platinum;.        }..        /// &lt;summary&gt;.        /// subtracts the chosen currency by a desired amount..        /// &lt;/summary&gt;.        /// &lt;param name=""amount""&gt;the amount to subtract.&lt;/param&gt;.        /// &lt;param name=""type""&gt;the type of money that will be subtracted.&lt;/param&gt;.        public void subtract( uint amount , coins type ).        {.            _internalwallet[ type ] -= amount;.        }..        /// &lt;summary&gt;.        /// subtracts the current balance of the coinbag with.        /// the desired fields..        /// &lt;/summary&gt;.        /// &lt;param name=""platinum""&gt;the amount of platinum to subtract.&lt;/param&gt;.        /// &lt;param name=""gold""&gt;the amount of gold to subtract.&lt;/param&gt;.        /// &lt;param name=""silver""&gt;the amount of silver to subtract.&lt;/param&gt;.        /// &lt;param name=""copper""&gt;the amount of copper to subtract.&lt;/param&gt;.        public void subtract( uint platinum , uint gold , uint silver , uint copper ).        {.            _internalwallet[ coins.copper ] -= copper;.            _internalwallet[ coins.silver ] -= silver;.            _internalwallet[ coins.gold ] -= gold;.            _internalwallet[ coins.platinum ] -= platinum;.        }..        /// &lt;summary&gt;.        /// subtracts the current balance of the coinbag with.        /// the balance of another..        /// &lt;/summary&gt;.        /// &lt;param name=""bag""&gt;the second bag.&lt;/param&gt;.        public void subtract( coinbag bag ).        {.            _internalwallet[ coins.copper ] -= bag.copper;.            _internalwallet[ coins.silver ] -= bag.silver;.            _internalwallet[ coins.gold ] -= bag.gold;.            _internalwallet[ coins.platinum ] -= bag.platinum;.        }..        /// &lt;summary&gt;.        /// completley balances the current coinbag by shifting.        /// over copper-&gt;silver-&gt;gold-&gt;platinum..        /// &lt;/summary&gt;.        public void balance().        {.            exchange( coins.copper , coins.silver , copper );.            exchange( coins.silver , coins.gold , silver );.            exchange( coins.gold , coins.platinum , gold );.        }..        /// &lt;summary&gt;.        /// completely empties the wallet of all money..        /// &lt;/summary&gt;.        public void empty().        {.            _internalwallet[ coins.copper ] -= 0;.            _internalwallet[ coins.silver ] -= 0;.            _internalwallet[ coins.gold ] -= 0;.            _internalwallet[ coins.platinum ] -= 0;.        }..        /// &lt;summary&gt;.        /// exchanges one field of currency to another based.        /// upon its monetary worth. the exchange rate for.        /// all currency is 100 of the lesser..        /// 100 gold = 1 platinum..        /// 100 silver = 1 gold..        /// 100 copper = 1 silver..        /// &lt;/summary&gt;.        /// &lt;param name=""fromtype""&gt;the type that will be exchanged.&lt;/param&gt;.        /// &lt;param name=""totype""&gt;what the fromtype will be exchanged to.&lt;/param&gt;.        /// &lt;param name=""amountoffromtype""&gt;the amount to be exchanged.&lt;/param&gt;.        public void exchange( coins fromtype , coins totype , long amountoffromtype ).        {.            if( fromtype == totype ).                return;..            long fromtypeamount = _internalwallet[ fromtype ];.            if( amountoffromtype &gt; fromtypeamount ).                return; // not enough money..            if( fromtype &gt; totype ).            {.                _internalwallet[ totype ] += amountoffromtype * ( long )math.pow( 100 , ( int )fromtype - ( int )totype );.            }.            else.            {.                long overflow = amountoffromtype % 100;.                amountoffromtype -= overflow;.                _internalwallet[ totype ] += amountoffromtype / ( long )math.pow( 100 , ( int )totype - ( int )fromtype );.            }.            _internalwallet[ fromtype ] -= amountoffromtype;.        }..        /// &lt;summary&gt;.        /// creates a string representation for the current.        /// monetary state of the coinbag. the format is.        /// as follows:.        /// [ platinum-&gt;gold-&gt;silver-&gt;copper ].        /// or:.        /// [ 100p,23g,17s,780c ].        /// &lt;/summary&gt;.        /// &lt;returns&gt;a string reprsentation of the coinbag.&lt;/returns&gt;.        public string tocurrencystring().        {.            return.                """" + platinum + platinumabbreviation + "","" +.                gold + goldabbreviation + "","" +.                silver + silverabbreviation + "","" +.                copper + copperabbreviation;.        }.    }.}"
