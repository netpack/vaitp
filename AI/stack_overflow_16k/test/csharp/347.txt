"what is the maximum number of flags that make sense in an enum? considering this type of enum, in which you can use bitwise comparisons to basically combine multiple booleans into a single data field:..[flags].public enum options .{.    none    = 0,.    option1 = 1,.    option2 = 2,.    option3 = 4,.    option4 = 8.}...i have read through the msdn documentation at https://msdn.microsoft.com/en-us/library/ms229062(v=vs.100).aspx?cs-save-lang=1&amp;cs-lang=csharp#code-snippet-1 and done some google searching, but i still have some architecture questions...it seems that with up to [edit: eight] options (plus ""none""), you can fit any combination of flags into a single byte of storage.  is this actually how it is handled at runtime, or is it just stuck into an int32 with the remainder of the space wasted?  is there an efficiency disadvantage to adding a ninth option, and if so, how many more options can you add before hitting the next efficiency disadvantage?  is there a rule of thumb about how large one of these should be?  i am considering using this for an application where at least 6 flags would be needed, but it could conceivably grow to include 8-12 flags (but i am interested in the theoretical limits as well.)..thanks in advance!"
