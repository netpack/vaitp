"check null behaviour in if statement code sample :..int var_a;.//....//some code that fetches var_a from db if db field is not null.//.....// region 1.if(var_a != null &amp;&amp; var_a &gt; 0) // do something..//region 2.if(var_a != null){.    if(var_a&gt;0) // do something.}...question 1: is there any difference between region 1 and 2  at blank ?:..question 2: does all the compilers/interpreters behave same at this situation?..note: i know there is something int.tryparse(). i just want to understand how compiler is working at this situation.....note 2: someone stuck compiler must give an error, let me explain then:..class test.{.    int a;.    private void test().    {.        int b=99;.        if (this.a != null &amp;&amp; a &gt; 0) b = 100;.    }..    private void fill_a().    {.        this.a = 6;.    }..}...compiler gives no error. so we bypassed compiler. and if we execute code :..test();...b is 99..fill_a();.test();...b is 100. ..integers are not our focus at this problem.  so i hope now we can focus to the questions (:"
