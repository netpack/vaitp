"private set or private member? i was wondering what's considered the blank best practice, private/protected members with public getters, or public getters with private/protected setters?..       public int publicgetprivatesetter.       {.            get;.            private set;.        }.....        private int _privatemember;..        public int publicgetprivatemember.        {.            get { return _privatemember; }.        }...i feel that using a private member is more explicit in your code that it's a private setter (using naming conventions)..on the other hand using private setters gives you an option to use virtual (protected), write less code, has less room for mistakes and can give you an option to add a side effect later on if you need to...i couldn't find what's considered a best practice, or even if one is considered better than the other. from what i've seen usually 80% of the time (from code that i've seen) people dont use private setters... i'm not sure if this is because people don't know about private setters, or because it's considered better to actually use private members...edit:..indeed, other benefits which i forgot about when using private members is default values and the use of readonly."
