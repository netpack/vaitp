"string manipulation of parenthesis i want to manipulate the given string or any string so that if every opening parenthesis has a closing parenthesis then fine. if not, i check if there are more opening parenthesis or closing parenthesis and vice versa. if opening parenthesis are more, then i insert a closing parenthesis immediately after it. if closing parenthesis are more, then i insert an opening parenthesis immediately before it...int count1 = 0, count2 = 0;.string sentence = "") (x + 2) )("";..        foreach (char letter in sentence).        {.            if (letter == '(').                count1++;.            else if (letter == ')').                count2++;.        }..        if(count1 == count2).            console.writeline(""correct use of parenthesis"");.        else.        {.            if(count1 &gt; count2).            {.                //how to find which opening parenthesis is the lonely one?.            }.            else.            {.                //how to find which closing parenthesis is the lonely one?.            }.        }...i'm thinking of using the indexof method to locate the parenthesis, how to find the right parenthesis ?!.a solution without using regular expression(since i still did not study them) is appreciated...i just realized that using numbers to count the number of each parenthesis won't guarantee a correct outcome to the problem. since a string like ""( (x+2 ) ("" would come out as a correct use of parenthesis. any way to make sure the correct usage of parenthesis ?!..edit:.so i've implemented the algorithm in the link provided by alexei(thanks by the way). i've a problem which is when the problem is with the opening parenthesis, the errorindex variable is the last opening parenthesis that did not close. however, when the problem is with the closing parenthesis, the errorindex variable is the first closing parenthesis that was not open...this the code:..var astack = new stack&lt;int&gt;();.        char openpar = '(';.        char closepar = ')';..        for (int index = 0; index &lt; str.length; index++).        {.            if (str[index] == openpar).                astack.push(index);.            else if(str[index] == closepar).            {.                if(astack.count == 0).                {.                    errorindex = index;.                    return false;.                }.                astack.pop();.            }.        }..        if (astack.count == 0).        {.            errorindex = -1;.            return true;.        }.        else.        {.            errorindex = astack.peek();.            return false;.        }.    }...in the main method, this string str1 = ""(( ((""; returns its error index at 4..this string str2 = "")) ))""; returns its error index at 0."
