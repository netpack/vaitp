import reverse as django_reverse
import (
BetaTesterFactory, GlobalStaffFactory, InstructorFactory, StaffFactory, UserProfileFactory
)
INSTRUCTOR_GET_ENDPOINTS = set([
'get_anon_ids',
'get_coupon_codes',
'get_issued_certificates',
'get_sale_order_records',
'get_sale_records',
])
INSTRUCTOR_POST_ENDPOINTS = set([
'active_registration_codes',
'add_users_to_cohorts',
'bulk_beta_modify_access',
'calculate_grades_csv',
'change_due_date',
'export_ora2_data',
'generate_registration_codes',
'get_enrollment_report',
'get_exec_summary_report',
'get_grading_config',
'get_problem_responses',
'get_proctored_exam_results',
'get_registration_codes',
'get_student_progress_url',
'get_students_features',
'get_students_who_may_enroll',
'get_user_invoice_preference',
'list_background_email_tasks',
'list_course_role_members',
'list_email_content',
'list_entrance_exam_instructor_tasks',
'list_financial_report_downloads',
'list_forum_members',
'list_instructor_tasks',
'list_report_downloads',
'mark_student_can_skip_entrance_exam',
'modify_access',
'register_and_enroll_students',
'rescore_entrance_exam',
'rescore_problem',
'reset_due_date',
'reset_student_attempts',
'reset_student_attempts_for_entrance_exam',
'sale_validation',
'show_student_extensions',
'show_unit_extensions',
'send_email',
'spent_registration_codes',
'students_update_enrollment',
'update_forum_role_membership',
])
def reverse(endpoint, args=None, kwargs=None, is_dashboard_endpoint=True):
"""
Simple wrapper of Django's reverse that first ensures that we have declared
each endpoint under test.
Arguments:
args: The args to be passed through to reverse.
endpoint: The endpoint to be passed through to reverse.
kwargs: The kwargs to be passed through to reverse.
is_dashboard_endpoint: True if this is an instructor dashboard endpoint
that must be declared in the INSTRUCTOR_GET_ENDPOINTS or
INSTRUCTOR_GET_ENDPOINTS sets, or false otherwise.
Returns:
The return of Django's reverse function
"""
is_endpoint_declared = endpoint in INSTRUCTOR_GET_ENDPOINTS or endpoint in INSTRUCTOR_POST_ENDPOINTS
if is_dashboard_endpoint and is_endpoint_declared is False:
raise ValueError("The endpoint {} must be declared in ENDPOINTS before use.".format(endpoint))
return django_reverse(endpoint, args=args, kwargs=kwargs)
@attr('shard_1')
@ddt.ddt
class TestEndpointHttpMethods(SharedModuleStoreTestCase, LoginEnrollmentTestCase):
"""
Ensure that users can make GET requests against endpoints that allow GET,
and not against those that don't allow GET.
"""
@classmethod
def setUpClass(cls):
"""
Set up test course.
"""
super(TestEndpointHttpMethods, cls).setUpClass()
cls.course = CourseFactory.create()
def setUp(self):
"""
Set up global staff role so authorization will not fail.
"""
super(TestEndpointHttpMethods, self).setUp()
global_user = GlobalStaffFactory()
self.client.login(username=global_user.username, password='test')
@ddt.data(*INSTRUCTOR_POST_ENDPOINTS)
def test_endpoints_reject_get(self, data):
"""
Tests that POST endpoints are rejected with 405 when using GET.
"""
url = reverse(data, kwargs={'course_id': unicode(self.course.id)})
response = self.client.get(url)
self.assertEqual(
response.status_code, 405,
"Endpoint {} returned status code {} instead of a 405. It should not allow GET.".format(
data, response.status_code
)
)
@ddt.data(*INSTRUCTOR_GET_ENDPOINTS)
def test_endpoints_accept_get(self, data):
"""
Tests that GET endpoints are not rejected with 405 when using GET.
"""
url = reverse(data, kwargs={'course_id': unicode(self.course.id)})
response = self.client.get(url)
self.assertNotEqual(
response.status_code, 405,
"Endpoint {} returned status code 405 where it shouldn\'t, since it should allow GET.".format(
data
)
)
if endpoint in INSTRUCTOR_GET_ENDPOINTS:
else:
response = self.client.post(url, args)
response = self.client.post(url)
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url)
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(
redeem_url = reverse('shoppingcart.views.register_code_redemption', args=[code], is_dashboard_endpoint=False)
resp = self.client.post(
reverse('shoppingcart.views.update_user_cart', is_dashboard_endpoint=False),
{'ItemId': paid_course_reg_item.id, 'qty': '4'}
)
resp = self.client.post(
reverse('shoppingcart.views.use_code', is_dashboard_endpoint=False),
{'code': coupon.code}
)
response = self.client.post(sale_order_url)
resp = self.client.post(
reverse('shoppingcart.views.use_code', is_dashboard_endpoint=False),
{'code': coupon.code}
)
instructor_dashboard = reverse(
'instructor_dashboard',
kwargs={'course_id': self.course.id.to_deprecated_string()},
is_dashboard_endpoint=False
)
response = self.client.post(url + '/csv', {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {'problem_location': problem_location})
response = self.client.post(url, {'problem_location': problem_location})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
resp = self.client.post(
reverse('shoppingcart.views.update_user_cart', is_dashboard_endpoint=False),
{'ItemId': paid_course_reg_item.id, 'qty': '4'}
)
resp = self.client.post(
reverse('shoppingcart.views.use_code', is_dashboard_endpoint=False),
{'code': self.coupon_code}
)
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {'problem_location': ''})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
data = {\'unique_student_identifier\': self.students[0].email.encode("utf-8")}
response = self.client.post(url, data)
data = {\'unique_student_identifier\': self.students[0].username.encode("utf-8")}
response = self.client.post(url, data)
response = self.client.post(url)
response = self.client.post(url)
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {})
response = self.client.post(url, {
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {})
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url, {'url': self.week1.location.to_deprecated_string()})
response = self.client.post(url, {'student': self.user1.username})
response = self.client.post(url, {
response = self.client.post(url, {
response = self.client.post(url)
response = self.client.post(url)
response = self.client.post(url)
response = self.client.post(url)
response = self.client.get(url, {'csv': 'true'})
response = self.client.post(get_coupon_code_url)
def call_add_users_to_cohorts(self, csv_data, suffix='.csv'):
return self.client.post(url, {'uploaded-file': file_pointer})
