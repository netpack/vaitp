ImmutableSandboxedEnvironment, unsafe, has_format
@pytest.mark.sandbox
@pytest.mark.skipif(not has_format, reason='No format support')
class TestStringFormat(object):
def test_basic_format_safety(self):
env = SandboxedEnvironment()
t = env.from_string(\'{{ "a{0.__class__}b".format(42) }}\')
assert t.render() == 'ab'
def test_basic_format_all_okay(self):
env = SandboxedEnvironment()
t = env.from_string(\'{{ "a{0.foo}b".format({"foo": 42}) }}\')
assert t.render() == 'a42b'
def test_basic_format_safety(self):
env = SandboxedEnvironment()
t = env.from_string(\'{{ ("a{0.__class__}b{1}"|safe).format(<foo>") }}\')
assert t.render() == 'ab&lt;foo&gt;'
def test_basic_format_all_okay(self):
env = SandboxedEnvironment()
t = env.from_string(\'{{ ("a{0.foo}b{1}"|safe).format({"foo": 42}, "<foo>") }}\')
assert t.render() == 'a42b&lt;foo&gt;'
