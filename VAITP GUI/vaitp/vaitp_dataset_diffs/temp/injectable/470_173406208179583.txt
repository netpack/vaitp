import time
handler = tests.http_reflect_with_auth(allow_scheme="basic", allow_credentials=(("joe", password),))
handler = tests.http_reflect_with_auth(allow_scheme="basic", allow_credentials=(("joe", password),))
handler = tests.http_reflect_with_auth(allow_scheme="basic", allow_credentials=allowed)
handler = tests.http_reflect_with_auth(allow_scheme="digest", allow_credentials=(("joe", password),))
allow_scheme="digest", allow_credentials=(("joe", password),), out_renew_nonce=grenew_nonce,
info = httplib2.auth._parse_authentication_info(response1)
print("debug: response1 authentication-info: {}\\nparsed: {}".format(response1.get("authentication-info"), info))
assert info.get("nc") == "00000001", info
info2 = httplib2.auth._parse_authentication_info(response2)
assert info2.get("nc") == "00000002", info2
info3 = httplib2.auth._parse_authentication_info(response3)
assert info3.get("nc") == "00000001", info3
info = httplib2.auth._parse_www_authenticate(requests[0][1].headers, "www-authenticate")
info2 = httplib2.auth._parse_www_authenticate(requests[2][1].headers, "www-authenticate")
{"www-authenticate": \'Test realm="test realm" , foo=foo ,bar="bar", baz=baz,qux=qux\'},
{"test": {"realm": "test realm", "foo": "foo", "bar": "bar", "baz": "baz", "qux": "qux"}},
({"www-authenticate": \'Test realm="a \\\\"test\\\\" realm"\'}, {"test": {"realm": \'a "test" realm\'}},),
({"www-authenticate": \'Basic realm="me", algorithm="MD5"\'}, {"basic": {"realm": "me", "algorithm": "MD5"}},),
({"www-authenticate": \'Basic realm="me", algorithm=MD5\'}, {"basic": {"realm": "me", "algorithm": "MD5"}},),
({"www-authenticate": \'Basic realm="me",other="fred" \'}, {"basic": {"realm": "me", "other": "fred"}},),
{"www-authenticate": \'Digest realm="digest1", qop="auth,auth-int", nonce="7102dd2", opaque="e9517f"\'},
{"digest": {"realm": "digest1", "qop": "auth,auth-int", "nonce": "7102dd2", "opaque": "e9517f"}},
{"www-authenticate": \'Digest realm="2-comma-d", qop="auth-int", nonce="c0c8ff1", Basic realm="2-comma-b"\'},
{"digest": {"realm": "2-comma-d", "qop": "auth-int", "nonce": "c0c8ff1"}, "basic": {"realm": "2-comma-b"}},
(
{"www-authenticate": \'Digest realm="com3d", Basic realm="com3b", WSSE realm="com3w", profile="token"\'},
{"digest": {"realm": "com3d"}, "basic": {"realm": "com3b"}, "wsse": {"realm": "com3w", "profile": "token"}},
),
{"www-authenticate": \'Digest realm="myrealm", nonce="KBAA=3", algorithm=MD5, qop="auth", stale=true\'},
{"digest": {"realm": "myrealm", "nonce": "KBAA=3", "algorithm": "MD5", "qop": "auth", "stale": "true"}},
({"www-authenticate": "Basic param=\'single quote\'"}, {"basic": {"param": "\'single"}}),
assert httplib2.auth._parse_www_authenticate(headers) == info
@pytest.mark.parametrize(
"data",
(({"www-authenticate": \'OAuth "Facebook Platform" "invalid_token" "Invalid OAuth access token."\'}, None),),
ids=lambda data: str(data[0]),
)
def test_parse_www_authenticate_malformed(data):
headers, info = data
try:
result = httplib2.auth._parse_www_authenticate(headers)
except httplib2.error.MalformedHeader:
assert info is None, "unexpected MalformedHeader"
else:
assert result == info
assert info is not None, "expected parsing error"
def test_parse_www_authenticate_complexity():
process_time = getattr(time, "process_time", time.time)
def check(size):
header = {"www-authenticate": \'scheme {0}key=value,{0}quoted="foo=bar"\'.format(" \\t" * size)}
tbegin = process_time()
result = httplib2.auth._parse_www_authenticate(header)
tend = process_time()
assert result == {"scheme": {"key": "value", "quoted": "foo=bar"}}
elapsed_us = round((tend * 1e6) - (tbegin * 1e6), 0)
return elapsed_us
n1, n2, repeat = 50, 100, 7
time1 = min(check(n1) for _ in range(repeat))
time2 = min(check(n2) for _ in range(repeat))
speed1 = round(time1 / n1, 1)
speed2 = round(time2 / n2, 1)
expect2 = round(speed1 * (float(n2) / n1), 1)
error = round(speed2 / expect2, 1)
print("x{}: time={}us speed={} us/op".format(n1, time1, speed1))
print("x{}: time={}us speed={} us/op expected={} us/op error={}".format(n2, time2, speed2, expect2, error))
assert error < _parse_www_authenticate scales too fast"
response = {"www-authenticate": \'Digest realm="myrealm", nonce="KBAA=35", algorithm=MD5, qop="auth"\'}
d = httplib2.DigestAuthentication(credentials, host, request_uri, headers, response, content, None)
\'nonce="KBAA=35", uri="/test/digest/"\' + \', algorithm=MD5, response="de6d4a123b80801d0e94550411b6283f", \'
"www-authenticate": \'Digest realm="myrealm", nonce="30352fd", algorithm=MD5, \' \'qop="auth", opaque="atestopaque"\'
d = httplib2.DigestAuthentication(credentials, host, request_uri, headers, response, content, None)
response["www-authenticate"] = \'Digest realm="myrealm", nonce="bd669f", \' \'algorithm=MD5, qop="auth", stale=true\'
d = httplib2.DigestAuthentication(credentials, host, request_uri, headers, response, content, None)
response["www-authenticate"] = \'Digest realm="myrealm", nonce="barney", \' \'algorithm=MD5, qop="auth", stale=true\'
d = httplib2.DigestAuthentication(credentials, host, request_uri, headers, response, content, None)
