import sys
import PlaintextKey
class CacheInitAbortedError(Error):

class EncryptionMethodMismatch(Error):
"""Repository encryption method changed since last acccess, refusing to continue
"""
def __init__(self, repository, key, manifest, path=None, sync=True, warn_if_unencrypted=True):
self.lock = None
if warn_if_unencrypted and isinstance(key, PlaintextKey):
if 'ATTIC_UNKNOWN_UNENCRYPTED_REPO_ACCESS_IS_OK' not in os.environ:
print("""Warning: Attempting to access a previously unknown unencrypted repository\\n""", file=sys.stderr)
answer = input('Do you want to continue? [yN] ')
if not (answer and answer in 'Yy'):
raise self.CacheInitAbortedError()
if self.key_type is not None and self.key_type != str(key.TYPE):
raise self.EncryptionMethodMismatch()
self.key_type = self.config.get('cache', 'key_type', fallback=None)
if self.lock:
self.lock.release()
self.config.set('cache', 'key_type', str(self.key.TYPE))
