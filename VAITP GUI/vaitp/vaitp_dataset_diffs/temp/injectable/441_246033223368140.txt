result = inst.received(b"garbage\\r\\n")
self.assertEqual(result, 9)
result = inst.received(b"a;discard\\r\\n")
self.assertEqual(result, 11)
result = inst.received(b"0;discard\\r\\n")
self.assertEqual(result, 11)
self.assertEqual(inst.completed, False)
def test_received_chunk_is_properly_terminated(self):
buf = DummyBuffer()
inst = self._makeOne(buf)
data = b"4\\r\\nWiki\\r\\n"
result = inst.received(data)
self.assertEqual(result, len(data))
self.assertEqual(inst.completed, False)
self.assertEqual(buf.data[0], b"Wiki")
def test_received_chunk_not_properly_terminated(self):
import BadRequest
buf = DummyBuffer()
inst = self._makeOne(buf)
data = b"4\\r\\nWikibadchunk\\r\\n"
result = inst.received(data)
self.assertEqual(result, len(data))
self.assertEqual(inst.completed, False)
self.assertEqual(buf.data[0], b"Wiki")
self.assertEqual(inst.error.__class__, BadRequest)
def test_received_multiple_chunks(self):
import BadRequest
buf = DummyBuffer()
inst = self._makeOne(buf)
data = (
b"4\\r\\n"
b"Wiki\\r\\n"
b"5\\r\\n"
b"pedia\\r\\n"
b"E\\r\\n"
b" in\\r\\n"
b"\\r\\n"
b"chunks.\\r\\n"
b"0\\r\\n"
b"\\r\\n"
)
result = inst.received(data)
self.assertEqual(result, len(data))
self.assertEqual(inst.completed, True)
self.assertEqual(b"".join(buf.data), b"Wikipedia in\\r\\n\\r\\nchunks.")
self.assertEqual(inst.error, None)
