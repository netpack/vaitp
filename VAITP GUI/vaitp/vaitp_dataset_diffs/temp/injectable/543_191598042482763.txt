import stat
import tempfile
import remove_tree
import KnownFailureTest
class TestIntermediateDir(TestCase):
"""
Tests for intermediate dir (store of .cpp and .o during builds).
These tests test whether intermediate dir is safe. If it's not,
new one should be created.
"""
def dirs_are_valid(self, wrong_dir, tmpdir):

new_im_dir = catalog.intermediate_dir(tmpdir)
assert_(not os.path.samefile(new_im_dir, wrong_dir))
new_im_dir2 = catalog.intermediate_dir(tmpdir)
assert_(os.path.samefile(new_im_dir, new_im_dir2))
def test_ownership(self):

if sys.platform != 'win32':
im_dir = catalog.intermediate_dir()
im_dir_stat = os.stat(im_dir)
proc_uid = os.getuid()
assert_(proc_uid == im_dir_stat.st_uid)
r_im_dir_stat = os.stat(os.path.dirname(im_dir))
assert_(proc_uid == r_im_dir_stat.st_uid)
def test_incorrect_ownership(self):
"""
test if new intermediate dir is created when there is only one
im dir owned by improper user
"""
if sys.platform != 'win32':
import pwd
tmpdir = tempfile.mkdtemp()
try:
im_dir = catalog.create_intermediate_dir(tmpdir)
root_im_dir = os.path.dirname(im_dir)
nobody = pwd.getpwnam('nobody')[2]
nobody_g = pwd.getpwnam('nobody')[3]
try:
os.chown(root_im_dir, nobody, nobody_g)
except OSError:
raise KnownFailureTest("Can\'t change owner.")
else:
self.dirs_are_valid(im_dir, tmpdir)
finally:
remove_tree(tmpdir)
def test_permissions(self):

if sys.platform != 'win32':
im_dir = catalog.intermediate_dir()
im_dir_stat = os.stat(im_dir)
assert_(stat.S_IMODE(im_dir_stat.st_mode) == 0o0700)
r_im_dir_stat = os.stat(os.path.dirname(im_dir))
assert_(stat.S_IMODE(r_im_dir_stat.st_mode) == 0o0700)
def test_incorrect_permissions(self):
"""
if permissions on existing im dir are not correct,
new one should be created
"""
if sys.platform != 'win32':
tmpdir = tempfile.mkdtemp()
try:
im_dir = catalog.create_intermediate_dir(tmpdir)
root_im_dir = os.path.dirname(im_dir)
try:
os.chmod(root_im_dir, 0o777)
except OSError:
raise KnownFailureTest("Can\'t set file permissions.")
else:
self.dirs_are_valid(im_dir, tmpdir)
finally:
remove_tree(tmpdir)
def test_symlink(self):

if sys.platform != 'win32':
r_im_dir = os.path.dirname(catalog.intermediate_dir())
assert_(os.path.islink(r_im_dir) is False)
def test_symlink_raise(self):

if sys.platform != 'win32':
tmpdir = tempfile.mkdtemp()
try:
im_dir = catalog.create_intermediate_dir(tmpdir)
root_im_dir = os.path.dirname(im_dir)
tempdir = tempfile.mkdtemp(prefix='scipy-test', dir=tmpdir)
try:
os.rename(root_im_dir, tempdir)
except OSError:
raise KnownFailureTest("Can\'t move intermediate dir.")
try:
os.symlink(tempdir, root_im_dir)
except OSError:
raise KnownFailureTest(
"Can\'t create symlink to intermediate dir.")
else:
self.dirs_are_valid(im_dir, tmpdir)
finally:
remove_tree(tmpdir)
"""
Tests for 'catalog.default_dir()'.
These should verified posix and win default_dir function.
"""
def test_win(self):
"""
test if default_dir for Windows platform is accessible
since default_dir_win() does not have any Windows specific code,
let's test it everywhere
"""
d = catalog.default_dir_win()
assert_(catalog.is_writable(d))
def test_win_inaccessible_root(self):
"""
there should be a new root dir created if existing one is not accessible
"""
tmpdir = tempfile.mkdtemp()
try:
d_dir = catalog.default_dir_win(tmpdir)
root_ddir = os.path.dirname(d_dir)
try:
os.chmod(root_ddir, stat.S_IREAD | stat.S_IEXEC)
except OSError:
raise KnownFailureTest("Can\'t change permissions of root default_dir.")
new_ddir = catalog.default_dir_win(tmpdir)
assert_(not os.path.samefile(new_ddir, d_dir))
new_ddir2 = catalog.default_dir_win(tmpdir)
assert_(os.path.samefile(new_ddir, new_ddir2))
finally:
os.chmod(root_ddir, 0o700)
remove_tree(tmpdir)
def test_win_inaccessible_ddir(self):
"""
create new defualt_dir if current one is not accessible
"""
tmpdir = tempfile.mkdtemp()
try:
d_dir = catalog.default_dir_win(tmpdir)
try:
os.chmod(d_dir, stat.S_IREAD | stat.S_IEXEC)
except OSError:
raise KnownFailureTest("Can\'t change permissions of default_dir.")
new_ddir = catalog.default_dir_win(tmpdir)
assert_(not os.path.samefile(new_ddir, d_dir))
new_ddir2 = catalog.default_dir_win(tmpdir)
assert_(os.path.samefile(new_ddir, new_ddir2))
finally:
os.chmod(d_dir, 0o700)
remove_tree(tmpdir)
def test_posix(self):

d = catalog.default_dir_posix()
assert_(catalog.is_writable(d))
def test_posix_home_inaccessible(self):

tmpdir = tempfile.mkdtemp()
try:
d_dir = catalog.default_dir_posix(tmpdir)
try:
os.chmod(d_dir, 0o000)
except OSError:
raise KnownFailureTest("Can\'t change permissions of default_dir.")
new_ddir = catalog.default_dir_posix(tmpdir)
assert_(not os.path.samefile(new_ddir, d_dir))
new_ddir2 = catalog.default_dir_posix(tmpdir)
assert_(os.path.samefile(new_ddir, new_ddir2))
finally:
os.chmod(d_dir, 0o700)
remove_tree(tmpdir)
def test_posix_dirs_inaccessible(self):

tmpdir = tempfile.mkdtemp()
try:
d_dir = catalog.default_dir_posix(tmpdir)
try:
os.chmod(d_dir, 0o000)
except OSError:
raise KnownFailureTest("Can\'t change permissions of default_dir.")
d_dir2 = catalog.default_dir_posix(tmpdir)
try:
os.chmod(d_dir2, 0o000)
except OSError:
raise KnownFailureTest("Can\'t change permissions of default_dir.")
new_ddir = catalog.default_dir_posix(tmpdir)
assert_(not (os.path.samefile(new_ddir, d_dir) or os.path.samefile(new_ddir, d_dir2)))
new_ddir2 = catalog.default_dir_posix(tmpdir)
assert_(os.path.samefile(new_ddir, new_ddir2))
finally:
os.chmod(d_dir, 0o700)
os.chmod(d_dir2, 0o700)
remove_tree(tmpdir)

remove_tree(pardir)
remove_tree(pardir)
