import Dict
import implementer
import SimpleResolverComplexifier
import fail, succeed
import DNSLookupError
import (
IHostnameResolver,
IReactorPluggableNameResolver,
IResolverSimple,
)
if "db" not in test_config:
test_config["db"] = {"db.file": ":memory:"}
test_config["db"].setdefault("db.file", ":memory:")
reactor = ResolvingMemoryReactorClock()
return Sydent(reactor=reactor, cfg=parse_config_dict(test_config), use_tls_for_federation=False)
if shorthand and not path.startswith(b"/_matrix"):
log_format = "%(asctime)s - %(name)s - %(lineno)d - %(levelname)s" " - %(message)s"
@implementer(IReactorPluggableNameResolver)
class ResolvingMemoryReactorClock(MemoryReactorClock):
"""
A MemoryReactorClock that supports name resolution.
"""
def __init__(self):
lookups = self.lookups = {}
@implementer(IResolverSimple)
class FakeResolver:
def getHostByName(self, name, timeout=None):
if name not in lookups:
return fail(DNSLookupError("OH NO: unknown %s" % (name,)))
return succeed(lookups[name])
self.nameResolver = SimpleResolverComplexifier(FakeResolver())
super().__init__()
def installNameResolver(self, resolver: IHostnameResolver) -> IHostnameResolver:
raise NotImplementedError()
