import functools
import re
import bot, Config, checks, commands
fmt_re = re.compile(r"{(?:0|user)(?:\\.([^\\{]+))?}")
def __init__(self, bot: bot.Red):
async def initialize(self, bot: bot.Red):
@staticmethod
def repl(target: discord.Member, match: re.Match):
if attr := match.group(1):
print(attr)
if attr.startswith("_") or "." in attr:
return str(target)
try:
return str(getattr(target, attr))
except AttributeError:
return str(target)
return str(target)
async def act(self, ctx: commands.Context, *, target: Union[discord.Member, str] = None):
assert isinstance(message, str)
message = fmt_re.sub(functools.partial(self.repl, target), message)
async def actset(self, ctx: commands.Context):
async def customize(self, ctx: commands.Context, command: str.lower, *, response: str = None):
await ctx.tick()
await ctx.send(
fmt_re.sub(functools.partial(self.repl, ctx.author), response),
allowed_mentions=discord.AllowedMentions(users=False),
)
async def customize_global(
self, ctx: commands.Context, command: str.lower, *, response: str = None
):
async def ignore(self, ctx: commands.Context, command: str.lower):
async def ignore_global(self, ctx: commands.Context, command: str.lower):
async def tenorkey(self, ctx: commands.Context):
async def on_command_error(
self, ctx: commands.Context, error: commands.CommandError, unhandled_by_cog: bool = False
):
if ctx.command == self.act:
if isinstance(error, commands.UserFeedbackCheckFailure):
elif isinstance(error, (commands.CheckFailure, commands.CommandNotFound)):
ctx.command = self.act
await ctx.bot.invoke(ctx)
