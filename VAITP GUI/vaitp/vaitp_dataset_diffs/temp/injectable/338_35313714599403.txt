def is_subpath(path, root):
root = os.path.realpath(root)
path = os.path.realpath(os.path.join(root, path))
return path.startswith(os.path.join(root, ''))
parser.add_option("", "--allow-path-traversal", default=False,
action="store_true",
help=_("Allow packages stored outside their repo directory to be synced "
"(UNSAFE, USE WITH CAUTION!)"))
if not opts.allow_path_traversal:
newlist = []
skipped = False
for pkg in download_list:
if is_subpath(pkg.remote_path, local_repo_path):
newlist.append(pkg)
continue
my.logger.warning(
_(\'WARNING: skipping package %s: remote path "%s" not \'
'within repodir, unsafe to mirror locally')
% (pkg, pkg.remote_path)
)
skipped = True
if skipped:
my.logger.info(
_('You can enable unsafe remote paths by using '
'--allow-path-traversal (see reposync(1) for details)')
)
download_list = newlist
