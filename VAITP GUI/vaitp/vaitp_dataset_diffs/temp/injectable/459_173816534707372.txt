import (
BasicCriterion,
Criterion,
Enum,
Equality,
Term,
ValueWrapper,
basestring,
date,
format_quotes,
)
def get_value_sql(self, **kwargs):
quote_char = kwargs.get("secondary_quote_char") or ""
dialect = kwargs.get("dialect")
if dialect:
dialect = dialect.value
if isinstance(self.value, Term):
return self.value.get_sql(**kwargs)
if isinstance(self.value, Enum):
return self.value.value
if isinstance(self.value, date):
value = self.value.isoformat()
return format_quotes(value, quote_char)
if isinstance(self.value, basestring):
value = self.value.replace(quote_char, quote_char * 2)
if dialect == "mysql":
value = value.replace("\\\\", "\\\\\\\\")
return format_quotes(value, quote_char)
if isinstance(self.value, bool):
return str.lower(str(self.value))
if self.value is None:
return "null"
return str(self.value)
ValueWrapper.get_value_sql = get_value_sql
class Like(BasicCriterion):
def __init__(self, left, right, alias=None, escape=" ESCAPE \'\\\\\'") -> None:
"""
A Like that supports an ESCAPE clause
"""
super().__init__(" LIKE ", left, right, alias=alias)
self.escape = escape
def get_sql(self, quote_char=\'"\', with_alias=False, **kwargs):
sql = "{left}{comparator}{right}{escape}".format(
comparator=self.comparator,
left=self.left.get_sql(quote_char=quote_char, **kwargs),
right=self.right.get_sql(quote_char=quote_char, **kwargs),
escape=self.escape,
)
if with_alias and self.alias:
return \'{sql} "{alias}"\'.format(sql=sql, alias=self.alias)
return sql
def escape_val(val: Any) -> Any:
if isinstance(val, str):
print(val)
return val.replace("\\\\", "\\\\\\\\")
return val
def escape_like(val: str) -> str:
return val.replace("\\\\", "\\\\\\\\").replace("%", "\\\\%").replace("_", "\\\\_")
return Like(field, field.wrap_constant(f"%{escape_like(value)}%"))
return Like(field, field.wrap_constant(f"{escape_like(value)}%"))
return Like(field, field.wrap_constant(f"%{escape_like(value)}"))
return Upper(field).eq(Upper(str(value)))
return Like(Upper(field), field.wrap_constant(Upper(f"%{escape_like(value)}%")))
return Like(Upper(field), field.wrap_constant(Upper(f"{escape_like(value)}%")))
return Like(Upper(field), field.wrap_constant(Upper(f"%{escape_like(value)}")))
