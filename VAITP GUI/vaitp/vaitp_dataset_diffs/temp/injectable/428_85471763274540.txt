import io
import address, reactor, defer, interfaces
import ClientFactory
import (
MethodInjectionTestsMixin,
URIInjectionTestsMixin,
)
class GetPageMethodInjectionTests(
MethodInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.getPage} against HTTP method injections.
"""
def attemptRequestWithMaliciousMethod(self, method):
"""
Attempt a request with the provided method.
@param method: see L{MethodInjectionTestsMixin}
"""
uri = b'http://twisted.invalid'
client.getPage(uri, method=method)
class GetPageURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.getPage} against URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: see L{URIInjectionTestsMixin}
"""
client.getPage(uri)
class DownloadPageMethodInjectionTests(
MethodInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.getPage} against HTTP method injections.
"""
def attemptRequestWithMaliciousMethod(self, method):
"""
Attempt a request with the provided method.
@param method: see L{MethodInjectionTestsMixin}
"""
uri = b'http://twisted.invalid'
client.downloadPage(uri, file=io.BytesIO(), method=method)
class DownloadPageURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.downloadPage} against URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: see L{URIInjectionTestsMixin}
"""
client.downloadPage(uri, file=io.BytesIO())
def makeHTTPPageGetterFactory(protocolClass, method, host, path):
"""
Make a L{ClientFactory} that can be used with
L{client.HTTPPageGetter} and its subclasses.
@param protocolClass: The protocol class
@type protocolClass: A subclass of L{client.HTTPPageGetter}
@param method: the HTTP method
@param host: the host
@param path: The URI path
@return: A L{ClientFactory}.
"""
factory = ClientFactory.forProtocol(protocolClass)
factory.method = method
factory.host = host
factory.path = path
factory.scheme = b"http"
factory.port = 0
factory.headers = {}
factory.agent = b"User/Agent"
factory.cookies = {}
return factory
class HTTPPageGetterMethodInjectionTests(
MethodInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.HTTPPageGetter} against HTTP method injections.
"""
protocolClass = client.HTTPPageGetter
def attemptRequestWithMaliciousMethod(self, method):
"""
Attempt a request with the provided method.
@param method: L{MethodInjectionTestsMixin}
"""
transport = StringTransport()
factory = makeHTTPPageGetterFactory(
self.protocolClass,
method=method,
host=b"twisted.invalid",
path=b"/",
)
getter = factory.buildProtocol(
address.IPv4Address("TCP", "127.0.0.1", 0),
)
getter.makeConnection(transport)
class HTTPPageGetterURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Test L{client.HTTPPageGetter} against HTTP URI injections.
"""
protocolClass = client.HTTPPageGetter
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: L{URIInjectionTestsMixin}
"""
transport = StringTransport()
factory = makeHTTPPageGetterFactory(
self.protocolClass,
method=b"GET",
host=uri,
path=uri,
)
getter = factory.buildProtocol(
address.IPv4Address("TCP", "127.0.0.1", 0),
)
getter.makeConnection(transport)
class HTTPPageDownloaderMethodInjectionTests(
HTTPPageGetterMethodInjectionTests
):
"""
Test L{client.HTTPPageDownloader} against HTTP method injections.
"""
protocolClass = client.HTTPPageDownloader
class HTTPPageDownloaderURIInjectionTests(
HTTPPageGetterURIInjectionTests
):
"""
Test L{client.HTTPPageDownloader} against HTTP URI injections.
"""
protocolClass = client.HTTPPageDownloader
class HTTPClientFactoryMethodInjectionTests(
MethodInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPClientFactory} against HTTP method injections.
"""
def attemptRequestWithMaliciousMethod(self, method):
"""
Attempt a request with the provided method.
@param method: L{MethodInjectionTestsMixin}
"""
client.HTTPClientFactory(b"https://twisted.invalid", method)
class HTTPClientFactoryURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPClientFactory} against HTTP URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: L{URIInjectionTestsMixin}
"""
client.HTTPClientFactory(uri)
class HTTPClientFactorySetURLURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPClientFactory.setURL} against HTTP URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: L{URIInjectionTestsMixin}
"""
client.HTTPClientFactory(b"https://twisted.invalid").setURL(uri)
class HTTPDownloaderMethodInjectionTests(
MethodInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPDownloader} against HTTP method injections.
"""
def attemptRequestWithMaliciousMethod(self, method):
"""
Attempt a request with the provided method.
@param method: L{MethodInjectionTestsMixin}
"""
client.HTTPDownloader(
b"https://twisted.invalid",
io.BytesIO(),
method=method,
)
class HTTPDownloaderURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPDownloader} against HTTP URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: L{URIInjectionTestsMixin}
"""
client.HTTPDownloader(uri, io.BytesIO())
class HTTPDownloaderSetURLURIInjectionTests(
URIInjectionTestsMixin,
unittest.SynchronousTestCase,
):
"""
Tests L{client.HTTPDownloader.setURL} against HTTP URI injections.
"""
def attemptRequestWithMaliciousURI(self, uri):
"""
Attempt a request with the provided URI.
@param uri: L{URIInjectionTestsMixin}
"""
downloader = client.HTTPDownloader(
b"https://twisted.invalid",
io.BytesIO(),
)
downloader.setURL(uri)
