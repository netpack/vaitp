import pytest
import PermissionDenied
import Permission
import ContentType
import Http404
import DeviceListView, DeviceDeleteView, DeviceUpdateView
class TestViewsChangeUserPermission:
"""Test suite which ensures that:
- users without the change_user permission cannot manage other users' 2FA devices
- users can manage their own devices
"""
def test_verified_user_has_no_change_user_perm(self, verified_user):

assert not verified_user.has_perm("user.change_user")
def test_device_list_view_for_own_user_returns_200(self, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
request = rf.get('foo')
request.user = verified_user
response = DeviceListView.as_view()(request, user_id=verified_user.id)
assert response.status_code == 200
def test_device_list_view_for_other_user_raises_error(self, user, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
request = rf.get('foo')
request.user = verified_user
with pytest.raises(PermissionDenied):
response = DeviceListView.as_view()(request, user_id=user.id)
def test_device_delete_view_for_own_user_returns_200(self, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()
request = rf.get('foo')
request.user = verified_user
response = DeviceDeleteView.as_view()(request, pk=device.id)
assert response.status_code == 200
def test_device_delete_view_for_other_user_raises_error(self, user, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)
device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()
request = rf.get('foo')
request.user = verified_user
with pytest.raises(PermissionDenied):
response = DeviceDeleteView.as_view()(request, pk=other_device.id)
def test_device_update_view_for_own_user_returns_200(self, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()
request = rf.get('foo')
request.user = verified_user
response = DeviceUpdateView.as_view()(request, pk=device.id)
assert response.status_code == 200
def test_device_update_view_for_other_user_raises_error(self, user, verified_user, rf):
with override_settings(WAGTAIL_2FA_REQUIRED=True):
other_device = TOTPDevice.objects.create(name='Initial', user=user, confirmed=True)
device = TOTPDevice.objects.devices_for_user(verified_user, confirmed=True).first()
request = rf.get('foo')
request.user = verified_user
with pytest.raises(Http404):
response = DeviceUpdateView.as_view()(request, pk=other_device.id)
