import os
import DEFAULT_POOLBLOCK, DEFAULT_POOLSIZE, DEFAULT_RETRIES
Custom SSLContext Adapter for requests
"""
def __init__(self, pool_connections=DEFAULT_POOLSIZE,
pool_maxsize=DEFAULT_POOLSIZE, max_retries=DEFAULT_RETRIES,
pool_block=DEFAULT_POOLBLOCK, verify=True,
cert_paths=None):
self.verify = verify
self.cafiles = []
self.capaths = []
cert_paths = cert_paths or []
if isinstance(cert_paths, str):
cert_paths = [cert_paths]
for path in cert_paths:
path = path and os.path.expanduser(path)
if os.path.isdir(path):
self.capaths.append(path)
elif os.path.exists(path):
self.cafiles.append(path)
else:
logger.warning("cert_path missing; not used for validation: %s",
path)
super(SSLContextAdapter, self).__init__(pool_connections=pool_connections,
pool_maxsize=pool_maxsize,
max_retries=max_retries,
pool_block=pool_block)
context.set_default_verify_paths()
for cafile in self.cafiles:
context.load_verify_locations(cafile=cafile)
for capath in self.capaths:
context.load_verify_locations(capath=capath)
if self.verify:
context.verify_mode = ssl.VerifyMode.CERT_REQUIRED
trust_env=None, verify=True, cert_paths=None):
:param cert_paths: paths to CA certificates / directories in OpenSSL
format. (default: None)
:type cert_paths: None, str, list
self.session.mount("https://", SSLContextAdapter(verify=verify, cert_paths=cert_paths))
