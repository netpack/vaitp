import grp
def write_str_to(filename, s, uid, gid, mode):
fd = os.open(filename, os.O_WRONLY | os.O_CREAT | os.O_TRUNC, mode)
os.fchown(fd, uid, gid)
def validate_transform_move_and_notify(uploaded_dir_path, problem_dir_path, dest=None):
fsuid = 0
fsgid = 0
try:
gabrt = grp.getgrnam("abrt")
fsgid = gabrt.gr_gid
except KeyError as ex:
error_msg("Failed to get GID of \'abrt\' (using 0 instead): {0}\'".format(str(ex)))
try:
os.chown(uploaded_dir_path, fsuid, fsgid)
os.chmod(uploaded_dir_path, @DEFAULT_DUMP_DIR_MODE@ | stat.S_IXUSR | stat.S_IXGRP)
for item in os.listdir(uploaded_dir_path):
apath = os.path.join(uploaded_dir_path, item)
if os.path.islink(apath):
os.remove(apath)
elif os.path.isdir(apath):
shutil.rmtree(apath)
elif os.path.isfile(apath):
os.chown(apath, fsuid, fsgid)
os.chmod(apath, @DEFAULT_DUMP_DIR_MODE@)
else:
os.remove(apath)
except OSError as ex:
error_msg("Removing uploaded dir \'{0}\': \'{1}\'".format(uploaded_dir_path, str(ex)))
try:
shutil.rmtree(uploaded_dir_path)
except OSError as ex2:
error_msg_and_die("Failed to clean up dir \'{0}\': \'{1}\'".format(uploaded_dir_path, str(ex2)))
return
remote_path = os.path.join(uploaded_dir_path, "remote")
write_str_to(remote_path, "1", fsuid, fsgid, @DEFAULT_DUMP_DIR_MODE@)
count_path = os.path.join(uploaded_dir_path, "count")
if os.path.exists(count_path):
remote_count_path = os.path.join(uploaded_dir_path, "remote_count")
os.rename(count_path, remote_count_path)
if not dest:
dest = problem_dir_path
shutil.move(uploaded_dir_path, dest)
problem.notify_new_path(problem_dir_path)
validate_transform_move_and_notify(tempdir, abrt_dir+"/"+os.path.basename(tempdir), dest=abrt_dir)
validate_transform_move_and_notify(tempdir+"/"+d, dst)
