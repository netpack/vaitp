import date, datetime
import PropertyError, ValidationError
import Reference
def test___post_init(self, mocker):
import Property
validate_default = mocker.patch(f"{MODULE_NAME}.Property._validate_default")
Property(name="a name", required=True, default=None)
validate_default.assert_not_called()
Property(name="a name", required=True, default="the default value")
validate_default.assert_called_with(default="the default value")
def test__validate_default(self):
import Property
p = Property(name="a name", required=True, default=None)
with pytest.raises(ValidationError):
p._validate_default("a default value")
with pytest.raises(ValidationError):
p = Property(name="a name", required=True, default="")
class TestStringProperty:
def test__validate_default(self):
import StringProperty
p = StringProperty(name="a name", required=True, default="the default value")
assert p.default == \'"the default value"\'
"import datetime",
"import datetime",
def test__validate_default(self):
import DateTimeProperty
with pytest.raises(ValidationError):
p = DateTimeProperty(name="a name", required=True, default="not a datetime")
p = DateTimeProperty(name="a name", required=True, default="2017-07-21T17:32:28Z")
assert p.default == "datetime.datetime(2017, 7, 21, 17, 32, 28, tzinfo=datetime.timezone.utc)"
"import datetime",
"import datetime",
def test__validate_default(self):
import DateProperty
with pytest.raises(ValidationError):
p = DateProperty(name="a name", required=True, default="not a date")
p = DateProperty(name="a name", required=True, default="1010-10-10")
assert p.default == "datetime.date(1010, 10, 10)"
def test__validate_default(self):
import FileProperty
p = FileProperty(name="a name", required=True, default=None)
with pytest.raises(ValidationError):
p = FileProperty(name="a name", required=True, default="")
class TestFloatProperty:
def test__validate_default(self):
import FloatProperty
p = FloatProperty(name="a name", required=True, default=None)
p = FloatProperty(name="a name", required=True, default="123.123")
assert p.default == 123.123
with pytest.raises(ValidationError):
p = FloatProperty(name="a name", required=True, default="not a float")
class TestIntProperty:
def test__validate_default(self):
import IntProperty
p = IntProperty(name="a name", required=True, default=None)
p = IntProperty(name="a name", required=True, default="123")
assert p.default == 123
with pytest.raises(ValidationError):
p = IntProperty(name="a name", required=True, default="not an int")
class TestBooleanProperty:
def test__validate_default(self):
import BooleanProperty
p = BooleanProperty(name="a name", required=True, default=None)
p = BooleanProperty(name="a name", required=True, default="Literally anything will work")
assert p.default == True
def test__validate_default(self, mocker):
import ListProperty
inner_property = mocker.MagicMock()
inner_type_string = mocker.MagicMock()
inner_property.get_type_string.return_value = inner_type_string
inner_property._validate_default.return_value = "y"
p = ListProperty(name="a name", required=True, default=["x"], inner_property=inner_property)
assert p.default == f"field(default_factory=lambda: cast(List[{inner_type_string}], [\'y\']))"
with pytest.raises(ValidationError):
p = ListProperty(name="a name", required=True, default="x", inner_property=inner_property)
def test__validate_default_enum_items(self, mocker):
import ListProperty, RefProperty
inner_enum_property = mocker.MagicMock(spec=RefProperty)
inner_enum_property.get_type_string.return_value = "AnEnum"
inner_enum_property._validate_default.return_value = "AnEnum.val1"
p = ListProperty(name="a name", required=True, default=["val1"], inner_property=inner_enum_property)
assert p.default == f"field(default_factory=lambda: cast(List[AnEnum], [AnEnum.val1]))"
def test__validate_default(self, mocker):
import UnionProperty
inner_property_1 = mocker.MagicMock()
inner_property_1.get_type_string.return_value = "inner_type_string_1"
inner_property_1._validate_default.side_effect = ValidationError()
inner_property_2 = mocker.MagicMock()
inner_property_2.get_type_string.return_value = "inner_type_string_2"
inner_property_2._validate_default.return_value = "the default value"
p = UnionProperty(
name="test", required=True, default="a value", inner_properties=[inner_property_1, inner_property_2]
)
assert p.default == "the default value"
inner_property_2._validate_default.side_effect = ValidationError()
with pytest.raises(ValidationError):
p = UnionProperty(
name="test", required=True, default="a value", inner_properties=[inner_property_1, inner_property_2]
)
def test__validate_default(self, mocker):
fake_reference = mocker.MagicMock(class_name="MyTestEnum", module_name="my_test_enum")
mocker.patch(f"{MODULE_NAME}.Reference.from_ref", return_value=fake_reference)
import properties
enum_property = properties.EnumProperty(
name="test", required=True, default="test", values={"TEST": "test"}, title="a_title"
)
assert enum_property.default == "MyTestEnum.TEST"
with pytest.raises(ValidationError):
enum_property = properties.EnumProperty(
name="test", required=True, default="bad_val", values={"TEST": "test"}, title="a_title"
)
properties._existing_enums = {}
def test__validate_default(self, mocker):
import RefProperty
with pytest.raises(ValidationError):
p = RefProperty(name="a name", required=True, default="", reference=mocker.MagicMock())
enum_property = mocker.MagicMock()
enum_property._validate_default.return_value = "val1"
mocker.patch(f"{MODULE_NAME}.EnumProperty.get_enum", return_value=enum_property)
p = RefProperty(name="a name", required=True, default="", reference=mocker.MagicMock())
assert p.default == "val1"
class TestDictProperty:
def test__validate_default(self):
import DictProperty
p = DictProperty(name="a name", required=True, default={"key": "value"})
with pytest.raises(ValidationError):
p = DictProperty(name="a name", required=True, default="not a dict")
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
FloatProperty.assert_called_once_with(name=name, required=True, default="0.0")
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
mocker.patch("openapi_python_client.utils.remove_string_escapes", return_value=name)
def test_property_from_data_validation_error(self, mocker):
import PropertyError
import property_from_data
mocker.patch(f"{MODULE_NAME}._property_from_data").side_effect = ValidationError()
data = oai.Schema()
assert property_from_data(name="blah", required=True, data=data) == PropertyError(
detail="Failed to validate default value", data=data
)
