import Optional, Tuple
import isIPAddress, isIPv6Address
"""Validate that a given string is a valid hostname or domain name.
instance, it doesn't check that the TLD is valid).
return hostname_regex.match(string) is not None
def parse_server_name(server_name: str) -> Tuple[str, Optional[int]]:
"""Split a server name into host/port parts.
No validation is done on the host part. The port part is validated to be
a valid port number.
Args:
server_name: server name to parse
Returns:
host/port parts.
Raises:
ValueError if the server name could not be parsed.
"""
try:
if server_name[-1] == "]":
return server_name, None
host_port = server_name.rsplit(":", 1)
host = host_port[0]
port = host_port[1] if host_port[1:] else None
if port:
if port != str(port_num) or not (1 <= port_num < 65536):
raise ValueError("Invalid port")
return host, port
except Exception:
raise ValueError("Invalid server name \'%s\'" % server_name)
def is_valid_matrix_server_name(string: str) -> bool:
"""Validate that the given string is a valid Matrix server name.
A string is a valid Matrix server name if it is one of the following, plus
an optional port:
a. IPv4 address
b. IPv6 literal (`[IPV6_ADDRESS]`)
c. A valid hostname
:param string: The string to validate
:type string: str
:return: Whether the input is a valid Matrix server name
:rtype: bool
"""
try:
host, port = parse_server_name(string)
except ValueError:
return False
valid_ipv4_addr = isIPAddress(host)
valid_ipv6_literal = host[0] == "[" and host[-1] == "]" and isIPv6Address(host[1:-1])
return valid_ipv4_addr or valid_ipv6_literal or is_valid_hostname(host)
