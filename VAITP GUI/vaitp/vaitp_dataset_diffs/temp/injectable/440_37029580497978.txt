import text_, tobytes
def test_received_get_no_headers(self):
data = b"HTTP/1.0 GET /foobar\\r\\n\\r\\n"
self.assertEqual(result, 24)
data = b"HTTP/1.0 GET /foobar\\r\\n Host: foo\\r\\n\\r\\n"
self.assertEqual(result, 36)
data = b"\\r\\n\\r\\n"
self.assertEqual(result, 4)
data = b"GET /foobar HTTP/8.4\\r\\n"
self.assertEqual(result, 22)
data = b"GET /foobar HTTP/8.4\\r\\nContent-Length: 10\\r\\n\\r\\n"
self.assertEqual(result, 44)
data = b"GET /foobar HTTP/8.4\\r\\nX-Foo: 1\\r\\n\\r\\n"
self.assertEqual(result, 34)
data = (
b"GET /foobar HTTP/1.1\\r\\n"
b"Transfer-Encoding: chunked\\r\\n"
b"X-Foo: 1\\r\\n"
b"\\r\\n"
b"1d;\\r\\n"
b"This string has 29 characters\\r\\n"
b"0\\r\\n\\r\\n"
)
self.assertEqual(result, 62)
data = (
b"GET /foobar HTTP/1.1\\r\\n"
b"Transfer-Encoding: chunked\\r\\n"
b"X-Foo: 1\\r\\n"
b"\\r\\n"
b"garbage\\r\\n"
)
self.assertEqual(result, 9)
data = (
b"GET /foobar HTTP/1.1\\r\\n"
b"Transfer-Encoding: chunked\\r\\n"
b"X-Foo: 1\\r\\n"
b"\\r\\n"
b"1d;\\r\\n"
b"This string has 29 characters\\r\\n"
b"0\\r\\n\\r\\n"
)
self.assertEqual(result, 62)
self.assertEqual(self.parser.headers["CONTENT_LENGTH"], "29")
data = b"GET /foobar HTTP/8.4\\r\\nfoo: bar\\r\\n"
import ParsingError
try:
self.parser.parse_header(data)
except ParsingError:
pass
else:
self.assertTrue(False)
data = b"GET /foobar HTTP/8.4\\r\\ncontent-length: abc\\r\\n"
data = b"GET /foobar HTTP/1.1\\r\\ntransfer-encoding: ChUnKed\\r\\n"
data = b"GET /foobar HTTP/1.1\\r\\nexpect: 100-continue\\r\\n"
data = b"GET /foobar HTTP/1.1\\r\\nConnection: close\\r\\n"
def test_parse_header_lf_only(self):
import ParsingError
data = b"GET /foobar HTTP/8.4\\nfoo: bar"
try:
self.parser.parse_header(data)
except ParsingError:
pass
else:
self.assertTrue(False)
def test_parse_header_cr_only(self):
import ParsingError
data = b"GET /foobar HTTP/8.4\\rfoo: bar"
try:
self.parser.parse_header(data)
except ParsingError:
pass
else:
self.assertTrue(False)
def test_parse_header_extra_lf_in_header(self):
import ParsingError
data = b"GET /foobar HTTP/8.4\\r\\nfoo: \\nbar\\r\\n"
try:
self.parser.parse_header(data)
except ParsingError as e:
self.assertIn("Bare CR or LF found in header line", e.args[0])
else:
self.assertTrue(False)
def test_parse_header_extra_lf_in_first_line(self):
import ParsingError
data = b"GET /foobar\\n HTTP/8.4\\r\\n"
try:
self.parser.parse_header(data)
except ParsingError as e:
self.assertIn("Bare CR or LF found in HTTP message", e.args[0])
else:
self.assertTrue(False)
result = self._callFUT(b"slam\\r\\nslim")
result = self._callFUT(b"slim\\r\\n slam")
result = self._callFUT(b"slam\\r\\n\\tslim")
data = (
b"GET /foobar HTTP/8.4\\r\\n"
b"FirstName: mickey\\r\\n"
b"lastname: Mouse\\r\\n"
b"content-length: 6\\r\\n"
b"\\r\\n"
b"Hello."
)
{"FIRSTNAME": "mickey", "LASTNAME": "Mouse", "CONTENT_LENGTH": "6",},
self.assertEqual(parser.get_body_stream().getvalue(), b"Hello.")
data = (
b"GET /foo/a+%2B%2F%C3%A4%3D%26a%3Aint?d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6 HTTP/8.4\\r\\n"
b"FirstName: mickey\\r\\n"
b"lastname: Mouse\\r\\n"
b"content-length: 10\\r\\n"
b"\\r\\n"
b"Hello mickey."
)
{"FIRSTNAME": "mickey", "LASTNAME": "Mouse", "CONTENT_LENGTH": "10"},
data = (
b"GET https://example.com:8080/foobar HTTP/8.4\\r\\n"
b"content-length: 6\\r\\n"
b"\\r\\n"
b"Hello."
)
self.assertEqual(parser.headers, {"CONTENT_LENGTH": "6"})
self.assertEqual(parser.get_body_stream().getvalue(), b"Hello.")
data = (
b"GET /foobar HTTP/8.4\\r\\n"
b"x-forwarded-for: 10.11.12.13\\r\\n"
b"x-forwarded-for: unknown,127.0.0.1\\r\\n"
b"X-Forwarded_for: 255.255.255.255\\r\\n"
b"content-length: 6\\r\\n"
b"\\r\\n"
b"Hello."
)
"CONTENT_LENGTH": "6",
data = (
b"GET /foobar HTTP/8.4\\r\\n"
b"x-auth_user: bob\\r\\n"
b"content-length: 6\\r\\n"
b"\\r\\n"
b"Hello."
)
self.assertEqual(self.parser.headers, {"CONTENT_LENGTH": "6",})
