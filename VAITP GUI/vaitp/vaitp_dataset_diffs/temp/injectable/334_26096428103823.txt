import Pattern
_WILDCARD_RUN = re.compile(r"([\\?\\*]+)")
def glob_to_regex(glob: str, word_boundary: bool = False) -> Pattern:
glob: pattern to match
word_boundary: If True, the pattern will be allowed to match at word boundaries
anywhere in the string. Otherwise, the pattern is anchored at the start and
end of the string.
compiled regex pattern
chunks = []
for chunk in _WILDCARD_RUN.split(glob):
if not _WILDCARD_RUN.match(chunk):
chunks.append(re.escape(chunk))
continue
qmarks = chunk.count("?")
if "*" in chunk:
chunks.append(".{%d,}" % qmarks)
chunks.append(".{%d}" % qmarks)
res = "".join(chunks)
if word_boundary:
res = re_word_boundary(res)
else:
res = r"\\A" + res + r"\\Z"
return re.compile(res, re.IGNORECASE)
def re_word_boundary(r: str) -> str:
"""
Adds word boundary characters to the start and end of an
expression to require that the match occur as a whole word,
but do so respecting the fact that strings starting or ending
with non-word characters will change word boundaries.
"""
return r"(^|\\W)%s(\\W|$)" % (r,)
