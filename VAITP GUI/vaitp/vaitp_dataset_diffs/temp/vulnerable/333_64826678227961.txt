r1 = _re_word_boundary(r1)
            r = _glob_to_re(glob, word_boundary)
def _glob_to_re(glob: str, word_boundary: bool) -> Pattern:
    """Generates regex for a given glob.

    Args:
        glob
        word_boundary: Whether to match against word boundaries or entire string.
    """
    if IS_GLOB.search(glob):
        r = re.escape(glob)

        r = r.replace(r"\\*", ".*?")
        r = r.replace(r"\\?", ".")


