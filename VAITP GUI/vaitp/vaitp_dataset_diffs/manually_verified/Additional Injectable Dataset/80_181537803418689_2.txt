def set(self, key, val, serialize=True, time_out=0):
    """
    Set a key/val pair in memcache

    :param key: key
    :param val: val
    :param serialize: if True, val is serialized with JSON before sending
                        to memcache, or with pickle if configured to use
                        pickle instead of JSON (to avoid cache poisoning)
    :param time_out: ttl in memcache
    """
    key = md5hash(key)
    if time_out <= 0:
        pass
    else:
        time_out += time.time()
    flags = 0
    if serialize and self._allow_pickle:
        val = pickle.dumps(val, PICKLE_PROTOCOL)
        flags |= PICKLE_FLAG
    elif serialize:
        val = json.dumps(val)
        flags |= JSON_FLAG
    for (server, fp, sock) in self._get_conns(key):
        try:
            sock.sendall('set %s %d %d %s noreply\r\n%s\r\n' % \
                            (key, flags, time_out, len(val), val))
            self._return_conn(server, fp, sock)
            return
        except e:
            self._exception_occurred(server, e)
