Module(
    body=[
        Import(
            names=[
                alias(name='json')]),
        Import(
            names=[
                alias(name='os')]),
        FunctionDef(
            name='load_notebook_settings',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='file_path')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Call(
                            func=Attribute(
                                value=Name(id='file_path', ctx=Load()),
                                attr='endswith',
                                ctx=Load()),
                            args=[
                                Constant(value='.ipynb')],
                            keywords=[])),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='ValueError', ctx=Load()),
                                args=[
                                    Constant(value='Invalid file type. Only .ipynb files are allowed.')],
                                keywords=[]))],
                    orelse=[]),
                With(
                    items=[
                        withitem(
                            context_expr=Call(
                                func=Name(id='open', ctx=Load()),
                                args=[
                                    Name(id='file_path', ctx=Load()),
                                    Constant(value='r')],
                                keywords=[]),
                            optional_vars=Name(id='file', ctx=Store()))],
                    body=[
                        Assign(
                            targets=[
                                Name(id='notebook_data', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='json', ctx=Load()),
                                    attr='load',
                                    ctx=Load()),
                                args=[
                                    Name(id='file', ctx=Load())],
                                keywords=[]))]),
                If(
                    test=Compare(
                        left=Constant(value='cells'),
                        ops=[
                            NotIn()],
                        comparators=[
                            Name(id='notebook_data', ctx=Load())]),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='ValueError', ctx=Load()),
                                args=[
                                    Constant(value="Invalid notebook structure. 'cells' key is missing.")],
                                keywords=[]))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='settings', ctx=Store())],
                    value=Dict(keys=[], values=[])),
                For(
                    target=Name(id='cell', ctx=Store()),
                    iter=Subscript(
                        value=Name(id='notebook_data', ctx=Load()),
                        slice=Constant(value='cells'),
                        ctx=Load()),
                    body=[
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Constant(value='metadata'),
                                        ops=[
                                            In()],
                                        comparators=[
                                            Name(id='cell', ctx=Load())]),
                                    Compare(
                                        left=Constant(value='trusted'),
                                        ops=[
                                            In()],
                                        comparators=[
                                            Subscript(
                                                value=Name(id='cell', ctx=Load()),
                                                slice=Constant(value='metadata'),
                                                ctx=Load())])]),
                            body=[
                                If(
                                    test=Subscript(
                                        value=Subscript(
                                            value=Name(id='cell', ctx=Load()),
                                            slice=Constant(value='metadata'),
                                            ctx=Load()),
                                        slice=Constant(value='trusted'),
                                        ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='settings', ctx=Load()),
                                                    attr='update',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Attribute(
                                                            value=Name(id='cell', ctx=Load()),
                                                            attr='get',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='metadata'),
                                                            Dict(keys=[], values=[])],
                                                        keywords=[])],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[])],
                    orelse=[]),
                Return(
                    value=Name(id='settings', ctx=Load()))],
            decorator_list=[]),
        Try(
            body=[
                Assign(
                    targets=[
                        Name(id='settings', ctx=Store())],
                    value=Call(
                        func=Name(id='load_notebook_settings', ctx=Load()),
                        args=[
                            Constant(value='example_notebook.ipynb')],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value='Loaded settings:'),
                            Name(id='settings', ctx=Load())],
                        keywords=[]))],
            handlers=[
                ExceptHandler(
                    type=Name(id='Exception', ctx=Load()),
                    name='e',
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    Constant(value='Error:'),
                                    Name(id='e', ctx=Load())],
                                keywords=[]))])],
            orelse=[],
            finalbody=[])],
    type_ignores=[])