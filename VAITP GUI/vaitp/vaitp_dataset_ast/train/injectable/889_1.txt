Module(
    body=[
        Import(
            names=[
                alias(name='ipaddress')]),
        FunctionDef(
            name='is_ip_allowed',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='ip'),
                    arg(arg='allowed_ranges')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='Check if the given IP is within the allowed ranges.')),
                Assign(
                    targets=[
                        Name(id='ip_obj', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='ipaddress', ctx=Load()),
                            attr='ip_address',
                            ctx=Load()),
                        args=[
                            Name(id='ip', ctx=Load())],
                        keywords=[])),
                For(
                    target=Name(id='ip_range', ctx=Store()),
                    iter=Name(id='allowed_ranges', ctx=Load()),
                    body=[
                        If(
                            test=Compare(
                                left=Name(id='ip_obj', ctx=Load()),
                                ops=[
                                    In()],
                                comparators=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='ipaddress', ctx=Load()),
                                            attr='ip_network',
                                            ctx=Load()),
                                        args=[
                                            Name(id='ip_range', ctx=Load())],
                                        keywords=[])]),
                            body=[
                                Return(
                                    value=Constant(value=True))],
                            orelse=[])],
                    orelse=[]),
                Return(
                    value=Constant(value=False))],
            decorator_list=[]),
        FunctionDef(
            name='handle_third_party_invite',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='event'),
                    arg(arg='user_ip')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='Handle third-party invite events with IP validation.')),
                Assign(
                    targets=[
                        Name(id='allowed_ip_ranges', ctx=Store())],
                    value=List(
                        elts=[
                            Constant(value='192.0.2.0/24'),
                            Constant(value='203.0.113.0/24')],
                        ctx=Load())),
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Call(
                            func=Name(id='is_ip_allowed', ctx=Load()),
                            args=[
                                Name(id='user_ip', ctx=Load()),
                                Name(id='allowed_ip_ranges', ctx=Load())],
                            keywords=[])),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='ValueError', ctx=Load()),
                                args=[
                                    Constant(value='IP address not allowed for this request.')],
                                keywords=[]))],
                    orelse=[]),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value='Invite processed successfully.')],
                        keywords=[]))],
            decorator_list=[])],
    type_ignores=[])