Module(
    body=[
        Import(
            names=[
                alias(name='re')]),
        FunctionDef(
            name='vulnerable_parse',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='input_string')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='pattern', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='re', ctx=Load()),
                            attr='compile',
                            ctx=Load()),
                        args=[
                            Constant(value='^(.*)([a-zA-Z0-9_]+)(.*)$')],
                        keywords=[])),
                If(
                    test=Call(
                        func=Attribute(
                            value=Name(id='pattern', ctx=Load()),
                            attr='match',
                            ctx=Load()),
                        args=[
                            Name(id='input_string', ctx=Load())],
                        keywords=[]),
                    body=[
                        Return(
                            value=Constant(value=True))],
                    orelse=[
                        Raise(
                            exc=Call(
                                func=Name(id='ValueError', ctx=Load()),
                                args=[
                                    Constant(value='Input string is not valid.')],
                                keywords=[]))])],
            decorator_list=[]),
        Try(
            body=[
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Call(
                        func=Name(id='vulnerable_parse', ctx=Load()),
                        args=[
                            BinOp(
                                left=BinOp(
                                    left=BinOp(
                                        left=Constant(value='a'),
                                        op=Mult(),
                                        right=Constant(value=10000)),
                                    op=Add(),
                                    right=Constant(value='valid_input')),
                                op=Add(),
                                right=BinOp(
                                    left=Constant(value='b'),
                                    op=Mult(),
                                    right=Constant(value=10000)))],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='print', ctx=Load()),
                        args=[
                            Constant(value='Input is valid:'),
                            Name(id='result', ctx=Load())],
                        keywords=[]))],
            handlers=[
                ExceptHandler(
                    type=Name(id='ValueError', ctx=Load()),
                    name='e',
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='print', ctx=Load()),
                                args=[
                                    Name(id='e', ctx=Load())],
                                keywords=[]))])],
            orelse=[],
            finalbody=[])],
    type_ignores=[])