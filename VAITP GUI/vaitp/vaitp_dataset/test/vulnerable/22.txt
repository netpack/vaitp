"def _checknetloc(netloc):    if not netloc or netloc.isascii():        return    # looking for characters like \u2100 that expand to 'a/c'    # IDNA uses NFKC equivalence, so normalize for this check    import unicodedata    n = netloc.rpartition('@')[2] # ignore anything to the left of '@'    n = n.replace(':', '')        # ignore characters already included    n = n.replace('#', '')        # but not the surrounding text    n = n.replace('?', '')    netloc2 = unicodedata.normalize('NFKC', n)    if n == netloc2:        return    for c in '/?#@:':        if c in netloc2:            raise ValueError("netloc '" + netloc + "' contains invalid " +                             "characters under NFKC normalization")"