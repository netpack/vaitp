"    def calc(self, irc, msg, args, text):        """<math expression>        Returns the value of the evaluated <math expression>.  The syntax is        Python syntax; the type of arithmetic is floating point.  Floating        point arithmetic is used in order to prevent a user from being able to        crash to the bot with something like '10**10**10**10'.  One consequence        is that large values such as '10**24' might not be exact.        """        try:            text = str(text)        except UnicodeEncodeError:            irc.error(_("There's no reason you should have fancy non-ASCII "                            "characters in your mathematical expression. "                            "Please remove them."))            return        if self._calc_match_forbidden_chars.match(text):            # Note: this is important to keep this to forbid usage of            # __builtins__            irc.error(_('There\'s really no reason why you should have '                           'underscores or brackets in your mathematical '                           'expression.  Please remove them.'))            return        text = self._calc_remover(text)        if 'lambda' in text:            irc.error(_('You can\'t use lambda in this command.'))            return        text = text.lower()        def handleMatch(m):            s = m.group(1)            if s.startswith('0x'):                i = int(s, 16)            elif s.startswith('0') and '.' not in s:                try:                    i = int(s, 8)                except ValueError:                    i = int(s)            else:                i = float(s)            x = complex(i)            if x.imag == 0:                x = x.real                # Need to use string-formatting here instead of str() because                # use of str() on large numbers loses information:                # str(float(33333333333333)) => '3.33333333333e+13'                # float('3.33333333333e+13') => 33333333333300.0                return '%.16f' % x            return str(x)        text = self._mathRe.sub(handleMatch, text)        try:            self.log.info('evaluating %q from %s', text, msg.prefix)            x = complex(eval(text, self._mathSafeEnv, self._mathSafeEnv))            irc.reply(self._complexToString(x))        except OverflowError:            maxFloat = math.ldexp(0.9999999999999999, 1024)            irc.error(_('The answer exceeded %s or so.') % maxFloat)        except TypeError:            irc.error(_('Something in there wasn\'t a valid number.'))        except NameError as e:            irc.error(_('%s is not a defined function.') % str(e).split()[1])        except Exception as e:            irc.error(str(e))"