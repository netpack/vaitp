"def main(srcfile, dump_module=False):    argv0 = sys.argv[0]    components = argv0.split(os.sep)    argv0 = os.sep.join(components[-2:])    auto_gen_msg = common_msg % argv0    mod = asdl.parse(srcfile)    if dump_module:        print('Parsed Module:')        print(mod)    if not asdl.check(mod):        sys.exit(1)    if INC_DIR:        p = "%s/%s-ast.h" % (INC_DIR, mod.name)        f = open(p, "w")        f.write(auto_gen_msg)        f.write('#include "asdl.h"\n\n')        c = ChainOfVisitors(TypeDefVisitor(f),                            StructVisitor(f),                            PrototypeVisitor(f),                            )        c.visit(mod)        f.write("PyObject* Ta3AST_mod2obj(mod_ty t);\n")        f.write("mod_ty Ta3AST_obj2mod(PyObject* ast, PyArena* arena, int mode);\n")        f.write("int Ta3AST_Check(PyObject* obj);\n")        f.close()    if SRC_DIR:        p = os.path.join(SRC_DIR, str(mod.name) + "-ast.c")        f = open(p, "w")        f.write(auto_gen_msg)        f.write('#include <stddef.h>\n')        f.write('\n')        f.write('#include "Python.h"\n')        f.write('#include "%s-ast.h"\n' % mod.name)        f.write('\n')        f.write("static PyTypeObject AST_type;\n")        v = ChainOfVisitors(            PyTypesDeclareVisitor(f),            PyTypesVisitor(f),            Obj2ModPrototypeVisitor(f),            FunctionVisitor(f),            ObjVisitor(f),            Obj2ModVisitor(f),            ASTModuleVisitor(f),            PartingShots(f),            )        v.visit(mod)        f.close()"