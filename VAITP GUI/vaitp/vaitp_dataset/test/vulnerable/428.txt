"    def _load_from(self, data: bytes) -> None:        if data.strip() == b'':            data = XMP_EMPTY  # on some platforms lxml chokes on empty documents        def basic_parser(xml):            return parse(BytesIO(xml))        def strip_illegal_bytes_parser(xml):            return parse(BytesIO(re_xml_illegal_bytes.sub(b'', xml)))        def recovery_parser(xml):            parser = XMLParser(recover=True)            return parse(BytesIO(xml), parser)        def replace_with_empty_xmp(_xml=None):            log.warning("Error occurred parsing XMP, replacing with empty XMP.")            return basic_parser(XMP_EMPTY)        if self.overwrite_invalid_xml:            parsers: Iterable[Callable] = [                basic_parser,                strip_illegal_bytes_parser,                recovery_parser,                replace_with_empty_xmp,            ]        else:            parsers = [basic_parser]        for parser in parsers:            try:                self._xmp = parser(data)            except (XMLSyntaxError if self.overwrite_invalid_xml else NeverRaise) as e:                if str(e).startswith("Start tag expected, '<' not found") or str(                    e                ).startswith("Document is empty"):                    self._xmp = replace_with_empty_xmp()                    break            else:                break        try:            pis = self._xmp.xpath('/processing-instruction()')            for pi in pis:                etree.strip_tags(self._xmp, pi.tag)            self._get_rdf_root()        except (Exception if self.overwrite_invalid_xml else NeverRaise) as e:            log.warning("Error occurred parsing XMP", exc_info=e)            self._xmp = replace_with_empty_xmp()        return"