"def _glob_to_re(glob: str, word_boundary: bool) -> Pattern:    """Generates regex for a given glob.    Args:        glob        word_boundary: Whether to match against word boundaries or entire string.    """    if IS_GLOB.search(glob):        r = re.escape(glob)        r = r.replace(r"\*", ".*?")        r = r.replace(r"\?", ".")        # handle [abc], [a-z] and [!a-z] style ranges.        r = GLOB_REGEX.sub(            lambda x: (                "[%s%s]" % (x.group(1) and "^" or "", x.group(2).replace(r"\\\-", "-"))            ),            r,        )        if word_boundary:            r = _re_word_boundary(r)            return re.compile(r, flags=re.IGNORECASE)        else:            r = "^" + r + "$"            return re.compile(r, flags=re.IGNORECASE)    elif word_boundary:        r = re.escape(glob)        r = _re_word_boundary(r)        return re.compile(r, flags=re.IGNORECASE)    else:        r = "^" + re.escape(glob) + "$"        return re.compile(r, flags=re.IGNORECASE)"