"def main():    module = AnsibleModule(        argument_spec=dict(            path=dict(type='path'),            content=dict(type='str'),            passphrase=dict(type='str', no_log=True),            return_private_key_data=dict(type='bool', default=False),            select_crypto_backend=dict(type='str', default='auto', choices=['auto', 'cryptography', 'pyopenssl']),        ),        required_one_of=(            ['path', 'content'],        ),        mutually_exclusive=(            ['path', 'content'],        ),        supports_check_mode=True,    )    try:        if module.params['path'] is not None:            base_dir = os.path.dirname(module.params['path']) or '.'            if not os.path.isdir(base_dir):                module.fail_json(                    name=base_dir,                    msg='The directory %s does not exist or the file is not a directory' % base_dir                )        backend = module.params['select_crypto_backend']        if backend == 'auto':            # Detect what backend we can use            can_use_cryptography = CRYPTOGRAPHY_FOUND and CRYPTOGRAPHY_VERSION >= LooseVersion(MINIMAL_CRYPTOGRAPHY_VERSION)            can_use_pyopenssl = PYOPENSSL_FOUND and PYOPENSSL_VERSION >= LooseVersion(MINIMAL_PYOPENSSL_VERSION)            # If cryptography is available we'll use it            if can_use_cryptography:                backend = 'cryptography'            elif can_use_pyopenssl:                backend = 'pyopenssl'            # Fail if no backend has been found            if backend == 'auto':                module.fail_json(msg=("Can't detect any of the required Python libraries "                                      "cryptography (>= {0}) or PyOpenSSL (>= {1})").format(                                          MINIMAL_CRYPTOGRAPHY_VERSION,                                          MINIMAL_PYOPENSSL_VERSION))        if backend == 'pyopenssl':            if not PYOPENSSL_FOUND:                module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),                                 exception=PYOPENSSL_IMP_ERR)            module.deprecate('The module is using the PyOpenSSL backend. This backend has been deprecated',                             version='2.0.0', collection_name='community.crypto')            privatekey = PrivateKeyInfoPyOpenSSL(module)        elif backend == 'cryptography':            if not CRYPTOGRAPHY_FOUND:                module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),                                 exception=CRYPTOGRAPHY_IMP_ERR)            privatekey = PrivateKeyInfoCryptography(module)        result = privatekey.get_info()        module.exit_json(**result)    except OpenSSLObjectError as exc:        module.fail_json(msg=to_native(exc))"