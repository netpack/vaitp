"    def prepare_context(self, request, context, *args, **kwargs):        """        This allows templates to access the current eventContext and user from        the L{omero.gateway.BlitzGateway}.        E.g. <h1>{{ ome.user.getFullName }}</h1>        If these are not required by the template, then they will not need to        be loaded by the Blitz Gateway.        The results are cached by Blitz Gateway, so repeated calls have no        additional cost.        We also process some values from settings and add these to the        context.        """        # we expect @login_required to pass us 'conn', but just in case...        if "conn" not in kwargs:            return        conn = kwargs["conn"]        # omero constants        context["omero"] = {            "constants": {                "NSCOMPANIONFILE": constants.namespaces.NSCOMPANIONFILE,                "ORIGINALMETADATA": constants.annotation.file.ORIGINALMETADATA,                "NSCLIENTMAPANNOTATION": constants.metadata.NSCLIENTMAPANNOTATION,            }        }        context.setdefault("ome", {})  # don't overwrite existing ome        public_user = omeroweb.decorators.is_public_user(request)        if public_user is not None:            context["ome"]["is_public_user"] = public_user        context["ome"]["eventContext"] = eventContextMarshal(conn.getEventContext())        context["ome"]["user"] = conn.getUser        context["ome"]["user_id"] = request.session.get("user_id", conn.getUserId())        context["ome"]["group_id"] = request.session.get("group_id", None)        context["ome"]["active_group"] = request.session.get(            "active_group", conn.getEventContext().groupId        )        context["global_search_form"] = GlobalSearchForm()        context["ome"]["can_create"] = request.session.get("can_create", True)        # UI server preferences        if request.session.get("server_settings"):            context["ome"]["email"] = request.session.get("server_settings").get(                "email", False            )            if request.session.get("server_settings").get("ui"):                # don't overwrite existing ui                context.setdefault("ui", {"tree": {}})                context["ui"]["orphans"] = (                    request.session.get("server_settings")                    .get("ui", {})                    .get("tree", {})                    .get("orphans")                )                context["ui"]["dropdown_menu"] = (                    request.session.get("server_settings")                    .get("ui", {})                    .get("menu", {})                    .get("dropdown")                )                context["ui"]["tree"]["type_order"] = (                    request.session.get("server_settings")                    .get("ui", {})                    .get("tree", {})                    .get("type_order")                )        self.load_settings(request, context, conn)"