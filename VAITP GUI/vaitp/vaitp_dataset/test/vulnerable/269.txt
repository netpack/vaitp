"    def server_socket_thread(srv):        try:            while gcounter[0] < request_count:                try:                    client, _ = srv.accept()                except ssl.SSLError as e:                    if e.reason in tls_skip_errors:                        return                    raise                try:                    client.settimeout(timeout)                    fun(client, tick)                finally:                    try:                        client.shutdown(socket.SHUT_RDWR)                    except (IOError, socket.error):                        pass                    # FIXME: client.close() introduces connection reset by peer                    # at least in other/connection_close test                    # should not be a problem since socket would close upon garbage collection            if gcounter[0] > request_count:                gresult[0] = Exception(                    "Request count expected={0} actual={1}".format(                        request_count, gcounter[0]                    )                )        except Exception as e:            # traceback.print_exc caused IOError: concurrent operation on sys.stderr.close() under setup.py test            print(traceback.format_exc(), file=sys.stderr)            gresult[0] = e"