"    def visitField(self, field, name, sum=None, prod=None, depth=0):        ctype = get_c_type(field.type)        if field.opt:            check = "exists_not_none(obj, &PyId_%s)" % (field.name,)        else:            check = "_PyObject_HasAttrId(obj, &PyId_%s)" % (field.name,)        self.emit("if (%s) {" % (check,), depth, reflow=False)        self.emit("int res;", depth+1)        if field.seq:            self.emit("Py_ssize_t len;", depth+1)            self.emit("Py_ssize_t i;", depth+1)        self.emit("tmp = _PyObject_GetAttrId(obj, &PyId_%s);" % field.name, depth+1)        self.emit("if (tmp == NULL) goto failed;", depth+1)        if field.seq:            self.emit("if (!PyList_Check(tmp)) {", depth+1)            self.emit("PyErr_Format(PyExc_TypeError, \"%s field \\\"%s\\\" must "                      "be a list, not a %%.200s\", tmp->ob_type->tp_name);" %                      (name, field.name),                      depth+2, reflow=False)            self.emit("goto failed;", depth+2)            self.emit("}", depth+1)            self.emit("len = PyList_GET_SIZE(tmp);", depth+1)            if self.isSimpleType(field):                self.emit("%s = _Ta3_asdl_int_seq_new(len, arena);" % field.name, depth+1)            else:                self.emit("%s = _Ta3_asdl_seq_new(len, arena);" % field.name, depth+1)            self.emit("if (%s == NULL) goto failed;" % field.name, depth+1)            self.emit("for (i = 0; i < len; i++) {", depth+1)            self.emit("%s value;" % ctype, depth+2)            self.emit("res = obj2ast_%s(PyList_GET_ITEM(tmp, i), &value, arena);" %                      field.type, depth+2, reflow=False)            self.emit("if (res != 0) goto failed;", depth+2)            self.emit("if (len != PyList_GET_SIZE(tmp)) {", depth+2)            self.emit("PyErr_SetString(PyExc_RuntimeError, \"%s field \\\"%s\\\" "                      "changed size during iteration\");" %                      (name, field.name),                      depth+3, reflow=False)            self.emit("goto failed;", depth+3)            self.emit("}", depth+2)            self.emit("asdl_seq_SET(%s, i, value);" % field.name, depth+2)            self.emit("}", depth+1)        else:            self.emit("res = obj2ast_%s(tmp, &%s, arena);" %                      (field.type, field.name), depth+1)            self.emit("if (res != 0) goto failed;", depth+1)        self.emit("Py_CLEAR(tmp);", depth+1)        self.emit("} else {", depth)        if not field.opt:            message = "required field \\\"%s\\\" missing from %s" % (field.name, name)            format = "PyErr_SetString(PyExc_TypeError, \"%s\");"            self.emit(format % message, depth+1, reflow=False)            self.emit("return 1;", depth+1)        else:            if self.isNumeric(field):                self.emit("%s = 0;" % field.name, depth+1)            elif not self.isSimpleType(field):                self.emit("%s = NULL;" % field.name, depth+1)            else:                raise TypeError("could not determine the default value for %s" % field.name)        self.emit("}", depth)"