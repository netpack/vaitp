"    def _setup_master(self):        Router.max_message_size = self.config['max_message_size']        if self.config['profiling']:            enable_profiling()        self.broker = Broker(activate_compat=False)        self.router = Router(self.broker)        self.router.debug = self.config.get('debug', False)        self.router.undirectional = self.config['unidirectional']        self.router.add_handler(            fn=self._on_shutdown_msg,            handle=SHUTDOWN,            policy=has_parent_authority,        )        self.master = Context(self.router, 0, 'master')        parent_id = self.config['parent_ids'][0]        if parent_id == 0:            self.parent = self.master        else:            self.parent = Context(self.router, parent_id, 'parent')        in_fd = self.config.get('in_fd', 100)        in_fp = os.fdopen(os.dup(in_fd), 'rb', 0)        os.close(in_fd)        out_fp = os.fdopen(os.dup(self.config.get('out_fd', 1)), 'wb', 0)        self.stream = MitogenProtocol.build_stream(self.router, parent_id)        self.stream.accept(in_fp, out_fp)        self.stream.name = 'parent'        self.stream.receive_side.keep_alive = False        listen(self.stream, 'disconnect', self._on_parent_disconnect)        listen(self.broker, 'exit', self._on_broker_exit)"