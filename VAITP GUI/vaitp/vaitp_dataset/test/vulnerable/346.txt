"def main():    module = AnsibleModule(        argument_spec=dict(            privatekey_path=dict(type='path'),            privatekey_content=dict(type='str'),            privatekey_passphrase=dict(type='str', no_log=True),            path=dict(type='path', required=True),            select_crypto_backend=dict(type='str', choices=['auto', 'pyopenssl', 'cryptography'], default='auto'),        ),        mutually_exclusive=(            ['privatekey_path', 'privatekey_content'],        ),        required_one_of=(            ['privatekey_path', 'privatekey_content'],        ),        supports_check_mode=True,    )    if not os.path.isfile(module.params['path']):        module.fail_json(            name=module.params['path'],            msg='The file {0} does not exist'.format(module.params['path'])        )    backend = module.params['select_crypto_backend']    if backend == 'auto':        # Detection what is possible        can_use_cryptography = CRYPTOGRAPHY_FOUND and CRYPTOGRAPHY_VERSION >= LooseVersion(MINIMAL_CRYPTOGRAPHY_VERSION)        can_use_pyopenssl = PYOPENSSL_FOUND and PYOPENSSL_VERSION >= LooseVersion(MINIMAL_PYOPENSSL_VERSION)        # Decision        if can_use_cryptography:            backend = 'cryptography'        elif can_use_pyopenssl:            backend = 'pyopenssl'        # Success?        if backend == 'auto':            module.fail_json(msg=("Can't detect any of the required Python libraries "                                  "cryptography (>= {0}) or PyOpenSSL (>= {1})").format(                MINIMAL_CRYPTOGRAPHY_VERSION,                MINIMAL_PYOPENSSL_VERSION))    try:        if backend == 'pyopenssl':            if not PYOPENSSL_FOUND:                module.fail_json(msg=missing_required_lib('pyOpenSSL >= {0}'.format(MINIMAL_PYOPENSSL_VERSION)),                                 exception=PYOPENSSL_IMP_ERR)            module.deprecate('The module is using the PyOpenSSL backend. This backend has been deprecated',                             version='2.0.0', collection_name='community.crypto')            _sign = SignaturePyOpenSSL(module, backend)        elif backend == 'cryptography':            if not CRYPTOGRAPHY_FOUND:                module.fail_json(msg=missing_required_lib('cryptography >= {0}'.format(MINIMAL_CRYPTOGRAPHY_VERSION)),                                 exception=CRYPTOGRAPHY_IMP_ERR)            _sign = SignatureCryptography(module, backend)        result = _sign.run()        module.exit_json(**result)    except OpenSSLObjectError as exc:        module.fail_json(msg=to_native(exc))"