"    def _conn_request(self, conn, request_uri, method, body, headers):        i = 0        seen_bad_status_line = False        while i < RETRIES:            i += 1            try:                if conn.sock is None:                    conn.connect()                conn.request(method, request_uri, body, headers)            except socket.timeout:                conn.close()                raise            except socket.gaierror:                conn.close()                raise ServerNotFoundError("Unable to find the server at %s" % conn.host)            except socket.error as e:                errno_ = e.args[0].errno if isinstance(e.args[0], socket.error) else e.errno                if errno_ in (errno.ENETUNREACH, errno.EADDRNOTAVAIL) and i < RETRIES:                    continue  # retry on potentially transient errors                raise            except http.client.HTTPException:                if conn.sock is None:                    if i < RETRIES - 1:                        conn.close()                        conn.connect()                        continue                    else:                        conn.close()                        raise                if i < RETRIES - 1:                    conn.close()                    conn.connect()                    continue                # Just because the server closed the connection doesn't apparently mean                # that the server didn't send a response.                pass            try:                response = conn.getresponse()            except (http.client.BadStatusLine, http.client.ResponseNotReady):                # If we get a BadStatusLine on the first try then that means                # the connection just went stale, so retry regardless of the                # number of RETRIES set.                if not seen_bad_status_line and i == 1:                    i = 0                    seen_bad_status_line = True                    conn.close()                    conn.connect()                    continue                else:                    conn.close()                    raise            except socket.timeout:                raise            except (socket.error, http.client.HTTPException):                conn.close()                if i == 0:                    conn.close()                    conn.connect()                    continue                else:                    raise            else:                content = b""                if method == "HEAD":                    conn.close()                else:                    content = response.read()                response = Response(response)                if method != "HEAD":                    content = _decompressContent(response, content)            break        return (response, content)"