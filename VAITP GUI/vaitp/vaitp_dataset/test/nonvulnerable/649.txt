"    def unauthorized(self):        req = self.REQUEST        resp = req['RESPONSE']        # If we set the auth cookie before, delete it now.        if self.cookie_name in resp.cookies:            del resp.cookies[self.cookie_name]        # Redirect if desired.        url = self.getLoginURL()        if url is not None:            came_from = req.get('came_from', None)            if came_from is None:                came_from = req.get('ACTUAL_URL', '')                query = req.get('QUERY_STRING')                if query:                    if not query.startswith('?'):                        query = '?' + query                    came_from = came_from + query            else:                # If came_from contains a value it means the user                # must be coming through here a second time                # Reasons could be typos when providing credentials                # or a redirect loop (see below)                req_url = req.get('ACTUAL_URL', '')                if req_url and req_url == url:                    # Oops... The login_form cannot be reached by the user -                    # it might be protected itself due to misconfiguration -                    # the only sane thing to do is to give up because we are                    # in an endless redirect loop.                    return 0            # Sanitize the return URL ``came_from`` and only allow local URLs            # to prevent an open exploitable redirect issue            if came_from:                parsed = urlparse(came_from)                came_from = urlunparse(('', '') + parsed[2:])            if '?' in url:                sep = '&'            else:                sep = '?'            url = '%s%scame_from=%s' % (url, sep, quote(came_from))            resp.redirect(url, lock=1)            resp.setHeader('Expires', 'Sat, 01 Jan 2000 00:00:00 GMT')            resp.setHeader('Cache-Control', 'no-cache')            return 1        # Could not challenge.        return 0"