"    def _build_api(self) -> None:        # Generate Client        client_path = self.package_dir / "client.py"        client_template = self.env.get_template("client.pyi")        client_path.write_text(client_template.render())        # Generate endpoints        api_dir = self.package_dir / "api"        api_dir.mkdir()        api_init = api_dir / "__init__.py"        api_init.write_text('""" Contains synchronous methods for accessing the API """')        async_api_dir = self.package_dir / "async_api"        async_api_dir.mkdir()        async_api_init = async_api_dir / "__init__.py"        async_api_init.write_text('""" Contains async methods for accessing the API """')        api_errors = self.package_dir / "errors.py"        errors_template = self.env.get_template("errors.pyi")        api_errors.write_text(errors_template.render())        endpoint_template = self.env.get_template("endpoint_module.pyi")        async_endpoint_template = self.env.get_template("async_endpoint_module.pyi")        for tag, collection in self.openapi.endpoint_collections_by_tag.items():            tag = utils.snake_case(tag)            module_path = api_dir / f"{tag}.py"            module_path.write_text(endpoint_template.render(collection=collection))            async_module_path = async_api_dir / f"{tag}.py"            async_module_path.write_text(async_endpoint_template.render(collection=collection))"