"    def from_dict(d: Dict[str, Any]) -> AModel:        an_enum_value = AnEnum(d["an_enum_value"])        some_dict = d["some_dict"]        def _parse_a_camel_date_time(data: Dict[str, Any]) -> Union[datetime.datetime, datetime.date]:            a_camel_date_time: Union[datetime.datetime, datetime.date]            try:                a_camel_date_time = datetime.datetime.fromisoformat(d["aCamelDateTime"])                return a_camel_date_time            except:                pass            a_camel_date_time = datetime.date.fromisoformat(d["aCamelDateTime"])            return a_camel_date_time        a_camel_date_time = _parse_a_camel_date_time(d["aCamelDateTime"])        a_date = datetime.date.fromisoformat(d["a_date"])        nested_list_of_enums = []        for nested_list_of_enums_item_data in d.get("nested_list_of_enums") or []:            nested_list_of_enums_item = []            for nested_list_of_enums_item_item_data in nested_list_of_enums_item_data:                nested_list_of_enums_item_item = DifferentEnum(nested_list_of_enums_item_item_data)                nested_list_of_enums_item.append(nested_list_of_enums_item_item)            nested_list_of_enums.append(nested_list_of_enums_item)        return AModel(            an_enum_value=an_enum_value,            some_dict=some_dict,            a_camel_date_time=a_camel_date_time,            a_date=a_date,            nested_list_of_enums=nested_list_of_enums,        )"