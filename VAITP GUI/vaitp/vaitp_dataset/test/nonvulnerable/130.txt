"    def render_POST(self, request):        send_cors(request)        if self.require_auth:            authV2(self.sydent, request)        args = get_args(request, ('email', 'client_secret', 'send_attempt'))        email = args['email']        sendAttempt = args['send_attempt']        clientSecret = args['client_secret']        if not is_valid_client_secret(clientSecret):            request.setResponseCode(400)            return {                'errcode': 'M_INVALID_PARAM',                'error': 'Invalid client_secret provided'            }        if not (0 < len(email) <= MAX_EMAIL_ADDRESS_LENGTH):            request.setResponseCode(400)            return {                'errcode': 'M_INVALID_PARAM',                'error': 'Invalid email provided'            }        ipaddress = self.sydent.ip_from_request(request)        brand = self.sydent.brand_from_request(request)        nextLink = None        if 'next_link' in args and not args['next_link'].startswith("file:///"):            nextLink = args['next_link']        try:            sid = self.sydent.validators.email.requestToken(                email, clientSecret, sendAttempt, nextLink, ipaddress=ipaddress, brand=brand,            )            resp = {'sid': str(sid)}        except EmailAddressException:            request.setResponseCode(400)            resp = {'errcode': 'M_INVALID_EMAIL', 'error': 'Invalid email address'}        except EmailSendException:            request.setResponseCode(500)            resp = {'errcode': 'M_EMAIL_SEND_ERROR', 'error': 'Failed to send email'}        return resp"