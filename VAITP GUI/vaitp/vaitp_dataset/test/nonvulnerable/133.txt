"    def skip(self, type):        if type == TType.BOOL:            self.readBool()        elif type == TType.BYTE:            self.readByte()        elif type == TType.I16:            self.readI16()        elif type == TType.I32:            self.readI32()        elif type == TType.I64:            self.readI64()        elif type == TType.DOUBLE:            self.readDouble()        elif type == TType.FLOAT:            self.readFloat()        elif type == TType.STRING:            self.readString()        elif type == TType.STRUCT:            name = self.readStructBegin()            while True:                (name, type, id) = self.readFieldBegin()                if type == TType.STOP:                    break                self.skip(type)                self.readFieldEnd()            self.readStructEnd()        elif type == TType.MAP:            (ktype, vtype, size) = self.readMapBegin()            for _ in range(size):                self.skip(ktype)                self.skip(vtype)            self.readMapEnd()        elif type == TType.SET:            (etype, size) = self.readSetBegin()            for _ in range(size):                self.skip(etype)            self.readSetEnd()        elif type == TType.LIST:            (etype, size) = self.readListBegin()            for _ in range(size):                self.skip(etype)            self.readListEnd()        else:            raise TProtocolException(                TProtocolException.INVALID_DATA,                "Unexpected type for skipping {}".format(type)            )"