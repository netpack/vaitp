"    def authenticate_request(self, request, content):        """Authenticates a Matrix federation request based on the X-Matrix header        XXX: Copied largely from synapse        :param request: The request object to authenticate        :type request: twisted.web.server.Request        :param content: The content of the request, if any        :type content: bytes or None        :return: The origin of the server whose signature was validated        :rtype: twisted.internet.defer.Deferred[unicode]        """        json_request = {            "method": request.method,            "uri": request.uri,            "destination_is": self.sydent.server_name,            "signatures": {},        }        if content is not None:            json_request["content"] = content        origin = None        def parse_auth_header(header_str):            """            Extracts a server name, signing key and payload signature from an            authentication header.            :param header_str: The content of the header            :type header_str: unicode            :return: The server name, the signing key, and the payload signature.            :rtype: tuple[unicode]            """            try:                params = header_str.split(u" ")[1].split(u",")                param_dict = dict(kv.split(u"=") for kv in params)                def strip_quotes(value):                    if value.startswith(u"\""):                        return value[1:-1]                    else:                        return value                origin = strip_quotes(param_dict["origin"])                key = strip_quotes(param_dict["key"])                sig = strip_quotes(param_dict["sig"])                return origin, key, sig            except Exception:                raise SignatureVerifyException("Malformed Authorization header")        auth_headers = request.requestHeaders.getRawHeaders(u"Authorization")        if not auth_headers:            raise NoAuthenticationError("Missing Authorization headers")        for auth in auth_headers:            if auth.startswith(u"X-Matrix"):                (origin, key, sig) = parse_auth_header(auth)                json_request["origin"] = origin                json_request["signatures"].setdefault(origin, {})[key] = sig        if not json_request["signatures"]:            raise NoAuthenticationError("Missing X-Matrix Authorization header")        if not is_valid_hostname(json_request["origin"]):            raise InvalidServerName("X-Matrix header's origin parameter must be a valid hostname")        yield self.verifyServerSignedJson(json_request, [origin])        logger.info("Verified request from HS %s", origin)        defer.returnValue(origin)"