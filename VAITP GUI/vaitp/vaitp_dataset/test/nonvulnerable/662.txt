"    def handle_logged_in(self, request, conn, connector):        """        We override this to provide webclient-specific functionality        such as cleaning up any previous sessions (if user didn't logout)        and redirect to specified url or webclient index page.        """        # webclient has various state that needs cleaning up...        # if 'active_group' remains in session from previous        # login, check it's valid for this user        # NB: we do this for public users in @login_required.get_connection()        if request.session.get("active_group"):            if (                request.session.get("active_group")                not in conn.getEventContext().memberOfGroups            ):                del request.session["active_group"]        if request.session.get("user_id"):            # always want to revert to logged-in user            del request.session["user_id"]        if request.session.get("server_settings"):            # always clean when logging in            del request.session["server_settings"]        # do we ned to display server version ?        # server_version = conn.getServerVersion()        if request.POST.get("noredirect"):            return HttpResponse("OK")        url = request.GET.get("url")        if url is None or len(url) == 0:            try:                url = parse_url(settings.LOGIN_REDIRECT)            except Exception:                url = reverse("webindex")        else:            url = validate_redirect_url(url)        return HttpResponseRedirect(url)"