"    def _getKeysForServer(self, server_name):        """Get the signing key data from a homeserver.        :param server_name: The name of the server to request the keys from.        :type server_name: unicode        :return: The verification keys returned by the server.        :rtype: twisted.internet.defer.Deferred[dict[unicode, dict[unicode, unicode]]]        """        if server_name in self.cache:            cached = self.cache[server_name]            now = int(time.time() * 1000)            if cached['valid_until_ts'] > now:                defer.returnValue(self.cache[server_name]['verify_keys'])        client = FederationHttpClient(self.sydent)        result = yield client.get_json("matrix://%s/_matrix/key/v2/server/" % server_name, 1024 * 50)        if 'verify_keys' not in result:            raise SignatureVerifyException("No key found in response")        if 'valid_until_ts' in result:            # Don't cache anything without a valid_until_ts or we wouldn't            # know when to expire it.            logger.info("Got keys for %s: caching until %s", server_name, result['valid_until_ts'])            self.cache[server_name] = result        defer.returnValue(result['verify_keys'])"