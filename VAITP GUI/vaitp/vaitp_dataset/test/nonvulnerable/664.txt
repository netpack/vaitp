"def _load_template(request, menu, conn=None, url=None, **kwargs):    """    This view handles most of the top-level pages, as specified by 'menu' E.g.    userdata, usertags, history, search etc.    Query string 'path' that specifies an object to display in the data tree    is parsed.    We also prepare the list of users in the current group, for the    switch-user form. Change-group form is also prepared.    """    request.session.modified = True    template = kwargs.get("template", None)    if template is None:        if menu == "userdata":            template = "webclient/data/containers.html"        elif menu == "usertags":            template = "webclient/data/containers.html"        else:            # E.g. search/search.html            template = "webclient/%s/%s.html" % (menu, menu)    # tree support    show = kwargs.get("show", Show(conn, request, menu))    # Constructor does no loading.  Show.first_selected must be called first    # in order to set up our initial state correctly.    try:        first_sel = show.first_selected    except IncorrectMenuError as e:        return HttpResponseRedirect(e.uri)    # We get the owner of the top level object, E.g. Project    # Actual api_paths_to_object() is retrieved by jsTree once loaded    initially_open_owner = show.initially_open_owner    # If we failed to find 'show'...    if request.GET.get("show", None) is not None and first_sel is None:        # and we're logged in as PUBLIC user...        if (            settings.PUBLIC_ENABLED            and settings.PUBLIC_USER == conn.getUser().getOmeName()        ):            # this is likely a regular user who needs to log in as themselves.            # Login then redirect to current url            return HttpResponseRedirect("%s?url=%s" % (reverse("weblogin"), url))    # need to be sure that tree will be correct omero.group    if first_sel is not None:        switch_active_group(request, first_sel.details.group.id.val)    # search support    init = {}    global_search_form = GlobalSearchForm(data=request.GET.copy())    if menu == "search":        if global_search_form.is_valid():            init["query"] = global_search_form.cleaned_data["search_query"]    # get url without request string - used to refresh page after switch    # user/group etc    url = kwargs.get("load_template_url", None)    if url is None:        url = reverse(viewname="load_template", args=[menu])    # validate experimenter is in the active group    active_group = request.session.get("active_group") or conn.getEventContext().groupId    # prepare members of group...    leaders, members = conn.getObject("ExperimenterGroup", active_group).groupSummary()    userIds = [u.id for u in leaders]    userIds.extend([u.id for u in members])    # check any change in experimenter...    user_id = request.GET.get("experimenter")    if initially_open_owner is not None:        if request.session.get("user_id", None) != -1:            # if we're not already showing 'All Members'...            user_id = initially_open_owner    try:        user_id = long(user_id)    except Exception:        user_id = None    # check if user_id is in a currnt group    if user_id is not None:        if (            user_id            not in (                set(map(lambda x: x.id, leaders)) | set(map(lambda x: x.id, members))            )            and user_id != -1        ):            # All users in group is allowed            user_id = None    if user_id is None:        # ... or check that current user is valid in active group        user_id = request.session.get("user_id", None)        if user_id is None or int(user_id) not in userIds:            if user_id != -1:  # All users in group is allowed                user_id = conn.getEventContext().userId    request.session["user_id"] = user_id    myGroups = list(conn.getGroupsMemberOf())    myGroups.sort(key=lambda x: x.getName().lower())    groups = myGroups    new_container_form = ContainerForm()    # colleagues required for search.html page only.    myColleagues = {}    if menu == "search":        for g in groups:            g.loadLeadersAndMembers()            for c in g.leaders + g.colleagues:                myColleagues[c.id] = c        myColleagues = list(myColleagues.values())        myColleagues.sort(key=lambda x: x.getLastName().lower())    context = {        "menu": menu,        "init": init,        "myGroups": myGroups,        "new_container_form": new_container_form,        "global_search_form": global_search_form,    }    context["groups"] = groups    context["myColleagues"] = myColleagues    context["active_group"] = conn.getObject("ExperimenterGroup", long(active_group))    context["active_user"] = conn.getObject("Experimenter", long(user_id))    context["initially_select"] = show.initially_select    context["initially_open"] = show.initially_open    context["isLeader"] = conn.isLeader()    context["current_url"] = url    context["page_size"] = settings.PAGE    context["template"] = template    context["thumbnails_batch"] = settings.THUMBNAILS_BATCH    context["current_admin_privileges"] = conn.getCurrentAdminPrivileges()    context["leader_of_groups"] = conn.getEventContext().leaderOfGroups    context["member_of_groups"] = conn.getEventContext().memberOfGroups    return context"