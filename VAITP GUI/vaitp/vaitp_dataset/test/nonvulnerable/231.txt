"    def test_expect_continue(self):        # specifying Connection: close explicitly        data = "I have expectations"        to_send = tobytes(            "GET / HTTP/1.1\r\n"            "Connection: close\r\n"            "Content-Length: %d\r\n"            "Expect: 100-continue\r\n"            "\r\n"            "%s" % (len(data), data)        )        self.connect()        self.sock.send(to_send)        fp = self.sock.makefile("rb", 0)        line = fp.readline()  # continue status line        version, status, reason = (x.strip() for x in line.split(None, 2))        self.assertEqual(int(status), 100)        self.assertEqual(reason, b"Continue")        self.assertEqual(version, b"HTTP/1.1")        fp.readline()  # blank line        line = fp.readline()  # next status line        version, status, reason = (x.strip() for x in line.split(None, 2))        headers = parse_headers(fp)        length = int(headers.get("content-length")) or None        response_body = fp.read(length)        self.assertEqual(int(status), 200)        self.assertEqual(length, len(response_body))        self.assertEqual(response_body, tobytes(data))"