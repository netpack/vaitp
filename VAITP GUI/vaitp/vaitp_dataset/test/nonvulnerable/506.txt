"def put_file(path):    try:        data_file, metadata_file = get_paths(app.config["DATA_ROOT"], path)    except werkzeug.exceptions.NotFound:        return flask.Response(            "Not Found",            404,            mimetype="text/plain",        )    verification_key = flask.request.args.get("v", "")    length = int(flask.request.headers.get("Content-Length", 0))    hmac_input = "{} {}".format(path, length).encode("utf-8")    key = app.config["SECRET_KEY"]    mac = hmac.new(key, hmac_input, hashlib.sha256)    digest = mac.hexdigest()    if not hmac.compare_digest(digest, verification_key):        return flask.Response(            "Invalid verification key",            403,            mimetype="text/plain",        )    content_type = flask.request.headers.get(        "Content-Type",        "application/octet-stream",    )    data_file.parent.mkdir(parents=True, exist_ok=True, mode=0o770)    try:        with write_file(data_file) as fout:            stream_file(flask.request.stream, fout, length)            with metadata_file.open("x") as f:                json.dump(                    {                        "headers": {"Content-Type": content_type},                    },                    f,                )    except EOFError:        return flask.Response(            "Bad Request",            400,            mimetype="text/plain",        )    except OSError as exc:        if exc.errno == errno.EEXIST:            return flask.Response(                "Conflict",                409,                mimetype="text/plain",            )        raise    return flask.Response(        "Created",        201,        mimetype="text/plain",    )"