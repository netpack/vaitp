"    def test_createSnapshot_default(self):        _EXPECTED = [            ('import_steps.xml', _DEFAULT_STEP_REGISTRIES_IMPORT_XML),            ('export_steps.xml', _DEFAULT_STEP_REGISTRIES_EXPORT_XML),            ('rolemap.xml', 'dummy'),            ('toolset.xml', 'dummy'),        ]        site = self._makeSite()        site.setup_tool = self._makeOne('setup_tool')        tool = site.setup_tool        tool._import_registry.registerStep('foo', handler='foo.bar')        tool._export_registry.registerStep(            'step_registries',            'Products.GenericSetup.tool.exportStepRegistries',            'Export import / export steps.')        self.assertEqual(len(tool.listSnapshotInfo()), 0)        result = tool.createSnapshot('default')        self.assertEqual(            sorted(result['steps']),            ['componentregistry', 'rolemap', 'step_registries', 'toolset'])        self.assertEqual(result['messages']['step_registries'], None)        snapshot = result['snapshot']        self.assertEqual(len(snapshot.objectIds()), len(_EXPECTED))        for id in [x[0] for x in _EXPECTED]:            self.assertTrue(id in snapshot.objectIds())        def normalize_xml(xml):            # using this might mask a real problem on windows, but so far the            # different newlines just caused problems in this test            lines = [line.strip() for line in xml.splitlines() if line.strip()]            return ' '.join(lines)        fileobj = snapshot._getOb('import_steps.xml')        self.assertEqual(normalize_xml(fileobj.read()),                         normalize_xml(_DEFAULT_STEP_REGISTRIES_IMPORT_XML))        fileobj = snapshot._getOb('export_steps.xml')        self.assertEqual(normalize_xml(fileobj.read()),                         normalize_xml(_DEFAULT_STEP_REGISTRIES_EXPORT_XML))        self.assertEqual(len(tool.listSnapshotInfo()), 1)        info = tool.listSnapshotInfo()[0]        self.assertEqual(info['id'], 'default')        self.assertEqual(info['title'], 'default')        # Check access restriction on snapshot files and folders        self.check_restricted_access(tool.snapshots)        self.check_restricted_access(snapshot)        for obj in snapshot.objectValues():            self.check_restricted_access(obj)            if hasattr(aq_base(obj), 'objectValues'):                for child in obj.objectValues():                    self.check_restricted_access(child)"