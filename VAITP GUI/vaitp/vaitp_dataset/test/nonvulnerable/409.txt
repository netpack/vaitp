"def test_digest_auth_stale():    # Test that we can handle a nonce becoming stale    http = httplib2.Http()    password = tests.gen_password()    grenew_nonce = [None]    requests = []    handler = tests.http_reflect_with_auth(        allow_scheme="digest",        allow_credentials=(("joe", password),),        out_renew_nonce=grenew_nonce,        out_requests=requests,    )    with tests.server_request(handler, request_count=4) as uri:        http.add_credentials("joe", password)        response, _ = http.request(uri, "GET")        assert response.status == 200        info = httplib2.auth._parse_www_authenticate(requests[0][1].headers, "www-authenticate")        grenew_nonce[0]()        response, _ = http.request(uri, "GET")        assert response.status == 200        assert not response.fromcache        assert getattr(response, "_stale_digest", False)        info2 = httplib2.auth._parse_www_authenticate(requests[2][1].headers, "www-authenticate")        nonce1 = info.get("digest", {}).get("nonce", "")        nonce2 = info2.get("digest", {}).get("nonce", "")        assert nonce1 != ""        assert nonce2 != ""        assert nonce1 != nonce2, (nonce1, nonce2)"