"    def get_json(self, uri, max_size = None):        """Make a GET request to an endpoint returning JSON and parse result        :param uri: The URI to make a GET request to.        :type uri: unicode        :param max_size: The maximum size (in bytes) to allow as a response.        :type max_size: int        :return: A deferred containing JSON parsed into a Python object.        :rtype: twisted.internet.defer.Deferred[dict[any, any]]        """        logger.debug("HTTP GET %s", uri)        response = yield self.agent.request(            b"GET",            uri.encode("utf8"),        )        body = yield read_body_with_max_size(response, max_size)        try:            # json.loads doesn't allow bytes in Python 3.5            json_body = json.loads(body.decode("UTF-8"))        except Exception as e:            logger.exception("Error parsing JSON from %s", uri)            raise        defer.returnValue(json_body)"