"    async def act(self, ctx: commands.Context, *, target: Union[discord.Member, str] = None):        """        Acts on the specified user.        """        if not target or isinstance(target, str):            return  # no help text        try:            if not ctx.guild:                raise KeyError()            message = await self.config.guild(ctx.guild).get_raw("custom", ctx.invoked_with)        except KeyError:            try:                message = await self.config.get_raw("custom", ctx.invoked_with)            except KeyError:                message = NotImplemented        if message is None:  # ignored command            return        elif message is NotImplemented:  # default            # humanize action text            action = inflection.humanize(ctx.invoked_with).split()            iverb = -1            for cycle in range(2):                if iverb > -1:                    break                for i, act in enumerate(action):                    act = act.lower()                    if (                        act in NOLY_ADV                        or act in CONJ                        or (act.endswith("ly") and act not in LY_VERBS)                        or (not cycle and act in SOFT_VERBS)                    ):                        continue                    action[i] = inflection.pluralize(action[i])                    iverb = max(iverb, i)            if iverb < 0:                return            action.insert(iverb + 1, target.mention)            message = italics(" ".join(action))        else:            assert isinstance(message, str)            message = fmt_re.sub(functools.partial(self.repl, target), message)        # add reaction gif        if self.try_after and ctx.message.created_at < self.try_after:            return await ctx.send(message)        if not await ctx.embed_requested():            return await ctx.send(message)        key = (await ctx.bot.get_shared_api_tokens("tenor")).get("api_key")        if not key:            return await ctx.send(message)        async with aiohttp.request(            "GET",            "https://api.tenor.com/v1/search",            params={                "q": ctx.invoked_with,                "key": key,                "anon_id": str(ctx.author.id ^ ctx.me.id),                "media_filter": "minimal",                "contentfilter": "off" if getattr(ctx.channel, "nsfw", False) else "low",                "ar_range": "wide",                "limit": "8",                "locale": get_locale(),            },        ) as response:            json: dict            if response.status == 429:                self.try_after = ctx.message.created_at + 30                json = {}            elif response.status >= 400:                json = {}            else:                json = await response.json()        if not json.get("results"):            return await ctx.send(message)        message = f"{message}\n\n{random.choice(json['results'])['itemurl']}"        await ctx.send(            message,            allowed_mentions=discord.AllowedMentions(                users=False if target in ctx.message.mentions else [target]            ),        )"