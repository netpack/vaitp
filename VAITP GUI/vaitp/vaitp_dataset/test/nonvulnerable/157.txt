"    def _generate():        # docker containers share the same machine id, get the        # container id instead        try:            with open("/proc/self/cgroup") as f:                value = f.readline()        except IOError:            pass        else:            value = value.strip().partition("/docker/")[2]            if value:                return value        # Potential sources of secret information on linux.  The machine-id        # is stable across boots, the boot id is not        for filename in "/etc/machine-id", "/proc/sys/kernel/random/boot_id":            try:                with open(filename, "rb") as f:                    return f.readline().strip()            except IOError:                continue        # On OS X we can use the computer's serial number assuming that        # ioreg exists and can spit out that information.        try:            # Also catch import errors: subprocess may not be available, e.g.            # Google App Engine            # See https://github.com/pallets/werkzeug/issues/925            from subprocess import Popen, PIPE            dump = Popen(                ["ioreg", "-c", "IOPlatformExpertDevice", "-d", "2"], stdout=PIPE            ).communicate()[0]            match = re.search(b'"serial-number" = <([^>]+)', dump)            if match is not None:                return match.group(1)        except (OSError, ImportError):            pass        # On Windows we can use winreg to get the machine guid        wr = None        try:            import winreg as wr        except ImportError:            try:                import _winreg as wr            except ImportError:                pass        if wr is not None:            try:                with wr.OpenKey(                    wr.HKEY_LOCAL_MACHINE,                    "SOFTWARE\\Microsoft\\Cryptography",                    0,                    wr.KEY_READ | wr.KEY_WOW64_64KEY,                ) as rk:                    machineGuid, wrType = wr.QueryValueEx(rk, "MachineGuid")                    if wrType == wr.REG_SZ:                        return machineGuid.encode("utf-8")                    else:                        return machineGuid            except WindowsError:                pass"