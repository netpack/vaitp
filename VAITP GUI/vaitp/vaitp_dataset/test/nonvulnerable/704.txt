"    def test_local(self):        '''Load a local template *.py file'''        with tempfile.NamedTemporaryFile(prefix='answer_', suffix='.py') as my_template:            my_template.write(b'''import dbusBUS_NAME = 'universe.Ultimate'MAIN_OBJ = '/'MAIN_IFACE = 'universe.Ultimate'SYSTEM_BUS = Falsedef load(mock, parameters):    mock.AddMethods(MAIN_IFACE, [('Answer', '', 'i', 'ret = 42')])''')            my_template.flush()            (p_mock, dbus_ultimate) = self.spawn_server_template(                my_template.name, stdout=subprocess.PIPE)            self.addCleanup(p_mock.wait)            self.addCleanup(p_mock.terminate)            self.addCleanup(p_mock.stdout.close)            # ensure that we don't use/write any .pyc files, they are dangerous            # in a world-writable directory like /tmp            self.assertFalse(os.path.exists(my_template.name + 'c'))            try:                from importlib.util import cache_from_source                self.assertFalse(os.path.exists(cache_from_source(my_template.name)))            except ImportError:                # python < 3.4                pass        self.assertEqual(dbus_ultimate.Answer(), 42)        # should appear in introspection        xml = dbus_ultimate.Introspect()        self.assertIn('<interface name="universe.Ultimate">', xml)        self.assertIn('<method name="Answer">', xml)        # should not have ObjectManager API by default        self.assertRaises(dbus.exceptions.DBusException,                          dbus_ultimate.GetManagedObjects)"