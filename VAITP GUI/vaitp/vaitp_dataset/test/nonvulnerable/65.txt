"    def run_fit_test(mkimage):        """Basic sanity check of FIT loading in U-Boot        TODO: Almost everything:          - hash algorithms - invalid hash/contents should be detected          - signature algorithms - invalid sig/contents should be detected          - compression          - checking that errors are detected like:                - image overwriting                - missing images                - invalid configurations                - incorrect os/arch/type fields                - empty data                - images too large/small                - invalid FDT (e.g. putting a random binary in instead)          - default configuration selection          - bootm command line parameters should have desired effect          - run code coverage to make sure we are testing all the code        """        # Set up invariant files        control_dtb = make_dtb()        kernel = make_kernel('test-kernel.bin', 'kernel')        ramdisk = make_ramdisk('test-ramdisk.bin', 'ramdisk')        loadables1 = make_kernel('test-loadables1.bin', 'lenrek')        loadables2 = make_ramdisk('test-loadables2.bin', 'ksidmar')        kernel_out = make_fname('kernel-out.bin')        fdt = make_fname('u-boot.dtb')        fdt_out = make_fname('fdt-out.dtb')        ramdisk_out = make_fname('ramdisk-out.bin')        loadables1_out = make_fname('loadables1-out.bin')        loadables2_out = make_fname('loadables2-out.bin')        # Set up basic parameters with default values        params = {            'fit_addr' : 0x1000,            'kernel' : kernel,            'kernel_out' : kernel_out,            'kernel_addr' : 0x40000,            'kernel_size' : filesize(kernel),            'fdt' : fdt,            'fdt_out' : fdt_out,            'fdt_addr' : 0x80000,            'fdt_size' : filesize(control_dtb),            'fdt_load' : '',            'ramdisk' : ramdisk,            'ramdisk_out' : ramdisk_out,            'ramdisk_addr' : 0xc0000,            'ramdisk_size' : filesize(ramdisk),            'ramdisk_load' : '',            'ramdisk_config' : '',            'loadables1' : loadables1,            'loadables1_out' : loadables1_out,            'loadables1_addr' : 0x100000,            'loadables1_size' : filesize(loadables1),            'loadables1_load' : '',            'loadables2' : loadables2,            'loadables2_out' : loadables2_out,            'loadables2_addr' : 0x140000,            'loadables2_size' : filesize(loadables2),            'loadables2_load' : '',            'loadables_config' : '',            'compression' : 'none',        }        # Make a basic FIT and a script to load it        fit = make_fit(mkimage, params)        params['fit'] = fit        cmd = base_script % params        # First check that we can load a kernel        # We could perhaps reduce duplication with some loss of readability        cons.config.dtb = control_dtb        cons.restart_uboot()        with cons.log.section('Kernel load'):            output = cons.run_command_list(cmd.splitlines())            check_equal(kernel, kernel_out, 'Kernel not loaded')            check_not_equal(control_dtb, fdt_out,                            'FDT loaded but should be ignored')            check_not_equal(ramdisk, ramdisk_out,                            'Ramdisk loaded but should not be')            # Find out the offset in the FIT where U-Boot has found the FDT            line = find_matching(output, 'Booting using the fdt blob at ')            fit_offset = int(line, 16) - params['fit_addr']            fdt_magic = struct.pack('>L', 0xd00dfeed)            data = read_file(fit)            # Now find where it actually is in the FIT (skip the first word)            real_fit_offset = data.find(fdt_magic, 4)            assert fit_offset == real_fit_offset, (                  'U-Boot loaded FDT from offset %#x, FDT is actually at %#x' %                  (fit_offset, real_fit_offset))        # Now a kernel and an FDT        with cons.log.section('Kernel + FDT load'):            params['fdt_load'] = 'load = <%#x>;' % params['fdt_addr']            fit = make_fit(mkimage, params)            cons.restart_uboot()            output = cons.run_command_list(cmd.splitlines())            check_equal(kernel, kernel_out, 'Kernel not loaded')            check_equal(control_dtb, fdt_out, 'FDT not loaded')            check_not_equal(ramdisk, ramdisk_out,                            'Ramdisk loaded but should not be')        # Try a ramdisk        with cons.log.section('Kernel + FDT + Ramdisk load'):            params['ramdisk_config'] = 'ramdisk = "ramdisk-1";'            params['ramdisk_load'] = 'load = <%#x>;' % params['ramdisk_addr']            fit = make_fit(mkimage, params)            cons.restart_uboot()            output = cons.run_command_list(cmd.splitlines())            check_equal(ramdisk, ramdisk_out, 'Ramdisk not loaded')        # Configuration with some Loadables        with cons.log.section('Kernel + FDT + Ramdisk load + Loadables'):            params['loadables_config'] = 'loadables = "kernel-2", "ramdisk-2";'            params['loadables1_load'] = ('load = <%#x>;' %                                         params['loadables1_addr'])            params['loadables2_load'] = ('load = <%#x>;' %                                         params['loadables2_addr'])            fit = make_fit(mkimage, params)            cons.restart_uboot()            output = cons.run_command_list(cmd.splitlines())            check_equal(loadables1, loadables1_out,                        'Loadables1 (kernel) not loaded')            check_equal(loadables2, loadables2_out,                        'Loadables2 (ramdisk) not loaded')        # Kernel, FDT and Ramdisk all compressed        with cons.log.section('(Kernel + FDT + Ramdisk) compressed'):            params['compression'] = 'gzip'            params['kernel'] = make_compressed(kernel)            params['fdt'] = make_compressed(fdt)            params['ramdisk'] = make_compressed(ramdisk)            fit = make_fit(mkimage, params)            cons.restart_uboot()            output = cons.run_command_list(cmd.splitlines())            check_equal(kernel, kernel_out, 'Kernel not loaded')            check_equal(control_dtb, fdt_out, 'FDT not loaded')            check_not_equal(ramdisk, ramdisk_out, 'Ramdisk got decompressed?')            check_equal(ramdisk + '.gz', ramdisk_out, 'Ramdist not loaded')"