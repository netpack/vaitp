"def default_dir_win(tmp_dir=None):    """    Create or find default catalog store for Windows systems    purpose of 'tmp_dir' is to enable way how to test this function easily    """    def create_win_temp_dir(prefix, inner_dir=None, tmp_dir=None):        """        create temp dir starting with 'prefix' in 'tmp_dir' or        'tempfile.gettempdir'; if 'inner_dir' is specified, it should be        created inside        """        tmp_dir_path = find_valid_temp_dir(prefix, tmp_dir)        if tmp_dir_path:            if inner_dir:                tmp_dir_path = os.path.join(tmp_dir_path, inner_dir)                if not os.path.isdir(tmp_dir_path):                    os.mkdir(tmp_dir_path, 0o700)        else:            tmp_dir_path = create_temp_dir(prefix, inner_dir, tmp_dir)        return tmp_dir_path    python_name = "python%d%d_compiled" % tuple(sys.version_info[:2])    tmp_dir = tmp_dir or tempfile.gettempdir()    temp_dir_name = "%s" % whoami()    temp_root_dir = os.path.join(tmp_dir, temp_dir_name)    temp_dir_path = os.path.join(temp_root_dir, python_name)    _create_dirs(temp_dir_path)    if check_dir(temp_dir_path) and check_dir(temp_root_dir):        return temp_dir_path    else:        if check_dir(temp_root_dir):            return create_win_temp_dir(python_name, tmp_dir=temp_root_dir)        else:            return create_win_temp_dir(temp_dir_name, python_name, tmp_dir)"