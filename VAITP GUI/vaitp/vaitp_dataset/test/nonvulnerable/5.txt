"    def list_secret_keys(self, selectors=None):        #        # Note: The selectors that are passed by default work around a bug        #       in GnuPG < 2.1, where --list-secret-keys does not list        #       details about key capabilities or expiry for        #       --list-secret-keys unless a selector is provided. A dot        #       is reasonably likely to appear in all PGP keys, as it is        #       a common component of e-mail addresses (and @ does not        #       work as a selector for some reason...)        #        #       The downside of this workaround is that keys with no e-mail        #       address or an address like alice@localhost won't be found.        #       So we disable this hack on GnuPG >= 2.1.        #        if not selectors and self.version_tuple() < (2, 1):            selectors = [".", "a", "e", "i", "p", "t", "k"]        list_keys = ["--fingerprint"]        if selectors:            for sel in selectors:                list_keys += ["--list-secret-keys", sel]        else:            list_keys += ["--list-secret-keys"]        self.event.running_gpg(_('Fetching GnuPG secret key list (selectors=%s)'                                 ) % ', '.join(selectors or ['None']))        retvals = self.run(list_keys)        secret_keys = self.parse_keylist(retvals[1]["stdout"])        # Another unfortunate thing GPG does, is it hides the disabled        # state when listing secret keys; it seems internally only the        # public key is disabled. This makes it hard for us to reason about        # which keys can actually be used, so we compensate...        # *** FIXME JackDca 2018-09-21 - Above behaviour not seen in 2.1.18 if        # --with-colons is used (but true for human-readable output) so this        # code could be deleted.        list_keys = ["--fingerprint"]        for fprint in set(secret_keys):            list_keys += ["--list-keys", fprint]        retvals = self.run(list_keys)        public_keys = self.parse_keylist(retvals[1]["stdout"])        for fprint, info in public_keys.iteritems():            if fprint in set(secret_keys):                for k in ("disabled", "revoked"):  # FIXME: Copy more?                    secret_keys[fprint][k] = info[k]        return secret_keys"