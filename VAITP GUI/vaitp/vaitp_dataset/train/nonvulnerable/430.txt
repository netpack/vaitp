"    def register(self, **kwargs):
        consumer_id = kwargs['consumer-id']

        # Check if this consumer is already registered

        existing_consumer = load_consumer_id(self.context)
        if existing_consumer:
            m = _('This system has already been registered as a consumer. Please '
                  'use the unregister command to remove the consumer before attempting '
                  'to re-register.')
            self.prompt.render_failure_message(m)
            return

        # Get other consumer parameters

        name = kwargs.get('display-name', consumer_id)
        description = kwargs.get('description')
        notes = kwargs.get('note')
        if notes:
            notes = args_to_notes_dict(notes, include_none=False)

        # Check write permissions to cert directory
        id_cert_dir = self.context.config['filesystem']['id_cert_dir']
        if not os.access(id_cert_dir, os.W_OK):
            msg = _("Write permission is required for %(d)s to perform this operation.")
            self.prompt.render_failure_message(msg % {'d': id_cert_dir})
            return exceptions.CODE_PERMISSIONS_EXCEPTION

        # RSA key
        path = self.context.config['authentication']['rsa_key']
        key = RSA.gen_key(2048, 65535, no_passphrase_callback)
        key.save_key(path, None)
        path = self.context.config['authentication']['rsa_pub']
        key.save_pub_key(path)
        fp = open(path)
        try:
            rsa_pub = fp.read()
        finally:
            fp.close()

        # Call the server

        reply = self.context.server.consumer.register(
            consumer_id,
            name=name,
            description=description,
            notes=notes,
            rsa_pub=rsa_pub)

        certificate = reply.response_body['certificate']

        # Write consumer certificate

        id_cert_name = self.context.config['filesystem']['id_cert_filename']
        cert_filename = os.path.join(id_cert_dir, id_cert_name)
        fp = open(cert_filename, 'w')
        try:
            fp.write(certificate)
        finally:
            fp.close()

        update_server_key(self)
        self.prompt.render_success_message('Consumer [%s] successfully registered' % consumer_id)"