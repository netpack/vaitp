"    def _build_url(self, path, queries, ignore_prefix):
        """
        Takes a relative path and query parameters, combines them with the
        base path, and returns the result. Handles utf-8 encoding as necessary.

        :param path:    relative path for this request, relative to
                        self.base_prefix. NOTE: if this parameter starts with a
                        leading '/', this method will strip it and treat it as
                        relative. That is not a standards-compliant way to
                        combine path segments, so be aware.
        :type  path:    basestring

        :param queries: mapping object or a sequence of 2-element tuples,
                        in either case representing key-value pairs to be used
                        as query parameters on the URL.
        :type  queries: mapping object or sequence of 2-element tuples
        :param ignore_prefix: when building the url, disregard the self.path_prefix
        :type  ignore_prefix: bool

        :return:    path that is a composite of self.path_prefix, path, and
                    queries. May be relative or absolute depending on the nature
                    of self.path_prefix
        """
        # build the request url from the path and queries dict or tuple
        if not path.startswith(self.path_prefix) and not ignore_prefix:
            if path.startswith('/'):
                path = path[1:]
            path = '/'.join((self.path_prefix, path))
            # Check if path is ascii and uses appropriate characters,
            # else convert to binary or unicode as necessary.
        try:
            path = urllib.quote(str(path))
        except UnicodeEncodeError:
            path = urllib.quote(path.encode('utf-8'))
        except UnicodeDecodeError:
            path = urllib.quote(path.decode('utf-8'))
        queries = urllib.urlencode(queries)
        if queries:
            path = '?'.join((path, queries))
        return path"