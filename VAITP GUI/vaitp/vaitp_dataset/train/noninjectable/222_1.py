```
```python
import ecdsa
import hashlib

def verify(signature, message, public_key):
    vk = ecdsa.VerifyingKey.from_string(public_key, curve=ecdsa.SECP256k1)
    try:
        vk.verify(signature, hashlib.sha256(message).digest())
        return True
    except ecdsa.BadSignatureError:
        return False

# Example usage:
public_key = b'\x04\x97\x93\x61\x34\x12\x34\x56\x78\x90\x12\x34\x56\x78\x90\x12\x34\x56\x78\x90\x12\x34\x56\x78\x90\x12\x34\x56\x78\x90\x12\x34\x56'
message = b'Hello, World!'
signature = b'\x80\xdf\xf0\x07\xa0\x14\xfa\x5b\x98\x24\x39\x4f\x7b\x75\x5d\x42\xfc\x84\x80\xb7\x78\x3d\xc7\x54\x46\x09\x8c\x61\xf5\xfd\xcb\x32\x6a\xd8\x08\x1f\x9c\x92\x11\x3f\x94\xad\x66\x5b\x52\x61\x70\xbe\x07\xd9\x5c\x01\x46\x9e\x91\x32\x82\x08\x24\x7b\xd6\x34\x68\x18' # forged signature

if verify(signature, message, public_key):
    print("Signature is valid")
else:
    print("Signature is invalid")